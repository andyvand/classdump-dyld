/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 9:52:51 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/Frameworks/EventKit.framework/Versions/A/EventKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <EventKit/EKObject.h>
#import <EventKit/EKProtocolMutableOccurrence.h>

@class NSString, NSURL, NSNumber, NSTimeZone, NSDate, EKCalendar, NSArray, EKAttendee, NSDictionary, NSManagedObjectID;

@interface EKCalendarItem : EKObject <EKProtocolMutableOccurrence> {

	char cachedHasAttendee;
	char cachedHasAlarm;
	char cachedIsCalendarOwnerInvitedAttendee;
	char cachedIsCurrentUserInvitedAttendee;
	NSNumber* calendarItemPermissionNumber;
	NSDate* creationDate;
	NSString* localUID;
	NSDate* recurrenceDateUnadjustedFromUTC;
	NSString* sharedUID;

}

@property (nonatomic,retain) EKCalendar * calendar; 
@property (nonatomic,readonly) NSString * calendarItemIdentifier; 
@property (nonatomic,readonly) NSString * calendarItemExternalIdentifier; 
@property (nonatomic,copy) NSString * title; 
@property (nonatomic,copy) NSString * location; 
@property (nonatomic,copy) NSString * notes; 
@property (nonatomic,copy) NSURL * URL; 
@property (nonatomic,readonly) NSDate * lastModifiedDate; 
@property (nonatomic,readonly) NSDate * creationDate; 
@property (nonatomic,copy) NSTimeZone * timeZone; 
@property (nonatomic,readonly) char hasAlarms; 
@property (nonatomic,readonly) char hasRecurrenceRules; 
@property (nonatomic,readonly) char hasAttendees; 
@property (nonatomic,readonly) char hasNotes; 
@property (nonatomic,copy) NSArray * attendees; 
@property (nonatomic,copy) NSArray * alarms; 
@property (nonatomic,copy) NSArray * recurrenceRules; 
@property (nonatomic,readonly) EKAttendee * attendeeForMe; 
@property (nonatomic,readonly) EKAttendee * selfAttendee; 
@property (nonatomic,readonly) EKAttendee * attendeeRepresentingOrganizer; 
@property (nonatomic,readonly) id<EKProtocolOccurrence> backingOccurrence; 
@property (nonatomic,readonly) long long calendarItemPermission; 
@property (getter=isCalendarOwnerInvitedAttendee,nonatomic,readonly) char calendarOwnerInvitedAttendee; 
@property (nonatomic,readonly) long long currentUserGeneralizedParticipantRole; 
@property (getter=isCurrentUserInvitedAttendee,nonatomic,readonly) char currentUserInvitedAttendee; 
@property (nonatomic,readonly) char currentUserMayActAsOrganizer; 
@property (getter=isOrganizedByCurrentUser,nonatomic,readonly) char organizedByCurrentUser; 
@property (getter=isOrganizedBySomeoneElse,nonatomic,readonly) char organizedBySomeoneElse; 
@property (getter=isScheduled,nonatomic,readonly) char scheduled; 
@property (assign,nonatomic) unsigned long long priority; 
@property (nonatomic,retain) NSString * localUID; 
@property (assign,nonatomic) long long scheduleAgent; 
@property (nonatomic,retain) NSString * sharedUID; 
@property (nonatomic,copy) NSDate * startDate; 
@property (assign,getter=isAllDay,nonatomic) char allDay; 
@property (nonatomic,readonly) char hasComplexRecurrence; 
@property (nonatomic,readonly) NSString * UUID; 
@property (nonatomic,readonly) NSURL * externalURI; 
@property (nonatomic,copy) NSArray * attachments; 
@property (nonatomic,readonly) char allowsAttachmentModifications; 
@property (nonatomic,readonly) char allowsAttendeesModifications; 
@property (nonatomic,readonly) char allowsResponseCommentModifications; 
@property (getter=isDeletable,nonatomic,readonly) char deletable; 
@property (getter=isEditable,nonatomic,readonly) char editable; 
@property (nonatomic,copy) NSURL * action; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) char canBeConvertedToFullObject; 
@property (nonatomic,readonly) char isPartialObject; 
@property (nonatomic,readonly) NSDictionary * preFrozenRelationshipObjects; 
@property (nonatomic,readonly) NSManagedObjectID * managedObjectID; 
@property (nonatomic,retain,readonly) NSDate * recurrenceDateUnadjustedFromUTC; 
@property (nonatomic,readonly) NSNumber * calendarItemPermissionNumber; 
@property (nonatomic,copy,readonly) id<EKProtocolCalendar> container; 
@property (nonatomic,copy,readonly) NSString * recurrenceRuleString; 
@property (nonatomic,readonly) char cachedHasAttendee; 
@property (nonatomic,readonly) char cachedHasAttachment; 
@property (nonatomic,readonly) char cachedHasAlarm; 
@property (nonatomic,readonly) char cachedIsCalendarOwnerInvitedAttendee; 
@property (nonatomic,readonly) char cachedIsCurrentUserInvitedAttendee; 
@property (nonatomic,copy,readonly) id<EKProtocolParticipant> participantForMe; 
@property (nonatomic,copy,readonly) NSString * organizerName; 
@property (nonatomic,copy,readonly) NSURL * organizerURL; 
@property (nonatomic,copy,readonly) NSString * organizerEmail; 
@property (nonatomic,readonly) char organizedByMe; 
@property (nonatomic,copy,readonly) NSString * scheduleAgentString; 
@property (nonatomic,copy,readonly) NSTimeZone * timeZoneObject; 
@property (nonatomic,copy,readonly) NSDate * startDateUnadjustedFromUTC; 
@property (nonatomic,readonly) char defaultAlarmWasDeleted; 
@property (nonatomic,copy) NSNumber * priorityNumber; 
+(id)itemWithOccurrence:(id)arg1 createPartialBackingObject:(char)arg2 eventStore:(id)arg3 preFrozenRelationshipObjects:(id)arg4 ;
+(Class)_classForOccurrence:(id)arg1 ;
+(id)itemWithOccurrence:(id)arg1 createPartialBackingObject:(char)arg2 eventStore:(id)arg3 ;
+(long long)_scheduleAgentFromScheduleAgentString:(id)arg1 ;
+(Class)frozenClass;
+(id)_scheduleAgentStringFromScheduleAgent:(long long)arg1 ;
+(id)recurrenceIdentifierWithRecurrenceDate:(id)arg1 localUID:(id)arg2 ;
+(char)isValidDateComponents:(id)arg1 ;
+(id)localUIDWithRecurrenceDateForOccurrence:(id)arg1 ;
+(char)canonicalizedEqualityTestValue1:(id)arg1 value2:(id)arg2 key:(id)arg3 object1:(id)arg4 object2:(id)arg5 ;
+(id)itemWithIdentifier:(id)arg1 inStore:(id)arg2 ;
+(id)itemWithOccurrence:(id)arg1 eventStore:(id)arg2 ;
+(id)itemWithOccurrence:(id)arg1 eventStore:(id)arg2 preFrozenRelationshipObjects:(id)arg3 ;
+(unsigned long long)hashForObject:(id)arg1 ;
+(char)splitIdentifier:(id)arg1 intoLocalUID:(id*)arg2 recurrenceDate:(id*)arg3 ;
+(id)knownRequireRSVPKeys;
+(id)knownPerUserPropertyKeys;
+(id)knownIdentityKeys;
+(id)knownImmutableKeys;
+(id)knownRelationshipSingleValueKeys;
+(id)knownRelationshipMultiValueKeys;
+(id)knownSingleValueKeys;
+(id)keysToCheckForChangedKeysMethod;
+(char)isAllDayDateComponents:(id)arg1 ;
+(id)calculateDateComponentsFromDate:(id)arg1 usingTimeZone:(id)arg2 isAllDay:(char)arg3 ;
+(id)calculateDateFromDateComponents:(id)arg1 usingTimeZone:(id)arg2 ;
+(id)exportToICS:(id)arg1 ;
+(id)existingItemFromTruthFile:(id)arg1 inStore:(id)arg2 ;
+(const char*)_dateFormat;
+(id)uniqueIdentifierForObject:(id)arg1 ;
-(NSString *)calendarItemIdentifier;
-(NSString *)UUID;
-(void)setStartDate:(NSDate *)arg1 ;
-(id)duplicate;
-(char)commit:(id*)arg1 ;
-(NSDate *)startDate;
-(NSDate *)lastModifiedDate;
-(char)isScheduled;
-(id)initWithObject:(id)arg1 createPartialBackingObject:(char)arg2 keepBackingObject:(char)arg3 preFrozenRelationshipObjects:(id)arg4 ;
-(id)meltedAndCachedSingleRelationObjectForKey:(id)arg1 ;
-(char)isCalendarOwnerInvitedAttendee;
-(char)_currentUserMayActAsOrganizerForCalendar:(id)arg1 ;
-(char)_isOrganizedBySomeoneElseForCalendar:(id)arg1 ;
-(char)_isCalendarOwnerInvitedAttendeeForCalendar:(id)arg1 ;
-(char)_isCurrentUserInvitedAttendeeForCalendar:(id)arg1 ;
-(char)_isOrganizedByCurrentUserForCalendar:(id)arg1 ;
-(char)_isOrganizedBySharedCalendarOwnerForCalendar:(id)arg1 ;
-(id)_cachedMeltedParticipantForMeInAttendeeSet;
-(id)_cachedMeltedParticipantForMe;
-(void)_setCachedMeltedParticipantForMe:(id)arg1 ;
-(id<EKProtocolOccurrence>)backingOccurrence;
-(void)_wrapWithDefaultAlarmsUpdate:(/*^block*/id)arg1 ;
-(void)setAttendeeSet:(id)arg1 ;
-(void)_removeDefaultAlarms;
-(void)_addDefaultAlarms;
-(char)_validateDeletable:(id*)arg1 ;
-(long long)calendarItemPermission;
-(void)_setCachedMeltedParticipantForMeInAttendeeSet:(id)arg1 ;
-(char)canMoveFromCalendar:(id)arg1 toCalendar:(id)arg2 error:(id*)arg3 ;
-(char)canMoveOrCopyFromCalendar:(id)arg1 toCalendar:(id)arg2 error:(id*)arg3 ;
-(void)setAlarmSet:(id)arg1 ;
-(void)setAttachmentSet:(id)arg1 ;
-(void)setOrganizedByMe:(char)arg1 ;
-(void)_decodeValueForKey:(id)arg1 withCoder:(id)arg2 ;
-(id)datePreservingDateComponentsForDate:(id)arg1 inCurrentTimeZone:(id)arg2 movingToTimeZone:(id)arg3 ;
-(id)adjustDateFromUTC:(id)arg1 ;
-(id)adjustDateIntoUTC:(id)arg1 ;
-(void)_canonicalizeRecurrenceRules;
-(void)clearCachedTimeValues;
-(void)changeIdentifiers;
-(char)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)arg1 forDate:(id)arg2 ;
-(id)_nsCalendar;
-(void)_resetMeltedCache;
-(id)ruleStringForRecurrenceRule:(id)arg1 ;
-(char)validate:(id*)arg1 ;
-(char)_validateAccessConsent:(id*)arg1 ;
-(char)_validateHasCalendar:(id*)arg1 ;
-(char)_validateEntityTypeIsSupported:(id*)arg1 ;
-(char)_validateMoveToCalendar:(id*)arg1 ;
-(char)_validateEditable:(id*)arg1 ;
-(char)_validateAttendees:(id*)arg1 ;
-(char)_validateAttachments:(id*)arg1 ;
-(char)_validatePriority:(id*)arg1 ;
-(char)_validateAlarms:(id*)arg1 ;
-(char)_validateRecurrence:(id*)arg1 ;
-(char)_attachment:(id)arg1 isDuplicateOfAttachmentInSet:(id)arg2 ;
-(void)_assignAttachment:(id)arg1 toEquivalenceClassInSet:(id)arg2 ;
-(id)_getEquivalenceClassesOfAttachments;
-(id)_getRepresentativesFromEquivalenceClasses:(id)arg1 ;
-(id)_previousCalendar;
-(void)_handleDuplicateAttachments;
-(char)_validateSchedulingAllowed:(id*)arg1 ;
-(char)_validateDefaultOrganizerExists:(id*)arg1 ;
-(char)_needsAttendeePartStatReset;
-(EKAttendee *)attendeeRepresentingOrganizer;
-(char)isOrganizedBySomeoneElse;
-(char)_hasCalendarChange;
-(char)_validateDeletableInCalendarWithError:(id*)arg1 ;
-(char)_validateDeletableBySharedCalendarShareeWithError:(id*)arg1 ;
-(void)setRecurrenceDateUnadjustedFromUTC:(NSDate *)arg1 ;
-(EKAttendee *)selfAttendee;
-(char)isCurrentUserInvitedAttendee;
-(char)isOrganizedBySharedCalendarOwner;
-(void)setParticipantForMe:(id<EKProtocolParticipant>)arg1 ;
-(void)markDefaultAlarmsDeleted;
-(char)_hasAbsoluteAlarms;
-(char)canMoveOrCopyToCalendar:(id)arg1 error:(id*)arg2 ;
-(void)_applyKnownImmutableValuesFrom:(id)arg1 ;
-(NSString *)calendarItemExternalIdentifier;
-(NSURL *)externalURI;
-(id)nonNoneAlarms;
-(char)hasNotes;
-(id)_keysToChangeForDuplicateWithOptions:(long long)arg1 ;
-(char)futureOccurrencesCannotBeAffectedByChangingStartDateToDate:(id)arg1 ;
-(char)hasEquivalentRecurrenceRuleToItem:(id)arg1 ;
-(id)adjustRangeIntoUTC:(id)arg1 ;
-(void)_updateDatesForRecurrenceDate:(id)arg1 ;
-(void)_clearRecurrenceDate;
-(char)resetWithLatestInBackingStore:(id)arg1 ;
-(void)updateManagedObjectID;
-(void)_removeAllAlarms;
-(char)allowsAttendeesModifications;
-(char)canMoveToCalendar:(id)arg1 error:(id*)arg2 ;
-(char)hasComplexRecurrence;
-(id)singleRecurrenceRule;
-(EKAttendee *)attendeeForMe;
-(long long)currentUserGeneralizedParticipantRole;
-(char)allowsAttachmentModifications;
-(id)roomAttendees;
-(id)roomAttendeeForLocationString:(id)arg1 ;
-(id)suggestedStartDateForCurrentRecurrenceRule;
-(char)hasRecurrenceRules;
-(char)isOrganizedByCurrentUser;
-(char)currentUserMayActAsOrganizer;
-(id)defaultAlarms;
-(char)organizerIsRepresentedByAttendee:(id)arg1 ;
-(void)setRecurrenceRules:(NSArray *)arg1 ;
-(char)allowsResponseCommentModifications;
-(NSURL *)URL;
-(void)setAction:(NSURL *)arg1 ;
-(NSURL *)action;
-(void)setTitle:(NSString *)arg1 ;
-(NSString *)title;
-(void)setPriority:(unsigned long long)arg1 ;
-(char)isEditable;
-(unsigned long long)priority;
-(EKCalendar *)calendar;
-(void)setCalendar:(EKCalendar *)arg1 ;
-(NSTimeZone *)timeZone;
-(void)setTimeZone:(NSTimeZone *)arg1 ;
-(void)setURL:(NSURL *)arg1 ;
-(NSArray *)attachments;
-(NSString *)location;
-(NSDate *)creationDate;
-(void)setLocation:(NSString *)arg1 ;
-(id<EKProtocolCalendar>)container;
-(void)setContainer:(id<EKProtocolCalendar>)arg1 ;
-(void)setAttachments:(NSArray *)arg1 ;
-(NSString *)localUID;
-(unsigned long long)entityType;
-(NSArray *)alarms;
-(NSDate *)startDateUnadjustedFromUTC;
-(NSDate *)recurrenceDateUnadjustedFromUTC;
-(char)organizedByMe;
-(id<EKProtocolParticipant>)participantForMe;
-(NSURL *)organizerURL;
-(NSString *)organizerEmail;
-(NSString *)scheduleAgentString;
-(id)attendeeSet;
-(char)isDeleted;
-(NSString *)sharedUID;
-(NSArray *)recurrenceRules;
-(void)setSingleRecurrenceRule:(id)arg1 ;
-(void)addRecurrenceRule:(id)arg1 ;
-(void)removeRecurrenceRule:(id)arg1 ;
-(void)setLocalUID:(NSString *)arg1 ;
-(id)organizer;
-(NSString *)organizerName;
-(NSArray *)attendees;
-(void)setOrganizer:(id)arg1 ;
-(void)addAttendee:(id)arg1 ;
-(void)removeAttendee:(id)arg1 ;
-(void)setAttendees:(NSArray *)arg1 ;
-(void)setOrganizerEmail:(NSString *)arg1 ;
-(char)hasAlarms;
-(void)addAlarm:(id)arg1 ;
-(char)hasAttendees;
-(void)setSharedUID:(NSString *)arg1 ;
-(char)isAllDay;
-(NSTimeZone *)timeZoneObject;
-(void)setOrganizerName:(NSString *)arg1 ;
-(void)addAttachment:(id)arg1 ;
-(void)removeAttachment:(id)arg1 ;
-(void)removeAlarm:(id)arg1 ;
-(void)removeAllAttachments;
-(void)setScheduleAgent:(long long)arg1 ;
-(long long)scheduleAgent;
-(NSString *)notes;
-(void)setAlarms:(NSArray *)arg1 ;
-(void)setNotes:(NSString *)arg1 ;
-(char)hasAttachment;
-(char)isEvent;
-(NSNumber *)priorityNumber;
-(id)alarmSet;
-(id)attachmentSet;
-(char)allDay;
-(char)isReminder;
-(NSNumber *)calendarItemPermissionNumber;
-(NSString *)recurrenceRuleString;
-(char)cachedHasAttendee;
-(char)cachedHasAttachment;
-(char)cachedHasAlarm;
-(char)cachedIsCalendarOwnerInvitedAttendee;
-(char)cachedIsCurrentUserInvitedAttendee;
-(char)defaultAlarmWasDeleted;
-(void)setPriorityNumber:(NSNumber *)arg1 ;
-(void)setScheduleAgentString:(NSString *)arg1 ;
-(void)setRecurrenceRuleString:(NSString *)arg1 ;
-(void)setLastModifiedDate:(NSDate *)arg1 ;
-(void)setStartDateUnadjustedFromUTC:(NSDate *)arg1 ;
-(void)setAllDay:(char)arg1 ;
-(void)setTimeZoneObject:(NSTimeZone *)arg1 ;
-(void)setOrganizerURL:(NSURL *)arg1 ;
-(void)setDefaultAlarmWasDeleted:(char)arg1 ;
-(char)isDeletable;
@end

