/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 9:56:57 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/AVCore.framework/Versions/A/AVCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <VideoConference/VideoConferenceMultiController.h>
#import <AVCore/IMSystemMonitorListener.h>

@class VCCamera, VCMicrophone, VCSpeaker, NSString;

@interface FZVideoConferenceController : VideoConferenceMultiController <IMSystemMonitorListener> {

	int _initStatus;
	char _everOpenedCamera;
	char _openCameraRequired;
	char _recacheSelectedCamera;
	VCCamera* _cachedSelectedCamera;
	int _localVideoClientCount;
	int _localAudioClientCount;
	int _audioReflectorClientCount;
	char _restartPreviewAtWake;
	char _openCameraAtWake;

}

@property (nonatomic,readonly) char isVCCReady; 
@property (nonatomic,readonly) char currentCameraIsQ8; 
@property (nonatomic,readonly) char currentCameraIsWidescreen; 
@property (nonatomic,readonly) char getCameraIrisState; 
@property (nonatomic,readonly) char getMicrophoneIrisState; 
@property (nonatomic,readonly) char haveBluetooth; 
@property (nonatomic,readonly) char haveBluetoothHeadset; 
@property (nonatomic,readonly) VCMicrophone * bluetoothHeadsetMic; 
@property (nonatomic,readonly) VCSpeaker * bluetoothHeadsetSpeaker; 
@property (nonatomic,readonly) char usingBluetoothHeadset; 
@property (nonatomic,readonly) NSString * soundOutputdeviceNamePref; 
+(id)newcameraList;
+(void)initialize;
+(id)sharedInstance;
+(void)systemWillSleep;
+(void)systemDidWake;
+(void)_clearCachedMicrophoneList;
+(id)cachedMicrophoneList;
+(void)_enableSoftwareCamera;
+(void)_enableSoftwareMicrophone;
+(void)_disableSoftwareCamera:(id)arg1 ;
+(void)_disableSoftwareMicrophone:(id)arg1 ;
+(char)_updateSoftwareInputForCameras:(id)arg1 mics:(id)arg2 ;
+(void)vcHardwareChanged:(id)arg1 duringLaunch:(char)arg2 ;
+(void)vcHardwareChangedBroadcastChanges:(id)arg1 ;
+(void)vcMicrophoneChanged:(id)arg1 ;
+(void)setAuxVideoController:(id)arg1 ;
+(void)setVideoProcessor:(id)arg1 ;
+(char)hasBeenInitialized;
+(void)broadcastVCCapabilites;
-(float)brightness;
-(float)focus;
-(id)selectedMicrophone;
-(char)selectMicrophone:(id)arg1 ;
-(int)cancelPreview;
-(char)openCamera;
-(char)closeCamera;
-(id)selectedCamera;
-(char)selectSoundOutputDevice:(id)arg1 ;
-(char)setContrast:(float)arg1 ;
-(float)contrast;
-(char)setFocus:(float)arg1 ;
-(char)setSharpness:(float)arg1 ;
-(float)sharpness;
-(int)lightingProfile;
-(void)shutdownAV;
-(char)startReflector;
-(char)stopReflector;
-(unsigned long long)vcCapabilities;
-(id)init;
-(oneway void)release;
-(void)setDelegate:(id)arg1 ;
-(void)dealloc;
-(char)setColor:(float)arg1 ;
-(float)color;
-(char)setBrightness:(float)arg1 ;
-(void)systemWillSleep;
-(void)systemDidWake;
-(void)_initVCCDidFinishNotification:(id)arg1 ;
-(void)_initVCCOnThread:(id)arg1 ;
-(void)_doInitVCCDidFinish;
-(void)_hardwareCapsNotification:(id)arg1 ;
-(void)_selectCamera;
-(void)_postPrefsChangedNotification:(id)arg1 ;
-(char)setPreferredMic;
-(void)_selectSoundOutputDevice;
-(id)preferredMic:(id)arg1 ;
-(void)cameraAvailable:(char*)arg1 MicrophoneAvailable:(char*)arg2 ;
-(void)_removedClient;
-(id)_defaultMicrophoneFromList:(id)arg1 ;
-(id)_UIDFromMicrophone:(id)arg1 ;
-(NSString *)soundOutputdeviceNamePref;
-(VCMicrophone *)bluetoothHeadsetMic;
-(VCSpeaker *)bluetoothHeadsetSpeaker;
-(void)setCameraSettingsFromDefaults;
-(void)__MessagesCloseCamera;
-(void)__MessagesCancelPreview;
-(char)currentCameraIsQ8;
-(void)forceCameraRecache;
-(char)getCameraIrisState;
-(char)pauseVideoIfIrisClosed;
-(char)selectVCCamera:(id)arg1 andUpdatePref:(char)arg2 ;
-(id)_defaultCameraFromList:(id)arg1 ;
-(id)realCameraInList:(id)arg1 ;
-(unsigned long long)basicVCCapabilitiesCanAudio:(char*)arg1 canVideo:(char*)arg2 ;
-(char)selectVCCamera:(id)arg1 ;
-(char)isVCCReady;
-(void)initVCC;
-(char)addLocalVideoClient;
-(char)removeLocalVideoClient;
-(void)addLocalAudioClient;
-(void)removeLocalAudioClient;
-(void)restartPreviewIfNecessary;
-(void)setWidescreenEnabled:(char)arg1 ;
-(void)setSystemMute:(char)arg1 ;
-(char)haveBluetooth;
-(char)haveBluetoothHeadset;
-(char)usingBluetoothHeadset;
-(char)setUsingBluetoothHeadset:(char)arg1 ;
-(char)currentCameraIsWidescreen;
-(char)getMicrophoneIrisState;
@end

