/*
* This header is generated by classdump-dyld 0.7
* on Saturday, February 14, 2015 at 11:50:58 PM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/WhitePages.framework/Versions/A/WhitePages
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <WhitePages/WhitePages-Structs.h>
@class NSString, NSMutableDictionary, NSMutableSet;

@interface QuickLiteDatabase : NSObject {

	sqlite3Ref QL_sqliteDatabase;
	NSString* QL_sqliteDatabasePath;
	int QL_cacheMethod;
	NSMutableDictionary* QL_schema;
	long long QL_lastErrorID;
	NSString* QL_lastError;
	unsigned long long QL_processID;
	NSMutableSet* QL_modifiedCursors;
	char QL_notifySQLStatement;
	char QL_isInDebugMode;
	char QL_saveChangesWhenClosing;
	char QL_willCommitChangeSchema;

}
+(id)UUIDString;
+(id)sharedQuickLiteDatatypes;
+(id)encodeDataToBase64:(id)arg1 ;
+(id)prepareStringForQuery:(id)arg1 ;
+(id)escapeQuotesFromString:(id)arg1 ;
+(id)sharedROWIDKeywords;
+(void)QLP_decodeQuantum:(char*)arg1 andSource:(const char*)arg2 ;
+(id)databaseWithFile:(id)arg1 ;
+(id)decodeDataFromBase64:(id)arg1 ;
-(id)tables;
-(id)descriptionForValue:(id)arg1 ;
-(void)setDatabasePath:(id)arg1 ;
-(char)commitTransaction;
-(char)rollbackTransaction;
-(id)sqliteVersion;
-(void)revert;
-(char)hasUnsavedChanges;
-(char)beginTransaction;
-(char)isTransactionActive;
-(char)beginDeferredTransaction;
-(char)QLP_beginTransactionMode:(id)arg1 ;
-(void)QLP_logIfInDebugMode:(SEL)arg1 forClass:(Class)arg2 ;
-(void)QLP_uninstallCommitCallback;
-(char)QLP_performExecuteQuery:(id)arg1 ;
-(void)QLP_installCommitCallback;
-(char)QLP_createTable:(id)arg1 withColumns:(id)arg2 andDatatypes:(id)arg3 isTemporary:(char)arg4 ;
-(id)datatypesForTable:(id)arg1 ;
-(long long)lastErrorID;
-(void)QLP_setLastError:(const char*)arg1 withID:(long long)arg2 ;
-(void)QLP_rebuildDatatypeCache;
-(id)columnsForTable:(id)arg1 ;
-(id)temporaryTables;
-(void)QLP_sqlString:(id)arg1 appendingTags:(id)arg2 ;
-(char)dropTable:(id)arg1 ;
-(char)QLP_removeColumn:(id)arg1 fromTable:(id)arg2 ;
-(id)performQuery:(id)arg1 useMiniCursor:(char)arg2 cacheMethod:(int)arg3 treatValuesAsString:(char)arg4 ;
-(int)QLP_datatypeForTable:(id)arg1 column:(id)arg2 ;
-(char)QLP_isColumnROWIDAlias:(id)arg1 forTable:(id)arg2 ;
-(id)QLP_suffixWithDotDelimiter:(id)arg1 ;
-(char)deleteRowWithUID:(id)arg1 inTable:(id)arg2 ;
-(void)QLP_sendSQLStatement:(id)arg1 ;
-(void)setBusyTimeout:(unsigned long long)arg1 ;
-(void)QLP_logIfInDebugMode:(id)arg1 ;
-(long long)QLP_ROWIDPresenceLocation:(id)arg1 andDatatypes:(id)arg2 ;
-(char)QLP_sqlString:(id)arg1 forTable:(id)arg2 withColumns:(id)arg3 andDatatypes:(id)arg4 ;
-(char)QLP_insertStringValues:(id)arg1 forColumns:(id)arg2 inTable:(id)arg3 ;
-(id)QLP_flattenAllTables;
-(void)QLP_sqlString:(id)arg1 appendingTags:(id)arg2 quoteTags:(char)arg3 ;
-(id)databasePath;
-(void)QLP_QuickLiteDatabaseDidChangeNotification;
-(char)createTable:(id)arg1 withColumns:(id)arg2 andDatatypes:(id)arg3 ;
-(char)createTemporaryTable:(id)arg1 withColumns:(id)arg2 andDatatypes:(id)arg3 ;
-(char)copyTable:(id)arg1 toTable:(id)arg2 ;
-(char)addColumn:(id)arg1 withDataType:(id)arg2 toTable:(id)arg3 ;
-(char)removeColumn:(id)arg1 fromTable:(id)arg2 ;
-(id)tableInfo:(id)arg1 ;
-(char)insertValues:(id)arg1 forColumns:(id)arg2 inTable:(id)arg3 ;
-(char)updateValues:(id)arg1 forColumns:(id)arg2 withRowUID:(id)arg3 inTable:(id)arg4 ;
-(char)deleteRowsWithUIDObjects:(id)arg1 inTable:(id)arg2 ;
-(char)deleteRowsWithValue:(id)arg1 forColumn:(id)arg2 inTable:(id)arg3 ;
-(char)deleteAllRowsInTable:(id)arg1 ;
-(unsigned long long)rowCountInTable:(id)arg1 ;
-(char)createIndexForColumn:(id)arg1 inTable:(id)arg2 isUnique:(char)arg3 ;
-(void)dropIndex:(id)arg1 ;
-(id)QLP_prefixWithDotDelimiter:(id)arg1 ;
-(void)QLP_registerModifiedCursor:(id)arg1 ;
-(int)QLP_datatypeForColumn:(id)arg1 ;
-(int)cacheMethod;
-(void)QLP_deregisterModifiedCursor:(id)arg1 ;
-(void)setSendsSQLStatement:(char)arg1 ;
-(void)setIsInDebugMode:(char)arg1 ;
-(char)savesChangesWhenClosingDatabase;
-(char)QLP_closeSavingChanges:(char)arg1 ;
-(char)open:(char)arg1 cacheMethod:(int)arg2 exposeSQLOnNotify:(char)arg3 debugMode:(char)arg4 readDatafile:(char)arg5 ;
-(void)readDatafile:(id)arg1 ;
-(void)_communicateDatabaseHasChanged:(id)arg1 ;
-(void)_communicateCompactingDoneChanged:(id)arg1 ;
-(void)setSavesChangesWhenClosingDatabase:(char)arg1 ;
-(char)closeSavingChanges:(char)arg1 ;
-(char)isDatabaseOpen;
-(int)QLP_isImportFileAvailable:(id)arg1 ;
-(char)sendsSQLStatement;
-(id)QLP_performQuery:(id)arg1 useMiniCursor:(char)arg2 cacheMethod:(int)arg3 treatValuesAsString:(char)arg4 saveSQLStatement:(char)arg5 ;
-(void)QLP_setFullColumnNamesEnabled;
-(char)QLP_performExecuteQuery:(id)arg1 saveSQLStatement:(char)arg2 ;
-(void)QLP_checkIfSQLQueryWillChangeSchema:(id)arg1 ;
-(void)QLP_executeSingleSQLStatement:(id)arg1 ;
-(char)isInDebugMode;
-(id)allTables;
-(char)open:(char)arg1 cacheMethod:(int)arg2 ;
-(void)setCacheMethod:(int)arg1 ;
-(int)importFromFile:(id)arg1 encoding:(unsigned long long)arg2 columnDelimiter:(id)arg3 endOfRecord:(id)arg4 table:(id)arg5 dropTableIfItExistsAndRecreate:(char)arg6 clearTableContentsBeforeImporting:(char)arg7 ;
-(char)integrityCheck;
-(id)quickLiteVersion;
-(id)databaseEncoding;
-(id)performQuery:(id)arg1 ;
-(id)performQuery:(id)arg1 cacheMethod:(int)arg2 ;
-(id)performQuery:(id)arg1 treatValuesAsString:(char)arg2 ;
-(id)performQuery:(id)arg1 cacheMethod:(int)arg2 treatValuesAsString:(char)arg3 ;
-(id)performQuery:(id)arg1 useMiniCursor:(char)arg2 ;
-(id)performQuery:(id)arg1 useMiniCursor:(char)arg2 treatValuesAsString:(char)arg3 ;
-(id)allIndexes;
-(id)indexedColumnsForTable:(id)arg1 ;
-(id)lastRowInserted;
-(unsigned long long)maxRowUIDForTable:(id)arg1 ;
-(unsigned long long)sessionCacheSize;
-(void)setSessionCacheSize:(unsigned long long)arg1 ;
-(int)tempStoreMode;
-(void)setTempStoreMode:(int)arg1 ;
-(id)QLP_schema;
-(id)QLP_performInternalQuickLiteQuery:(id)arg1 useMiniCursor:(char)arg2 cacheMethod:(int)arg3 treatValuesAsString:(char)arg4 ;
-(long long)_prepareSQLite3Statement:(sqlite3_stmt*)arg1 sqlQuery:(id)arg2 ;
-(id)init;
-(void)dealloc;
-(char)compact;
-(char)close;
-(char)open:(char)arg1 ;
-(char)open;
-(id)lastError;
-(char)save;
-(id)initWithFile:(id)arg1 ;
-(int)synchronousMode;
-(void)setSynchronousMode:(int)arg1 ;
-(sqlite3Ref)sqliteDatabase;
-(char)beginImmediateTransaction;
-(char)beginExclusiveTransaction;
@end

