/*
* This header is generated by classdump-dyld 0.7
* on Saturday, February 14, 2015 at 11:50:34 PM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CFNetwork/CFNetwork-Structs.h>
#import <CFNetwork/NSURLSession.h>
#import <CFNetwork/NSURLSessionSubclass.h>

@class NSMutableDictionary, NSArray, NSString;

@interface __NSURLSessionLocal : NSURLSession <NSURLSessionSubclass> {

	unsigned long long _identSeed;
	XTubeManager* _tubeManager;
	NSMutableDictionary* _tasks;
	dispatch_queue_sRef _invalidateQueue;
	/*^block*/id _invalidateCallback;
	const XURLCache* _xCache;
	long long _xCacheOnce;
	const XCookieStorage* _xCookies;
	long long _xCookiesOnce;
	const XCredentialStorage* _xCreds;
	long long _xCredsOnce;
	NSArray* _localProtocolClassesForDefaultSession;
	char _isInvalid;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(Class)_protocolClassForRequest:(id)arg1 ;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)_onqueue_connectUploadTask:(id)arg1 strippedRequest:(id)arg2 bodyStream:(id)arg3 bodyParts:(id)arg4 ;
-(unsigned long long)nextSeed;
-(void)_onqueue_invokeInvalidateCallback;
-(void)_onqueue_checkForCompletion;
-(id)copyTasks;
-(const XCookieStorage*)_createXCookieStorage;
-(const XCredentialStorage*)_createXCredentialStorage;
-(const XURLCache*)_createXURLCache;
-(id)initWithConfiguration:(id)arg1 delegate:(id)arg2 delegateQueue:(id)arg3 ;
-(id)taskForClass:(Class)arg1 request:(id)arg2 uploadFile:(id)arg3 bodyData:(id)arg4 completion:(/*^block*/id)arg5 ;
-(void)_flushOrResetStorage:(/*^block*/id)arg1 reset:(unsigned char)arg2 ;
-(void)_onqueue_invalidateSession:(char)arg1 withQueue:(dispatch_queue_sRef)arg2 completion:(/*^block*/id)arg3 ;
-(const XURLCache*)_createXURLCache0;
-(const XCookieStorage*)_createXCookieStorage0;
-(const XCredentialStorage*)_createXCredentialStorage0;
-(XTubeManager*)_actualTubeManager;
-(id)_protocolClasses;
-(Class)_protocolClassForTask:(id)arg1 ;
-(BOOL)_request:(id)arg1 isCacheEquivalentTo:(id)arg2 ;
-(URLProtocol*)_newURLProtocolForTask:(id)arg1 client:(URLProtocolClient*)arg2 protocolClass:(Class)arg3 ;
-(id)dataTaskForRequest:(id)arg1 completion:(/*^block*/id)arg2 ;
-(id)uploadTaskForRequest:(id)arg1 uploadFile:(id)arg2 bodyData:(id)arg3 completion:(/*^block*/id)arg4 ;
-(id)downloadTaskForRequest:(id)arg1 downloadFilePath:(id)arg2 resumeData:(id)arg3 completion:(/*^block*/id)arg4 ;
-(id)_streamTaskForHost:(id)arg1 port:(long long)arg2 tls:(BOOL)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)_onqueue_flushWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)_onqueue_completeInvalidation:(char)arg1 ;
-(void)_onqueue_resetStorageWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)_onqueue_getTasksWithCompletionHandler:(/*^block*/id)arg1 ;
-(id)connToTask:(id)arg1 ;
-(void)replaceTask:(id)arg1 withTask:(id)arg2 ;
-(void)task:(id)arg1 terminatedConnection:(id)arg2 ;
-(CFHSTSPolicyRef)_copyHSTSPolicy;
-(void)_invalidateAllConnections;
-(void)_purgeIdleConnections;
-(void)invalidateUnpurgeableConnectionsForConnectionCacheKey:(HTTPConnectionCacheKey*)arg1 ;
-(id)_createTaskFromOriginalCFURLRequest:(CFURLRequestRef)arg1 updatedCFURLRequest:(CFURLRequestRef)arg2 connProps:(CFDictionaryRef)arg3 sockProps:(CFDictionaryRef)arg4 ;
-(const XCookieStorage*)copyBaseStorageForRequest:(CFURLRequestRef)arg1 ;
-(void)_getCookieHeadersForTask:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(CFStringRef)_withConnectionCache_getCurrentSSLMethodForKey:(const HTTPConnectionCacheKey*)arg1 scheduling:(const CoreSchedulingSet*)arg2 ;
-(void)_withConnectionCache_setCurrentSSLMethod:(CFStringRef)arg1 forKey:(const HTTPConnectionCacheKey*)arg2 scheduling:(const CoreSchedulingSet*)arg3 ;
-(BOOL)_withConnectionCache_enqueueRequest:(const HTTPRequestMessage*)arg1 forProtocol:(MetaConnectionCacheClient*)arg2 scheduling:(const CoreSchedulingSet*)arg3 options:(MetaConnectionOptions)arg4 ;
-(Tube*)_withConnectionCache_getPendingTubeForProtocol:(MetaConnectionCacheClient*)arg1 withKey:(const HTTPConnectionCacheKey*)arg2 scheduling:(const CoreSchedulingSet*)arg3 ;
-(id)_createCanonicalRequest:(id)arg1 ;
-(id)_createCanonicalRequestForTask:(id)arg1 ;
-(BOOL)_cfurlRequest:(CFURLRequestRef)arg1 isCacheEquivalentTo:(CFURLRequestRef)arg2 ;
-(URLProtocol*)_newURLProtocolForTask:(id)arg1 client:(URLProtocolClient*)arg2 ;
-(BOOL)_prependProtocolClassForDefaultSession:(Class)arg1 ;
-(void)_removeProtocolClassForDefaultSession:(Class)arg1 ;
@end

