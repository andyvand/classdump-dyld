/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 12:00:38 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <IOBluetooth/IOBluetooth-Structs.h>
#import <IOBluetooth/IOBluetoothObject.h>
#import <IOBluetooth/NSPortDelegate.h>

@class IOBluetoothDevice, IOBluetoothL2CAPChannel, NSPort, NSString;

@interface IOBluetoothRFCOMMChannel : IOBluetoothObject <NSPortDelegate> {

	char mChannelIsOpen;
	unsigned short mMTU;
	char mIsIncoming;
	IOBluetoothDevice* mDevice;
	IOBluetoothL2CAPChannel* mL2Channel;
	NSPort* mDataAvailablePort;
	IODataQueueMemory* mIncomingDataQueue;
	id delegate;
	id mIncomingDataListener;
	void* mIncomingDataListenerRefCon;
	id mEventDataListener;
	void* mEventDataListenerRefCon;
	unsigned long long mObjectID;
	unsigned char mChannelID;
	void* _mReserved;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)getUniqueObjectDictionary:(char)arg1 ;
+(id)getKeyForIOService:(unsigned)arg1 ;
+(id)registerForChannelOpenNotifications:(id)arg1 selector:(SEL)arg2 ;
+(id)withObjectID:(unsigned long long)arg1 ;
+(id)registerForChannelOpenNotifications:(id)arg1 selector:(SEL)arg2 withChannelID:(unsigned char)arg3 direction:(int)arg4 ;
+(id)withRFCOMMChannelRef:(OpaqueIOBluetoothObjectRefRef)arg1 ;
-(id)initWithIOService:(unsigned)arg1 ;
-(char)waitforChanneOpen;
-(unsigned char)getChannelID;
-(id)getDevice;
-(char)channelStateIsClosed;
-(void)setChannelID:(unsigned char)arg1 ;
-(void)connectionComplete:(id)arg1 status:(int)arg2 ;
-(int)instantiateOnDevice:(id)arg1 ;
-(id)getKey;
-(int)closeKernelConnection;
-(void)updateFromNewIOService:(unsigned)arg1 ;
-(int)createQueue;
-(char)channelStateIsOpen;
-(int)destroyQueue;
-(void)processIncomingData:(IOBluetoothUserMessageBlock*)arg1 ;
-(unsigned long long)getObjectID;
-(int)closeChannel;
-(int)writeAsync:(void*)arg1 length:(unsigned short)arg2 refcon:(void*)arg3 ;
-(int)writeSync:(void*)arg1 length:(unsigned short)arg2 ;
-(id)registerForChannelCloseNotification:(id)arg1 selector:(SEL)arg2 ;
-(int)updateReleationships:(unsigned)arg1 ;
-(char)ioServiceTerminated:(unsigned)arg1 ;
-(unsigned short)getMTU;
-(int)write:(void*)arg1 length:(unsigned short)arg2 sleep:(char)arg3 ;
-(OpaqueIOBluetoothObjectRefRef)getRFCOMMChannelRef;
-(char)isTransmissionPaused;
-(int)writeSimple:(void*)arg1 length:(unsigned short)arg2 sleep:(char)arg3 bytesSent:(unsigned*)arg4 ;
-(int)setSerialParameters:(unsigned)arg1 dataBits:(unsigned char)arg2 parity:(int)arg3 stopBits:(unsigned char)arg4 ;
-(int)sendRemoteLineStatus:(int)arg1 ;
-(void)setL2CAPChannel:(id)arg1 ;
-(int)channelState;
-(int)openChannel;
-(int)sendCommand:(unsigned char)arg1 ;
-(int)sendMSCOnBadChannel:(unsigned char)arg1 ;
-(int)pauseTransmission:(char)arg1 ;
-(int)sendTestByte:(unsigned char)arg1 ;
-(id)getL2CAPChannel;
-(char)isInitiatorLocal;
-(char)channelStateIsOpening;
-(char)channelStateIsClosing;
-(int)setProperties:(id)arg1 ;
-(char)isIncoming;
-(int)setDelegate:(id)arg1 ;
-(void)dealloc;
-(id)delegate;
-(char)isValid;
-(char)isOpen;
-(void)handleMachMessage:(void*)arg1 ;
-(void)setDevice:(id)arg1 ;
@end

