/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 12:00:14 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <AppKit/AppKit-Structs.h>
#import <AppKit/NSActionCell.h>

@interface NSSliderCell : NSActionCell {

	id _sliderCellPrivateData;
	double _previousValue;
	double _knobOffset;
	int _numberOfTickMarks;
	double _altIncValue;
	double _value;
	double _maxValue;
	double _minValue;
	CGRect _trackRect;
	struct {
		unsigned weAreVertical : 1;
		unsigned weAreVerticalSet : 1;
		unsigned reserved1 : 1;
		unsigned isPressed : 1;
		unsigned allowsTickMarkValuesOnly : 1;
		unsigned tickMarkPosition : 1;
		unsigned sliderType : 2;
		unsigned drawing : 1;
		unsigned snappedToTickMark : 1;
		unsigned snappedToPreviousValue : 1;
		unsigned snappedToDefaultValue : 1;
		unsigned snappingAllowed : 1;
		unsigned reserved2 : 19;
	}  _scFlags;

}

@property (assign) double minValue; 
@property (assign) double maxValue; 
@property (assign) double altIncrementValue; 
@property (assign) unsigned long long sliderType; 
@property (getter=isVertical,readonly) long long vertical; 
@property (readonly) CGRect trackRect; 
@property (readonly) double knobThickness; 
+(void)initialize;
+(char)prefersTrackingUntilMouseUp;
+(CFDictionaryRef)_coreUIDialCallbacksMap;
+(CFDictionaryRef)_coreUIDialKnobCallbacksMap;
+(CFDictionaryRef)_coreUILinearBarCallbacksMap;
+(CFDictionaryRef)_coreUILinearKnobCallbacksMap;
-(char)isPressed;
-(id)init;
-(void)dealloc;
-(int)intValue;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id)accessibilityHitTest:(CGPoint)arg1 ;
-(id)image;
-(void)setImage:(id)arg1 ;
-(id)accessibilityAttributeNames;
-(long long)integerValue;
-(id)accessibilityActionDescription:(id)arg1 ;
-(id)accessibilityHelpStringForChild:(id)arg1 ;
-(char)accessibilityIsChildFocusable:(id)arg1 ;
-(void)accessibilitySetFocus:(id)arg1 forChild:(id)arg2 ;
-(id)accessibilityPositionOfChild:(id)arg1 ;
-(id)accessibilitySizeOfChild:(id)arg1 ;
-(id)accessibilityRoleAttribute;
-(id)accessibilityActionNames;
-(void)accessibilityPerformAction:(id)arg1 ;
-(id)accessibilityChildrenAttribute;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)setTitle:(id)arg1 ;
-(void)setStringValue:(id)arg1 ;
-(id)stringValue;
-(id)title;
-(CGSize)cellSizeForBounds:(CGRect)arg1 ;
-(float)floatValue;
-(double)doubleValue;
-(char)accessibilityIsChildrenAttributeSettable;
-(long long)isVertical;
-(void)drawWithFrame:(CGRect)arg1 inView:(id)arg2 ;
-(char)isOpaque;
-(id)titleFont;
-(void)setTitleFont:(id)arg1 ;
-(id)titleCell;
-(unsigned long long)hitTestForEvent:(id)arg1 inRect:(CGRect)arg2 ofView:(id)arg3 ;
-(id)objectValue;
-(void)setObjectValue:(id)arg1 ;
-(void)drawInteriorWithFrame:(CGRect)arg1 inView:(id)arg2 ;
-(void)_drawLiveResizeHighlightWithFrame:(CGRect)arg1 inView:(id)arg2 ;
-(char)_needRedrawOnWindowChangedKeyState;
-(void)setDoubleValue:(double)arg1 ;
-(char)trackMouse:(id)arg1 inRect:(CGRect)arg2 ofView:(id)arg3 untilMouseUp:(char)arg4 ;
-(char)startTrackingAt:(CGPoint)arg1 inView:(id)arg2 ;
-(char)continueTracking:(CGPoint)arg1 at:(CGPoint)arg2 inView:(id)arg3 ;
-(void)setIntValue:(int)arg1 ;
-(void)setIntegerValue:(long long)arg1 ;
-(void)setFloatValue:(float)arg1 ;
-(char)_highlightsWithHighlightRect;
-(char)_allowsVibrancyForControlView:(id)arg1 ;
-(int)_vibrancyBlendModeForControlView:(id)arg1 ;
-(id)_vibrancyFilterForControlView:(id)arg1 ;
-(void)stopTracking:(CGPoint)arg1 at:(CGPoint)arg2 inView:(id)arg3 mouseIsUp:(char)arg4 ;
-(id)accessibilityValueAttribute;
-(char)accessibilityIsValueAttributeSettable;
-(char)_vetoMouseDragActionDispatch;
-(char)isContinuous;
-(void)setContinuous:(char)arg1 ;
-(void)accessibilitySetValueAttribute:(id)arg1 ;
-(double)maxValue;
-(double)minValue;
-(double)knobThickness;
-(void)setKnobThickness:(double)arg1 ;
-(void)setAltIncrementValue:(double)arg1 ;
-(void)setTitleColor:(id)arg1 ;
-(CGRect)rectOfTickMarkAtIndex:(long long)arg1 ;
-(long long)numberOfTickMarks;
-(CGRect)knobRectFlipped:(char)arg1 ;
-(unsigned long long)tickMarkPosition;
-(void)drawTickMarks;
-(void)drawBarInside:(CGRect)arg1 flipped:(char)arg2 ;
-(void)setMinValue:(double)arg1 ;
-(void)setMaxValue:(double)arg1 ;
-(id)accessibilityMinValueAttribute;
-(char)accessibilityIsMinValueAttributeSettable;
-(id)accessibilityMaxValueAttribute;
-(char)accessibilityIsMaxValueAttributeSettable;
-(void)setDefaultValue:(double)arg1 ;
-(double)defaultValue;
-(void)setTickMarkPosition:(unsigned long long)arg1 ;
-(void)setNumberOfTickMarks:(long long)arg1 ;
-(double)tickMarkValueAtIndex:(long long)arg1 ;
-(id)accessibilityOrientationAttribute;
-(char)accessibilityIsOrientationAttributeSettable;
-(id)accessibilityAllowedValuesAttribute;
-(char)accessibilityIsAllowedValuesAttributeSettable;
-(void)drawKnob;
-(unsigned long long)sliderType;
-(void)setSliderType:(unsigned long long)arg1 ;
-(double)altIncrementValue;
-(void)setTitleCell:(id)arg1 ;
-(id)titleColor;
-(void)_moveInDirection:(unsigned long long)arg1 ;
-(void)setAllowsTickMarkValuesOnly:(char)arg1 ;
-(char)allowsTickMarkValuesOnly;
-(long long)indexOfTickMarkAtPoint:(CGPoint)arg1 ;
-(double)closestTickMarkValueToValue:(double)arg1 ;
-(char)tickMarkIsProminentAtIndex:(long long)arg1 ;
-(void)setTickMarkIsProminent:(char)arg1 atIndex:(long long)arg2 ;
-(char)_isR2L;
-(CGRect)trackRect;
-(double)_knobTailOverhang;
-(double)_knobPointOverhang;
-(double)_preBarLength;
-(double)_postBarLength;
-(CGRect)barRectFlipped:(char)arg1 ;
-(CGRect)_oldGetBarBounds:(CGRect)arg1 ;
-(CGRect)_resetTrackRect:(CGRect)arg1 ;
-(char)_applicableShowsFocus;
-(char)_usesCustomTrackImage;
-(void)_drawCustomTrackWithTrackRect:(CGRect)arg1 inView:(id)arg2 ;
-(char)_shouldTryCoreUIDrawing;
-(CFDictionaryRef)_copyCoreUIDialDrawOptionsWithView:(id)arg1 ;
-(CFDictionaryRef)_copyCoreUILinearBarDrawOptionsWithView:(id)arg1 ;
-(void)drawKnob:(CGRect)arg1 ;
-(CFDictionaryRef)_copyCoreUILinearKnobDrawOptionsWithView:(id)arg1 ;
-(void)_drawTickMarks;
-(id)_tickMarkCUIOptions;
-(char)_calcTrackRect:(CGRect*)arg1 andAdjustRect:(char)arg2 ;
-(char)_hasSnappingBehavior;
-(char)_noteTracking:(CGPoint)arg1 at:(CGPoint)arg2 inView:(id)arg3 ;
-(void)invalidateRect:(CGRect)arg1 forControlView:(id)arg2 ;
-(long long)closestTickMarkIndexToValue:(double)arg1 ;
-(char)_barShowsValue;
-(CFBooleanRef)_coreUIIsFocused:(id)arg1 ;
-(CFStringRef)_coreUISize:(id)arg1 ;
-(CFStringRef)_coreUILinearOrientation:(id)arg1 ;
-(CFStringRef)_coreUIWidget:(id)arg1 ;
-(CGStyleRef)_coreUIFocusStyleWithView:(id)arg1 ;
-(CFBooleanRef)_coreUIIsFlippedWithView:(id)arg1 ;
-(CFBooleanRef)_coreUIKnobIndicatorOnly:(id)arg1 ;
-(CFBooleanRef)_coreUIBarNoIndicator:(id)arg1 ;
-(CFStringRef)_coreUILinearState:(id)arg1 ;
-(id)_coreUILinearValue:(id)arg1 ;
-(CFStringRef)_coreUILinearDirection:(id)arg1 ;
-(CFBooleanRef)_coreUILinearBarIsFocused:(id)arg1 ;
-(CGStyleRef)_coreUILinearBarFocusStyleWithView:(id)arg1 ;
-(CFBooleanRef)_coreUILinearBarFillsValue:(id)arg1 ;
-(CFStringRef)_coreUILayoutDirection:(id)arg1 ;
-(CFStringRef)_coreUILinearKnobWidget:(id)arg1 ;
-(CFStringRef)_coreUICircularState:(id)arg1 ;
-(id)_coreUICircularValue:(id)arg1 ;
-(CFDictionaryRef)_copyCoreUIDialKnobDrawOptionsWithView:(id)arg1 ;
-(char)_setKnobThickness:(double)arg1 usingInsetRect:(char)arg2 ;
-(id)accessibilityValueIndicatorAttribute;
-(CGRect)_accessibilityIndicatorRect;
-(char)accessibilityIsValueIndicatorAttributeSettable;
@end

