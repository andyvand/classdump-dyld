/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 12:00:39 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CoreFoundation/CoreFoundation-Structs.h>
#import <CoreFoundation/NSCopying.h>
#import <CoreFoundation/NSSecureCoding.h>
#import <CoreFoundation/CKRecordValue.h>

@class NSString;

@interface NSDate : NSObject <NSCopying, NSSecureCoding, CKRecordValue>

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) double timeIntervalSinceReferenceDate; 
+(id)formatForTimeRange;
+(id)formatForTimeZoneClarifiedDateString;
+(id)dateWithDatePartFromDate:(id)arg1 timePartFromDate:(id)arg2 inCalendar:(id)arg3 ;
+(id)dateWithUTCDateTime_FI:(const UTCDateTime*)arg1 ;
+(TMutex*)cachedRelativeDateLock_FI;
+(void)computeTodayYesterdayAndTomorrow_FI:(TCachedRelativeDates*)arg1 ;
+(void)recomputeCachedRelativeDates_FI;
+(TCachedRelativeDates*)cachedRelativeDates_FI;
+(id)today_FI;
+(id)tomorrow_FI;
+(id)yesterday_FI;
+(id)midnightJan1st1904_FI;
+(id)dateFormatter;
+(id)weekdayFormatter;
+(id)timeFormatter;
+(id)safari_dateOfMidnightNumberOfDaysAgo:(long long)arg1 ;
+(id)safari_dateWithFirefoxTime:(long long)arg1 ;
+(id)safari_dateWithChromeTime:(long long)arg1 ;
+(id)midnightsInCalendar:(id)arg1 fromStart:(id)arg2 toEnd:(id)arg3 ;
+(id)dateInTimeZone:(id)arg1 fromFloatingDateInGMT:(id)arg2 ;
+(void)_initCustomCalendar;
+(id)dateInFloatingTimeZoneFromDate:(id)arg1 inTimeZone:(id)arg2 ;
+(long long)daysSpannedFromStartDate:(id)arg1 toEndDate:(id)arg2 allDay:(char)arg3 inCalendar:(id)arg4 ;
+(id)dateWithDatePartFromDate:(id)arg1 timePartFromDate:(id)arg2 inCalendar:(id)arg3 ;
+(id)nextRoundedHour;
+(id)CalDateForNow;
+(id)_nowComponents;
+(id)_todayComponents;
+(id)CalDateForBeginningOfToday;
+(id)_tomorrowComponents;
+(id)CalDateForEndOfToday;
+(id)CalDateForBeginningOfTomorrow;
+(id)CalDateForEndOfTomorrow;
+(id)isd_propertyValueWithType:(int)arg1 bytesEncodedForSqlite:(const void*)arg2 ;
+(id)dateWithPassDateString:(id)arg1 ;
+(id)midnightDate;
+(id)calStoreDateInTimeZone:(id)arg1 fromFloatingDateInGMT:(id)arg2 ;
+(id)startOfDayWithDaysSinceToday:(long long)arg1 ;
+(id)_ab_dateFromDateComponents:(id)arg1 ;
+(id)_geo_calendar;
+(id)_geo_dateWithJulianDay:(double)arg1 ;
+(id)dateWithUTCDateTime_BU:(const UTCDateTime*)arg1 ;
+(id)midnightJan1st1904_BU;
+(id)_scriptingDateWithDescriptor:(id)arg1 ;
+(id)dateWithNaturalLanguageString:(id)arg1 date:(id)arg2 locale:(id)arg3 ;
+(id)dateWithNaturalLanguageString:(id)arg1 locale:(id)arg2 ;
+(id)dateWithNaturalLanguageString:(id)arg1 ;
+(id)dateWithTimeIntervalSince1970:(double)arg1 ;
+(id)allocWithZone:(NSZone*)arg1 ;
+(id)dateWithTimeIntervalSinceNow:(double)arg1 ;
+(id)distantFuture;
+(id)distantPast;
+(char)supportsSecureCoding;
+(double)timeIntervalSinceReferenceDate;
+(id)date;
+(id)dateWithTimeIntervalSinceReferenceDate:(double)arg1 ;
+(id)dateWithString:(id)arg1 ;
+(id)dateWithDate:(id)arg1 ;
+(id)dateWithTimeInterval:(double)arg1 sinceDate:(id)arg2 ;
-(char)isToday:(id)arg1 ;
-(char)isSinceYesterday:(id)arg1 ;
-(char)isThisWeek:(id)arg1 ;
-(char)isWithinLast2Weeks:(id)arg1 ;
-(char)isThisMonth:(id)arg1 ;
-(char)isWithinLast2Months:(id)arg1 ;
-(char)withinLastDays:(id)arg1 ;
-(char)withinLastWeeks:(id)arg1 ;
-(char)withinLastMonths:(id)arg1 ;
-(char)withinLastYears:(id)arg1 ;
-(char)isSpecificDay:(id)arg1 ;
-(char)isAfter:(id)arg1 ;
-(char)isBefore:(id)arg1 ;
-(char)isNSDate__;
-(char)_osa_isEarlierDate:(id)arg1 ;
-(char)_osa_isLaterDate:(id)arg1 ;
-(id)nextDateMatchingTimeComponents;
-(id)localizedStringForEventTimeInTimeZone:(id)arg1 ;
-(id)localizedShortTimeInTimeZone:(id)arg1 ;
-(id)localizedAbbrevDateInTimeZone:(id)arg1 ;
-(id)localizedAbbrevMonthWithDayInTimeZone:(id)arg1 ;
-(id)localizedDayOfMonth;
-(id)localizedAbbrevWeekdayWithDayOfMonth;
-(id)localizedHourInTimeZone:(id)arg1 ;
-(id)localizedHourMinutesWithoutAMPMInTimeZone:(id)arg1 ;
-(id)localizedFullMonth;
-(id)localizedFullDate;
-(id)localizedDayOfWeekWithAbbrevDateInTimeZone:(id)arg1 ;
-(id)localizedFullYearMonth;
-(id)localizedFullMonthWeekdayDay;
-(id)localizedAbbrevMonthWeekdayDay;
-(id)localizedFullMonthWithDay;
-(id)localizedAbbrevMonthWithDay;
-(id)localizedShortMonthWithDay;
-(id)localizedFullStandaloneWeekday;
-(id)localizedShortStandaloneWeekday;
-(id)localizedFullWeekdayWithDayOfMonth;
-(NSRange)rangeOfDayInLocalizedDateString:(id)arg1 ;
-(id)localizedAbbrevWeekdayWithDayOfMonthPreferWeekdayFirstForEnglish;
-(id)localizedShortTime;
-(id)localizedStringForEventTime;
-(id)localizedWeekNumber;
-(id)localizedYear;
-(id)localizedFullDateAndTime;
-(id)localizedShortDateAndTime;
-(id)localizedLongDate;
-(id)localizedAbbrevDate;
-(id)localizedShortDate;
-(id)localizedTime;
-(id)localizedHour;
-(id)localizedHourMinutesWithoutAMPM;
-(id)localizedHourWithoutAMPM;
-(long long)hourInCalendar:(id)arg1 ;
-(id)timeOnlyComponentsInCalendar:(id)arg1 ;
-(char)isEqualToDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(long long)compareDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(long long)minuteInCalendar:(id)arg1 ;
-(id)dateByAddingMinutes:(long long)arg1 inCalendar:(id)arg2 ;
-(id)allComponentsInCalendar:(id)arg1 ;
-(id)dateOnlyByTranslatingFrom:(id)arg1 toCalendar:(id)arg2 ;
-(long long)yearInCalendar:(id)arg1 ;
-(long long)monthInCalendar:(id)arg1 ;
-(long long)weekInCalendar:(id)arg1 ;
-(long long)dayInCalendar:(id)arg1 ;
-(long long)secondInCalendar:(id)arg1 ;
-(id)dateByAddingHours:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingWeeks:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingMonths:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingYears:(long long)arg1 inCalendar:(id)arg2 ;
-(char)isSameMonthAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isBeforeDayForDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isBeforeOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isAfterOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(id)dateRoundedToNearestFifteenMinutesInCalendar:(id)arg1 ;
-(id)dateRoundedToHourOnSameDayInCalendar:(id)arg1 ;
-(id)dateByAddingDays:(long long)arg1 inCalendar:(id)arg2 ;
-(long long)weekdayInCalendar:(id)arg1 ;
-(char)isAfterDate:(id)arg1 ;
-(char)isSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(id)dateOnlyComponentsInCalendar:(id)arg1 ;
-(id)dateRemovingTimeComponentsInCalendar:(id)arg1 ;
-(char)isBeforeDate:(id)arg1 ;
-(id)dateAtHour:(unsigned long long)arg1 minute:(unsigned long long)arg2 second:(unsigned long long)arg3 inTimeZone:(id)arg4 ;
-(id)dateForStartOfDayInTimeZone:(id)arg1 ;
-(id)dateWithoutTimeComponentsInTimeZone:(id)arg1 ;
-(id)dateForEndOfDayInTimeZone:(id)arg1 ;
-(void)_performBlockBehindDispatchSync:(/*^block*/id)arg1 inTimeZone:(id)arg2 ;
-(BOOL)isToday_FI;
-(BOOL)isYesterday_FI;
-(UTCDateTime)utcDateTime_FI;
-(id)stringTimeIntervalSinceReferenceDate;
-(long long)relativeDaysSinceNow;
-(char)isDayDifferent:(id)arg1 ;
-(char)isMinuteDifferent:(id)arg1 ;
-(id)optimalDisplayString;
-(char)safari_isInclusivelyBetweenDate:(id)arg1 andDate:(id)arg2 ;
-(id)safari_startOfDay;
-(long long)safari_numberOfWeeksUntilDate:(id)arg1 ;
-(char)safari_isInToday;
-(char)safari_isInSameDayAsDate:(id)arg1 ;
-(long long)safari_firefoxTime;
-(long long)safari_chromeTime;
-(id)midnightInCalendar:(id)arg1 ;
-(id)deltaDays:(long long)arg1 inCalendar:(id)arg2 ;
-(id)localizedStringWithFormat:(id)arg1 ;
-(id)localizedStringWithFormat:(id)arg1 timeZone:(id)arg2 ;
-(id)CALDateOnlyInTimeZone:(id)arg1 ;
-(id)CALFloatingDateTimeInTimeZone:(id)arg1 ;
-(id)CALDateTimeInTimeZone:(id)arg1 ;
-(id)CALDateOnlyInGMT;
-(id)CALFloatingDateTimeInGMT;
-(id)CALDateInTimeZone:(id)arg1 isDateOnly:(char)arg2 ;
-(id)convertToCALDateFromTimeZone:(id)arg1 toTimeZone:(id)arg2 isDateOnly:(char)arg3 ;
-(id)legacyDateAsType:(int)arg1 timeZone:(id)arg2 ;
-(id)representationID;
-(id)CALFloatingDateTime;
-(id)CALDateTime;
-(id)CALDateOnly;
-(id)roundToCurrentWeekInCalendar:(id)arg1 withFirstWeekdayIndex:(long long)arg2 ;
-(id)roundToCurrentMonthInCalendar:(id)arg1 ;
-(id)roundToCurrentYearInCalendar:(id)arg1 ;
-(char)CalIsAfterOrSameAsDate:(id)arg1 ;
-(long long)hourInCalendar:(id)arg1 ;
-(id)localizedRelativeDateStringShortened:(char)arg1 ;
-(id)timeStringAlwaysIncludeMinutes:(char)arg1 ;
-(id)localizedMonthShortened:(char)arg1 ;
-(id)timeOnlyComponentsInCalendar:(id)arg1 ;
-(char)isEqualToDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(long long)compareDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(long long)minuteInCalendar:(id)arg1 ;
-(id)dateByAddingMinutes:(long long)arg1 inCalendar:(id)arg2 ;
-(id)allComponentsInCalendar:(id)arg1 ;
-(id)dateOnlyByTranslatingFrom:(id)arg1 toCalendar:(id)arg2 ;
-(long long)yearInCalendar:(id)arg1 ;
-(long long)monthInCalendar:(id)arg1 ;
-(long long)weekInCalendar:(id)arg1 ;
-(long long)dayInCalendar:(id)arg1 ;
-(long long)secondInCalendar:(id)arg1 ;
-(id)dateByAddingHours:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingWeeks:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingMonths:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingYears:(long long)arg1 inCalendar:(id)arg2 ;
-(char)isSameMonthAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isBeforeDayForDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isBeforeOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isAfterOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(id)dateRoundedToNearestFifteenMinutesInCalendar:(id)arg1 ;
-(id)dateRoundedToHourOnSameDayInCalendar:(id)arg1 ;
-(id)localizedWeekNumber;
-(id)localizedMonthAndYearStringShortened:(char)arg1 ;
-(id)localizedDateStringWithTemplate:(id)arg1 ;
-(id)_stringWithUseAbbreviatedFormats:(char)arg1 lowerCase:(char)arg2 ;
-(id)localizedWeekdayMonthDayStringShortened:(char)arg1 ;
-(id)roundToCurrentDayInCalendar:(id)arg1 ;
-(id)roundToCurrentMondayInCalendar:(id)arg1 ;
-(char)isSameYearAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(char)isTodayInCalendar:(id)arg1 ;
-(id)dateRoundedToStartOfNextDayInCalendar:(id)arg1 ;
-(void)printComparisonToDate:(id)arg1 ;
-(id)localizedMonthAndDayStringShortened:(char)arg1 ;
-(id)localizedYearMonthAndDayStringShortened:(char)arg1 ;
-(id)localizedWeekdayMonthDayYearStringShortened:(char)arg1 ;
-(id)localizedWeekdayMonthYearStringShortened:(char)arg1 ;
-(id)dateByAddingDays:(long long)arg1 inCalendar:(id)arg2 ;
-(char)CalIsBeforeOrSameAsDate:(id)arg1 ;
-(char)CalIsBeforeDate:(id)arg1 ;
-(long long)weekdayInCalendar:(id)arg1 ;
-(char)isAfterDate:(id)arg1 ;
-(char)CalIsBetweenStartDate:(id)arg1 endDate:(id)arg2 ;
-(char)CalIsAfterDate:(id)arg1 ;
-(char)isSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(id)dateOnlyComponentsInCalendar:(id)arg1 ;
-(id)dateRemovingTimeComponentsInCalendar:(id)arg1 ;
-(char)isBeforeDate:(id)arg1 ;
-(id)roundSecondsDownInCalendar:(id)arg1 ;
-(int)isd_quickDirtyCoderType;
-(void*)isd_bytesEncodedForSqlite;
-(int)isd_sqlitePropertyValueType;
-(char)isWholeHour;
-(int)tocSillyDateInt;
-(id)midnightDate;
-(char)approximatelyEqualTo:(id)arg1 ;
-(id)timeValue;
-(id)followingMidnight;
-(id)dateByAddingDays:(long long)arg1 ;
-(char)isWeekend;
-(char)isDayBeforeWeekend;
-(char)isFirstDayOfWeekend;
-(char)isLastDayOfWeekend;
-(id)calStoreNSDateWithTimeZone:(id)arg1 ;
-(id)calStoreNSDateWithGMT;
-(id)replyPrefixForSender:(id)arg1 withSpacer:(char)arg2 ;
-(id)descriptionInBSDMailboxFormat;
-(long long)_ILMediaObjectPropertyCompare:(id)arg1 ;
-(id)_ab_componentsForJanuary1InTheSameYear;
-(double)_ab_timeIntervalSinceJanuary1;
-(char)_abCompareWithinIntervalAroundToday:(id)arg1 ;
-(char)_abCompareWithinIntervalAroundTodayYearless:(id)arg1 ;
-(char)_abCompareNotWithinIntervalAroundToday:(id)arg1 ;
-(char)_abCompareNotWithinIntervalAroundTodayYearless:(id)arg1 ;
-(char)_abCompareWithinIntervalFromToday:(id)arg1 ;
-(char)_abCompareWithinIntervalFromTodayYearless:(id)arg1 ;
-(char)_abCompareNotWithinIntervalFromToday:(id)arg1 ;
-(char)_abCompareNotWithinIntervalFromTodayYearless:(id)arg1 ;
-(double)ab_timeIntervalSinceToday;
-(double)ab_smallestTimeIntervalAroundTodayYearLess;
-(double)ab_timeIntervalFromTodayYearLess;
-(double)_geo_julianDay;
-(double)_geo_hoursAndMinutes;
-(void)_geo_sunInformationForLocation:(SCD_Struct_NS23)arg1 previousRiseTransitSet:(out id*)arg2 currentRiseTransitSet:(out id*)arg3 nextRiseTransitSet:(out id*)arg4 altitude:(double)arg5 ;
-(id)replacementObjectForPortCoder:(id)arg1 ;
-(id)_scriptingDateDescriptor;
-(long long)_web_compareDay:(id)arg1 ;
-(id)_web_RFC1123DateString;
-(char)_web_isToday;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(Class)classForCoder;
-(id)dateWithCalendarFormat:(id)arg1 timeZone:(id)arg2 ;
-(id)descriptionWithCalendarFormat:(id)arg1 timeZone:(id)arg2 locale:(id)arg3 ;
-(id)initWithTimeIntervalSinceNow:(double)arg1 ;
-(double)timeIntervalSince1970;
-(id)initWithTimeIntervalSince1970:(double)arg1 ;
-(id)initWithTimeIntervalSinceReferenceDate:(double)arg1 ;
-(char)isInToday;
-(char)isInTomorrow;
-(char)isInYesterday;
-(char)isInSameDayAsDate:(id)arg1 ;
-(char)isEqual:(id)arg1 toUnitGranularity:(unsigned long long)arg2 ;
-(long long)compare:(id)arg1 toUnitGranularity:(unsigned long long)arg2 ;
-(unsigned long long)_cfTypeID;
-(id)addTimeInterval:(double)arg1 ;
-(id)descriptionWithLocale:(id)arg1 ;
-(char)isNSDate__;
-(NSString *)description;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(double)timeIntervalSinceNow;
-(id)initWithString:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(long long)compare:(id)arg1 ;
-(double)timeIntervalSinceReferenceDate;
-(id)dateByAddingTimeInterval:(double)arg1 ;
-(char)isEqualToDate:(id)arg1 ;
-(double)timeIntervalSinceDate:(id)arg1 ;
-(id)earlierDate:(id)arg1 ;
-(id)laterDate:(id)arg1 ;
-(id)initWithTimeInterval:(double)arg1 sinceDate:(id)arg2 ;
-(id)initWithDate:(id)arg1 ;
@end

