/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 12:02:03 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <IOBluetooth/IOBluetooth-Structs.h>
#import <IOBluetooth/IOBluetoothObject.h>
#import <IOBluetooth/NSPortDelegate.h>

@class NSPort, IOBluetoothDevice, NSString;

@interface IOBluetoothL2CAPChannel : IOBluetoothObject <NSPortDelegate> {

	NSPort* mDataAvailablePort;
	IODataQueueMemory* mIncomingDataQueue;
	IOBluetoothDevice* mDevice;
	char mIncomingChannel;
	id mL2CAPChannelConnectionHandler;
	/*function pointer*/void* mIncomingDataListener;
	void* mIncomingDataListenerRefCon;
	/*function pointer*/void* mEventDataListener;
	void* mEventDataListenerRefCon;
	unsigned short mChannelPSM;
	unsigned short mLocalChannelID;
	unsigned short mRemoteChannelID;
	char mIsClosed;
	unsigned long long mObjectID;
	id _mReserved;

}

@property (readonly) unsigned short outgoingMTU; 
@property (readonly) unsigned short incomingMTU; 
@property (retain) IOBluetoothDevice * device; 
@property (assign) unsigned long long objectID; 
@property (assign) unsigned short PSM; 
@property (readonly) unsigned short localChannelID; 
@property (readonly) unsigned short remoteChannelID; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)getUniqueObjectDictionary:(char)arg1 ;
+(id)getKeyForIOService:(unsigned)arg1 ;
+(id)registerForChannelOpenNotifications:(id)arg1 selector:(SEL)arg2 ;
+(id)registerForChannelOpenNotifications:(id)arg1 selector:(SEL)arg2 withPSM:(unsigned short)arg3 direction:(int)arg4 ;
+(id)withL2CAPChannelRef:(OpaqueIOBluetoothObjectRefRef)arg1 ;
+(id)withObjectID:(unsigned long long)arg1 ;
-(id)initWithIOService:(unsigned)arg1 ;
-(int)waitforChanneOpen;
-(id)getDevice;
-(char)channelStateIsClosed;
-(void)connectionComplete:(id)arg1 status:(int)arg2 ;
-(int)instantiateOnDevice:(id)arg1 ;
-(id)getKey;
-(int)setDelegate:(id)arg1 withConfiguration:(id)arg2 ;
-(void)setPSM:(unsigned short)arg1 ;
-(void)closeKernelConnection;
-(void)updateFromNewIOService:(unsigned)arg1 ;
-(unsigned short)PSM;
-(unsigned short)outgoingMTU;
-(unsigned short)incomingMTU;
-(unsigned short)localChannelID;
-(unsigned short)remoteChannelID;
-(int)createQueue;
-(char)channelStateIsOpen;
-(int)configureChannel:(id)arg1 ;
-(int)destroyQueue;
-(void)processIncomingData:(IOBluetoothUserMessageBlock*)arg1 ;
-(unsigned short)getPSM;
-(unsigned long long)getObjectID;
-(unsigned short)getOutgoingMTU;
-(unsigned short)getIncomingMTU;
-(unsigned short)getLocalChannelID;
-(unsigned short)getRemoteChannelID;
-(OpaqueIOBluetoothObjectRefRef)getL2CAPChannelRef;
-(int)closeChannel;
-(int)requestRemoteMTU:(unsigned short)arg1 ;
-(int)write:(void*)arg1 length:(unsigned short)arg2 ;
-(int)writeAsync:(void*)arg1 length:(unsigned short)arg2 refcon:(void*)arg3 ;
-(int)writeSync:(void*)arg1 length:(unsigned short)arg2 ;
-(int)registerIncomingDataListener:(/*function pointer*/void*)arg1 refCon:(void*)arg2 ;
-(id)registerForChannelCloseNotification:(id)arg1 selector:(SEL)arg2 ;
-(int)registerIncomingEventListener:(/*function pointer*/void*)arg1 refCon:(void*)arg2 ;
-(int)configureMTU:(unsigned short)arg1 maxIncomingMTU:(unsigned short)arg2 ;
-(int)startStopFlow:(char)arg1 ;
-(void)logDescription:(const char*)arg1 ;
-(void)dispatchEvent:(IOBluetoothL2CAPChannelEvent*)arg1 ;
-(char)isIncoming;
-(id)init;
-(int)setDelegate:(id)arg1 ;
-(void)finalize;
-(void)dealloc;
-(NSString *)description;
-(id)delegate;
-(unsigned long long)objectID;
-(char)isValid;
-(IOBluetoothDevice *)device;
-(void)handleMachMessage:(void*)arg1 ;
-(void)setObjectID:(unsigned long long)arg1 ;
-(void)setDevice:(IOBluetoothDevice *)arg1 ;
@end

