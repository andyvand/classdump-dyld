/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 9:53:26 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/Image Capture/Devices/PTPCamera.app/Contents/MacOS/PTPCamera
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <PTPCamera/PTPCamera-Structs.h>
@class PTPTransport, NSString, PTPDeviceInfoDataset, NSMutableArray, PTPEventPacket, NSMutableDictionary, PTPWrappedBytes;

@interface PTPInitiator : NSObject {

	id _delegate;
	PTPTransport* _transport;
	unsigned short _deviceVendorID;
	unsigned short _deviceProductID;
	NSString* _UUIDString;
	NSString* _persistentIDString;
	NSString* _deviceSerialNumberString;
	NSString* _userAssignedDeviceName;
	PTPDeviceInfoDataset* _deviceInfo;
	NSMutableArray* _storages;
	NSMutableArray* _eventQueue;
	PTPEventPacket* _event;
	unsigned _transactionID;
	unsigned short _operationCode;
	char _requestPending;
	char _cancelOp;
	unsigned _lastAddedObject;
	char _sessionOpen;
	char _needToReopenSession;
	char _catalogingDone;
	char _appleDeviceHasNewFW;
	char _deviceIsPairedWithThisHost;
	char _deviceIsPasscodeLocked;
	char _deviceIsAtLeastOkemoBased;
	char _deviceIsDummyPTPDevice;
	NSMutableDictionary* _arrayOf64BitFileSizes;
	PTPWrappedBytes* _dataForTransaction;
	unsigned long long _excessReceivedDataSize;
	NSString* _cacheFolderParentPath;
	NSString* _cacheFolderName;
	char _passthroughUsed;
	int _tetheredCaptureState;
	int _tetheredCaptureEnableCount;
	NSString* _filenamePrefix;
	unsigned _lastGrouptID;
	const ObjectInfo* _ICADeviceObjectInfo;
	NSMutableArray* _eventDataCache;
	NSMutableArray* _eventDataCookieCache;
	NSMutableDictionary* _mobdevProperties;

}

@property (assign) id delegate;                                               //@synthesize delegate=_delegate - In the implementation block
@property (readonly) unsigned estimatedNumOfDownloadableObjects; 
@property (readonly) unsigned numOfDownloadableObjects; 
@property (readonly) double contentCatalogPercentCompleted; 
@property (assign) char catalogingDone;                                       //@synthesize catalogingDone=_catalogingDone - In the implementation block
@property (assign) unsigned short deviceVendorID;                             //@synthesize deviceVendorID=_deviceVendorID - In the implementation block
@property (assign) unsigned short deviceProductID;                            //@synthesize deviceProductID=_deviceProductID - In the implementation block
@property (copy) NSString * deviceSerialNumberString;                         //@synthesize deviceSerialNumberString=_deviceSerialNumberString - In the implementation block
@property (copy) NSString * UUIDString;                                       //@synthesize UUIDString=_UUIDString - In the implementation block
@property (copy) NSString * persistentIDString;                               //@synthesize persistentIDString=_persistentIDString - In the implementation block
@property (copy) NSString * userAssignedDeviceName;                           //@synthesize userAssignedDeviceName=_userAssignedDeviceName - In the implementation block
@property (readonly) char locked; 
-(id)storages;
-(char)catalogingDone;
-(void)setCatalogingDone:(char)arg1 ;
-(id)partialDataFromFile:(id)arg1 fromOffset:(unsigned)arg2 maxSize:(unsigned)arg3 actualSize:(unsigned*)arg4 useBuffer:(char*)arg5 ;
-(id)initWithTargetAddress:(id)arg1 targetPort:(unsigned)arg2 targetGUID:(id)arg3 targetName:(id)arg4 hostGUID:(id)arg5 hostName:(id)arg6 ;
-(char)openSession;
-(void)primeStorages;
-(void)refreshAssignedDeviceName;
-(int)transportConnectionStatus;
-(id)initWithHostLocationID:(unsigned)arg1 ;
-(char)deviceIsDummyPTPDevice;
-(id)storageIDs;
-(id)initiator;
-(void)setICADeviceObjectInfo:(const ObjectInfo*)arg1 ;
-(id)thumbDataFromFile:(id)arg1 maxSize:(unsigned)arg2 actualSize:(unsigned*)arg3 useBuffer:(char*)arg4 ;
-(id)metadataFromFile:(id)arg1 ;
-(unsigned short)saveFile:(id)arg1 to:(id)arg2 ;
-(char)canonInitiateCapture;
-(char)initiateCapture;
-(int)handlePassThroughCommand_Legacy:(void*)arg1 ;
-(int)handlePassThroughCommand:(id)arg1 ;
-(char)setDeviceDateTime:(id)arg1 ;
-(const ObjectInfo*)ICADeviceObjectInfo;
-(char)canonEnableTetheredCapture;
-(char)canonDisableTetheredCapture;
-(void)issueCancelRequest:(unsigned)arg1 ;
-(void)pairDevice;
-(void)unpairDevice;
-(char)passthroughUsed;
-(unsigned short)deviceProductID;
-(unsigned)estimatedNumOfDownloadableObjects;
-(unsigned)numOfDownloadableObjects;
-(char)deviceIsPasscodeLocked;
-(char)deviceIsPairedWithThisHost;
-(id)mobdevProps;
-(NSString *)userAssignedDeviceName;
-(id)storageForStorageID:(unsigned)arg1 ;
-(id)objectInfo:(unsigned)arg1 responseCode:(unsigned short*)arg2 ;
-(char)requestPending;
-(id)itemForObjectHandle:(unsigned)arg1 ;
-(void)updateCatalogingDone;
-(id)storageInfo:(unsigned)arg1 ;
-(id)objectInfosForObjectsInStorage:(unsigned)arg1 objectFormatCode:(unsigned)arg2 association:(unsigned)arg3 ;
-(id)objectHandlesInStorage:(unsigned)arg1 objectFormatCode:(unsigned)arg2 association:(unsigned)arg3 ;
-(id)objectInfosForObjectsInStorage64:(unsigned)arg1 objectFormatCode:(unsigned)arg2 association:(unsigned)arg3 ;
-(id)objectHandlesInStorage64:(unsigned)arg1 objectFormatCode:(unsigned)arg2 association:(unsigned)arg3 ;
-(void)setUserAssignedDeviceName:(NSString *)arg1 ;
-(void)setDeviceSerialNumberString:(NSString *)arg1 ;
-(void)cleanupCache;
-(void)setDeviceVendorID:(unsigned short)arg1 ;
-(void)setDeviceProductID:(unsigned short)arg1 ;
-(NSString *)deviceSerialNumberString;
-(id)sendRequest:(id)arg1 andReceiveData:(id)arg2 excessReceivedDataSize:(unsigned long long*)arg3 timeout:(double)arg4 ;
-(void)handleAppleDeviceUnlockedEvent;
-(void)notifyUserAssignedDeviceNameChange;
-(id)canonGetEvents;
-(char)canonSetDevicePropValueEx:(char*)arg1 length:(unsigned)arg2 ;
-(char)canonSetUILock:(char)arg1 ;
-(char)canonSetHDDCapacity;
-(void)canonHandleEvents:(id)arg1 ;
-(void)pushEventData:(id)arg1 forCookie:(id)arg2 ;
-(void)processUnhandledEvents;
-(void)transferObject:(id)arg1 ;
-(void)issueCancelEvent:(unsigned)arg1 ;
-(void)resetDeviceConnection;
-(id)sendRequest:(id)arg1 andReceiveData:(id)arg2 maxDataSize:(unsigned)arg3 excessReceivedDataSize:(unsigned long long*)arg4 timeout:(double)arg5 ;
-(id)sendRequest:(id)arg1 andSendData:(id)arg2 ;
-(id)sendRequest:(id)arg1 excessReceivedDataSize:(unsigned long long*)arg2 timeout:(double)arg3 ;
-(unsigned long long)objectInfo64BitSize:(unsigned)arg1 ;
-(id)dataFromFile:(id)arg1 maxSize:(unsigned)arg2 actualSize:(unsigned*)arg3 useBuffer:(char*)arg4 ;
-(unsigned short)savePartialFile:(id)arg1 fromOffset:(unsigned long long)arg2 size:(unsigned long long)arg3 to:(id)arg4 ;
-(id)deviceDateTime;
-(char)setDevicePropertyValue:(id)arg1 forProperty:(unsigned short)arg2 ;
-(unsigned short)deviceStatus;
-(void)deviceReset;
-(char)canonSetRemoteMode:(unsigned)arg1 ;
-(char)canonSetEventMode:(unsigned)arg1 ;
-(void)canonSendTransferComplete:(id)arg1 ;
-(id)popEventDataForCookie:(id)arg1 ;
-(char)appleDeviceHasNewFW;
-(void)handleStartData:(id)arg1 ;
-(short)getVolumeThumbnail:(char*)arg1 size:(unsigned*)arg2 ;
-(void)sentData:(id)arg1 ;
-(id)devicePropertyDescDatasetForProperty:(unsigned short)arg1 ;
-(id)devicePropertyValueForProperty:(unsigned short)arg1 ;
-(char)resetDevicePropertyValueForProperty:(unsigned short)arg1 ;
-(void)readStorages;
-(unsigned)numObjectsInStorage:(unsigned)arg1 objectFormatCode:(unsigned)arg2 association:(unsigned)arg3 ;
-(id)objectFilesystemInfosForObjectsInStorage:(unsigned)arg1 objectFormatCode:(unsigned)arg2 association:(unsigned)arg3 ;
-(void)transportActivated;
-(void)transportDeactivated;
-(char)allowKeepAwake;
-(char)locked;
-(NSString *)UUIDString;
-(void)setUUIDString:(NSString *)arg1 ;
-(void)setPersistentIDString:(NSString *)arg1 ;
-(char)deleteFile:(id)arg1 ;
-(id)transport;
-(char)closeSession;
-(unsigned short)deviceVendorID;
-(unsigned)transactionID;
-(double)contentCatalogPercentCompleted;
-(char)isAccessRestrictedAppleDevice;
-(NSString *)persistentIDString;
-(id)deviceInfo;
-(void)setDelegate:(id)arg1 ;
-(void)dealloc;
-(void)stop;
-(char)start;
-(double)timeOffset;
-(void)cancel;
-(id)delegate;
-(void)handleEvent:(id)arg1 ;
@end

