/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 2:26:55 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/Mail.framework/Versions/A/Mail
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Mail/MFMessageStore.h>

@class NSMutableSet, NSMutableArray, MFLibraryStoreMessageConsumer, NSString, MFMessageCriterion;

@interface MFLibraryStore : MFMessageStore {

	id _openOptionsLock;
	unsigned _openOptions;
	NSMutableSet* _memberMessageIDs;
	NSMutableArray* _allMessagesDuringOpening;
	id _consumerLock;
	MFLibraryStoreMessageConsumer* _consumer;
	char _startedWatcher;
	NSString* _url;
	MFMessageCriterion* _criterion;
	long long _filesystemWatcherCookie;

}

@property (copy) NSString * url;                                             //@synthesize url=_url - In the implementation block
@property (retain) MFMessageCriterion * criterion;                           //@synthesize criterion=_criterion - In the implementation block
@property (assign) char startedWatcher;                                      //@synthesize startedWatcher=_startedWatcher - In the implementation block
@property (assign,nonatomic) long long filesystemWatcherCookie;              //@synthesize filesystemWatcherCookie=_filesystemWatcherCookie - In the implementation block
+(char)storeAtPathIsWritable:(id)arg1 ;
+(char)createEmptyStoreForPath:(id)arg1 ;
+(unsigned)defaultLoadOptions;
+(id)filterMessages:(id)arg1 throughSmartMailbox:(id)arg2 ;
+(void)initialize;
+(id)sharedInstance;
-(id)objectSpecifierForMessage:(id)arg1 ;
-(void)deleteMessages:(id)arg1 moveToTrash:(char)arg2 ;
-(id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2 ;
-(id)initWithAccount:(id)arg1 ;
-(MFMessageCriterion *)criterion;
-(id)copyOfAllMessagesWithOptions:(unsigned)arg1 ;
-(id)initWithMailbox:(id)arg1 readOnly:(char)arg2 createEmptyStore:(char)arg3 ;
-(id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(char)arg2 allowPartial:(char)arg3 ;
-(id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id*)arg2 fetchIfNotAvailable:(char)arg3 allowPartial:(char)arg4 ;
-(char)canCompact;
-(id)copyOfAllMessages;
-(void)_flushAllMessageData;
-(void)doCompact;
-(void)writeUpdatedMessageDataToDisk;
-(id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(char)arg2 ;
-(id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id*)arg2 fetchIfNotAvailable:(char)arg3 ;
-(void)openSynchronouslyUpdatingMetadata:(char)arg1 ;
-(id)initWithCriterion:(id)arg1 mailbox:(id)arg2 readOnly:(char)arg3 ;
-(id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id*)arg2 fetchIfNotAvailable:(char)arg3 ;
-(void)messagesWereAdded:(id)arg1 conversationsMembers:(id)arg2 duringOpen:(char)arg3 options:(id)arg4 ;
-(id)messageForMessageID:(id)arg1 ;
-(id)async_setLocalFlagsForMessages:(id)arg1 ;
-(id)cacheDirectoryContents;
-(char)allowsOverwrite;
-(long long)undoAppendOfMessageIDs:(id)arg1 ;
-(char)allowsAppend;
-(long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 newDocumentIDsByOld:(id)arg5 flagsToSet:(id)arg6 forMove:(char)arg7 error:(id*)arg8 ;
-(id)async_setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2 ;
-(id)lastMessageWithHeaders:(id)arg1 inMailbox:(id)arg2 ;
-(void)deleteMessagesOlderThanNumberOfDays:(long long)arg1 compact:(char)arg2 ;
-(void)_messagesAddedToLibrary:(id)arg1 ;
-(id)duplicateCopiesOfMessages:(id)arg1 ;
-(id)attachmentsDirectoryForMessage:(id)arg1 ;
-(long long)mailboxID;
-(char)hasCacheFileForMessage:(id)arg1 directoryContents:(id)arg2 ;
-(id)initWithMailbox:(id)arg1 readOnly:(char)arg2 ;
-(void)_messagesUpdated:(id)arg1 ;
-(void)_messageFlagsChanged:(id)arg1 ;
-(void)_messagesCompacted:(id)arg1 ;
-(void)setFlagsAndColorForMessages:(id)arg1 ;
-(id)snippetsForMessages:(id)arg1 ;
-(id)dataForMimePart:(id)arg1 ;
-(char)hasCacheFileForMessage:(id)arg1 part:(id)arg2 directoryContents:(id)arg3 ;
-(id)openSynchronouslyUpdatingMetadata:(char)arg1 returnRetainedMessages:(char)arg2 ;
-(void)cleanupSynchronously;
-(void)deleteLastMessageWithHeaders:(id)arg1 compactWhenDone:(char)arg2 ;
-(char)hasCachedDataForMimePart:(id)arg1 ;
-(char)messageHasBeenDeleted:(id)arg1 ;
-(char)supportsSnippets;
-(void)saveSnippetsForMessages:(id)arg1 ;
-(char)_shouldCallCompactWhenClosing;
-(unsigned long long)totalCount;
-(void)newMessagesAvailable:(id)arg1 conversationsMembers:(id)arg2 fromLibraryStoreMessageConsumer:(id)arg3 options:(id)arg4 ;
-(id)notificationMessagesFromOpen;
-(void)libraryFinishedSendingMessagesToLibraryStoreMessageConsumer:(id)arg1 ;
-(char)_criterionContainsGmailLabelCriterion:(id)arg1 ;
-(void)_updateCriterionFromMailbox:(id)arg1 ;
-(void)setCriterion:(MFMessageCriterion *)arg1 ;
-(unsigned)_openOptions;
-(char)_shouldUpdateColorsAndAttachmentsAfterOpening;
-(void)cleanupAsynchronously;
-(void)_asynchronousCopyOfAllMessagesWithOptions:(id)arg1 ;
-(void)_setFlagsAndColorForMessages:(id)arg1 ;
-(id)filterMessagesByMembership:(id)arg1 ;
-(char)startedWatcher;
-(long long)filesystemWatcherCookie;
-(void)cancelOpen;
-(void)_cancelQueryAndClearConsumer:(char)arg1 ;
-(id)duplicateCopiesOfMessages:(id)arg1 withDocumentIDs:(id)arg2 excludingMessageIDs:(id)arg3 ;
-(id)messagesForDocumentID:(id)arg1 ;
-(void)_rebuildTableOfContentsSynchronously;
-(void)_invalidateObjectCachesForKey:(id)arg1 ;
-(id)_setOrGetValue:(id)arg1 forKey:(id)arg2 inCache:(id*)arg3 ;
-(char)_updateFlagForMessage:(id)arg1 key:(id)arg2 value:(char)arg3 ;
-(void)setFilesystemWatcherCookie:(long long)arg1 ;
-(void)setStartedWatcher:(char)arg1 ;
-(id)initWithCriterion:(id)arg1 ;
-(id)initWithMailbox:(id)arg1 ;
-(void)openAsynchronouslyWithOptions:(unsigned)arg1 ;
-(void)asynchronousCopyOfAllMessagesWithOptions:(id)arg1 ;
-(id)mutableCopyOfAllMessages;
-(id)recentMessageWithValue:(id)arg1 forHeader:(id)arg2 ;
-(void)updateMetadata;
-(void)_setNeedsAutosave;
-(void)_cancelAutosave;
-(void)rebuildTableOfContentsAsynchronously;
-(unsigned long long)_numberOfMessagesToCache;
-(id)init;
-(void)dealloc;
-(NSString *)url;
-(void)setUrl:(NSString *)arg1 ;
-(void)reset;
-(void)_invalidate;
-(void)cancelQuery;
@end

