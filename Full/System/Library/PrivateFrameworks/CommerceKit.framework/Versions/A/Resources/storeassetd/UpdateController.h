/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 3:34:38 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Resources/storeassetd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <storeassetd/storeassetd-Structs.h>
#import <storeassetd/UpdateQueueDelegate.h>

@class ISStoreClient, UpdateQueue, NSMutableArray, NSDate, NSLock, NSMutableDictionary, ISServiceProxy;

@interface UpdateController : NSObject <UpdateQueueDelegate> {

	ISStoreClient* _storeClient;
	UpdateQueue* _updateQueue;
	NSMutableArray* _updatesInProgress;
	char _osUpdateScanInProgress;
	NSDate* _osUpdateScanStartDate;
	char _osUpdateReportProgressImmediately;
	NSMutableArray* _osUpdateScanObservers;
	NSLock* _osUpdateScanObserversLock;
	NSLock* _osUpdateScanLock;
	NSMutableArray* _osUpdatesInProgress;
	NSMutableDictionary* _osUpdateCancelTokens;
	NSMutableArray* _osUpdateProgressObservers;
	NSLock* _osUpdateProgressObserversLock;
	NSMutableArray* _availableUpdateObservers;
	NSLock* _availableUpdateObserversLock;
	char _disableDockBadgeUpdates;
	CFRunLoopSourceRef _powerRunLoopSource;
	ISServiceProxy* _serviceProxy;
	NSDate* _lastLogoutRequestedDate;

}

@property (readonly) UpdateQueue * updateQueue;                 //@synthesize updateQueue=_updateQueue - In the implementation block
@property (readonly) char osUpdateScanInProgress; 
@property (readonly) char updatesAreInProgress; 
@property (copy) NSDate * lastLogoutRequestedDate;              //@synthesize lastLogoutRequestedDate=_lastLogoutRequestedDate - In the implementation block
+(id)updateControllerForStoreClient:(id)arg1 ;
+(id)updateQueueForStoreClient:(id)arg1 ;
+(char)otherUsersAreLoggedIn;
+(char)runningOnACPower;
+(char)shouldOfferDoItLaterForAppUpdates:(id)arg1 osUpdates:(id)arg2 ;
+(char)fileVaultKeyIsDestroyedOnStandby;
-(id)_notificationCenter;
-(void)disableDockBadgeUpdates;
-(id)appUpdatesToInstallLater;
-(void)enableDockBadgeUpdates;
-(char)lastDoItLaterLogoutFailed;
-(id)availableOSUpdatesEligibleForAutoInstallOfRestartRequiredUpdates;
-(char)isAutoUpdatedOfRestartRequiredUpdatesEnabled;
-(char)confirmRestartWithUpdatesWillDownload:(char)arg1 ;
-(void)appendInstalledUpdatesToJournal:(id)arg1 ;
-(void)removeUpdatesAvailableNotifications;
-(void)clearAvailableUpdatesBadgeCount;
-(void)didRequestPostLogoutInstallOfUpdates;
-(char)updatesAreInProgress;
-(char)isUpdateStagingEnabled;
-(void)_didFinishOSUpdates:(id)arg1 ;
-(void)_didStartOSUpdates:(id)arg1 ;
-(char)appUpdatesToInstallLaterIncludesBundleID:(id)arg1 ;
-(double)autoInstallUpdateMinimumReleaseTimeInterval;
-(void)removeUpdatesAvailableNotificationFromOlderOSVersions;
-(void)postCriticalUpdateInstallNowNotificationWithUpdateCount:(long long)arg1 restartRequired:(char)arg2 ;
-(void)postCriticalUpdateNotificationWithUpdateCount:(long long)arg1 title:(id)arg2 text:(id)arg3 delayedAutoInstall:(char)arg4 restartRequired:(char)arg5 ;
-(void)removeCriticalUpdateNotificationsIncludingPostInstall:(char)arg1 ;
-(char)updateFailureNotificationIsDisplayed;
-(UpdateQueue *)updateQueue;
-(char)shouldNotifyForNewUpdatesOnly;
-(void)postUpdatesAvailableNotificationWithAppUpdates:(id)arg1 osUpdates:(id)arg2 restartRequired:(char)arg3 auditInfo:(id)arg4 ;
-(void)postUpdatesFailedToInstallPostLogoutNotification:(id)arg1 ;
-(void)postDoItLaterSuccessNotificationWithUpdates:(id)arg1 ;
-(char)shouldPromptForAutoUpdateOfRestartRequiredUpdatesOptIn;
-(void)promptUserToOptInForAutoUpdateOfRestartRequiredUpdatesWithShowNotification:(char)arg1 ;
-(void)postNotificationForAutoInstalledUpdates:(id)arg1 ;
-(void)postDoItLaterFailedNotificationWithAuditInfo:(id)arg1 ;
-(void)_availableUpdatesDidChange;
-(void)availableUpdatesDidChange:(id)arg1 ;
-(id)osUpdateProductKeysSeenByUser;
-(char)_canInstallAppUpdates:(id)arg1 andOSUpdates:(id)arg2 requiresAuthorization:(char)arg3 error:(id*)arg4 ;
-(void)startObservingPowerSourceWithCallback:(/*^block*/id)arg1 ;
-(void)stopObservingPowerSource;
-(char)_hasCriticalUpdates:(id)arg1 ;
-(char)_hasAdequatePowerOrUserConfirmsWithCriticalUpdates:(char)arg1 ;
-(char)_checkAndReclaimFreeDiskSpaceForUpdates:(id)arg1 ;
-(id)_bannerNotification;
-(id)_alertNotification;
-(void)_removeDeliveredNotificationsWithSource:(id)arg1 excludingOSVersion:(id)arg2 ;
-(void)_removeDeliveredNotificationsWithSource:(id)arg1 ;
-(id)cacheUpdateAuditInfo:(id)arg1 ;
-(id)_userInfoIncludingStoreClient;
-(char)_firstUpdatesAvailableNotificationHasBeenPosted;
-(id)_iWorkOriLifeUpdatesIncludedInAppUpdates:(id)arg1 ;
-(void)resetUpdatesAvailableNotificationTimestamp;
-(void)_selfDidPostUpdatesAvailableNotification;
-(id)_criticalUpdateNotification;
-(void)enumerateOSUpdateProgressObserversWithBlock:(/*^block*/id)arg1 ;
-(char)_osUpdateScanShouldReportProgress;
-(void)_sendOSUpdateScanFinished:(char)arg1 percentComplete:(float)arg2 error:(id)arg3 ;
-(void)setUserHasSeenAllAvailableOSUpdates;
-(void)_writeAppsUpdatedToInstallLaterToDisk:(id)arg1 ;
-(id)_mutableAppUpdatesToInstallLater;
-(void)_installAvailableUpdatesLaterWithMode:(long long)arg1 userInitiated:(char)arg2 ;
-(double)availableUpdatesNotificationMinimumInterval;
-(void)_addAppUpdatesToInstallLater:(id)arg1 ;
-(void)postOtherUsersLoggedInLaterHelperNotification;
-(void)postPowerLaterHelperNotification;
-(id)_dateForTimestampKey:(CFStringRef)arg1 ;
-(id)_dateWhenDate:(id)arg1 exceedsInterval:(double)arg2 ;
-(double)_timeIntervalWithPreferenceKey:(CFStringRef)arg1 defaultValue:(double)arg2 ;
-(double)criticalUpdateNotificationMinimumInterval;
-(char)_timestampWithKey:(CFStringRef)arg1 hasExceededCheckInterval:(double)arg2 ;
-(double)checkForAndStageAppUpdatesMinimumInterval;
-(double)autoInstallUpdatesMinimumInterval;
-(void)postSilentInstallNotificationWithUpdateCount:(long long)arg1 title:(id)arg2 text:(id)arg3 url:(id)arg4 ;
-(char)isTimeToStageAppUpdates;
-(char)isTimeToPostUpdatesAvailableNotification;
-(char)isTimeToAutoUpdate;
-(char)isTimeToPostCriticalUpdateNotification;
-(char)_removeInstalledUpdatesFromJournalWithProductKey:(id)arg1 ;
-(void)_writeUpdatesJournalToDiskWithEntries:(id)arg1 ;
-(id)_installedUpdatesJournalURL;
-(char)isSUScanAutomaticCheckEnabled;
-(void)setAutoUpdateEnabled:(char)arg1 ;
-(void)postNotificationForAutoUpdateOptIn;
-(void)setAutoUpdateOfRestartRequiredUpdatesEnabled:(char)arg1 ;
-(void)postNotificationForAutoUpdateOfRestartRequiredUpdatesOptIn;
-(void)setLastLogoutRequestedDate:(NSDate *)arg1 ;
-(NSDate *)lastLogoutRequestedDate;
-(char)hasRecentlyRequestedPostLogoutInstall;
-(void)checkForBookUpdatesWithReplyBlock:(/*^block*/id)arg1 ;
-(long long)availableBookUpdatesBadgeCount;
-(id)availableBookUpdates;
-(void)installAvailableCriticalUpdates;
-(id)cachedUpdateAuditInfoWithKey:(id)arg1 ;
-(void)launchAppStoreAndShowUpdateFailureWithAuditInfoCacheKey:(id)arg1 ;
-(char)hasUpdatesToBeInstalledLater;
-(char)shouldOfferDoItLaterForAvailableUpdates;
-(void)startAppUpdates:(id)arg1 andOSUpdates:(id)arg2 withDelegate:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)installAllAvailableUpdates;
-(unsigned long long)availableUpdatesBadgeCount;
-(char)osUpdateScanInProgress;
-(id)installedUpdatesJournal;
-(char)isAutoUpdatedEnabled;
-(char)shouldPromptForAutoUpdateOptIn;
-(id)initWithStoreClient:(id)arg1 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)setLastDoItLaterLogoutFailed:(char)arg1 ;
-(void)osUpdates:(id)arg1 didProgressWithState:(long long)arg2 percentComplete:(double)arg3 statusInfo:(id)arg4 includesCriticalUpdates:(char)arg5 canCancel:(char)arg6 ;
-(void)osUpdates:(id)arg1 didFailWithError:(id)arg2 ;
-(void)addOSUpdateProgressObserver:(id)arg1 ;
-(void)removeOSUpdateProgressObserver:(id)arg1 ;
-(void)addAvailableUpdatesObserver:(id)arg1 ;
-(void)removeAvailableUpdatesObserver:(id)arg1 ;
-(void)addOSUpdateScanObserver:(id)arg1 ;
-(void)removeOSUpdateScanObserver:(id)arg1 ;
-(void)cancelOSUpdates:(id)arg1 ;
-(void)startOSUpdateScanWithForceFullScan:(char)arg1 reportProgressImmediately:(char)arg2 launchedFromNotification:(char)arg3 userHasSeenAllUpdates:(char)arg4 checkForOtherUpdates:(char)arg5 ;
-(void)removeUpdateFromInstallLaterWithBundleID:(id)arg1 ;
-(void)installAvailableUpdatesLaterWithMode:(long long)arg1 ;
-(void)cancelUpdatesToBeInstalledLater;
-(void)promptUserToOptInForAutoUpdateWithShowNotification:(char)arg1 ;
-(void)nowIsLaterWithMode:(long long)arg1 countdownDeferred:(char)arg2 ;
-(void)laterDidNotOccurWithDueToACPower:(char)arg1 ;
-(void)softwareUpdateDidFinishBackgroundScanWithInfo:(id)arg1 ;
@end

