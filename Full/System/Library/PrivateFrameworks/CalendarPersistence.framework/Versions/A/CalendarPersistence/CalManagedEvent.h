/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:33:52 PM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/CalendarPersistence.framework/Versions/A/CalendarPersistence
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CalendarPersistence/CalManagedCalendarItem.h>
#import <CalendarPersistence/EKProtocolEventOccurrence.h>

@class NSString, NSDate, NSSet, NSArray, NSURL, CalManagedRecurrenceException, NSMutableSet, CalManagedLocation, NSNumber, CalManagedAttendee, NSDictionary, NSManagedObjectID, NSTimeZone;

@interface CalManagedEvent : CalManagedCalendarItem <EKProtocolEventOccurrence>

@property (retain) NSDate * startDateIncludingTravel; 
@property (retain) NSDate * endDate; 
@property (retain) NSString * endTimeZone; 
@property (retain) NSString * location; 
@property (retain) NSArray * locations; 
@property (assign) char hasRecurrenceException; 
@property (assign) char isDetached; 
@property (assign) char isPhantom; 
@property (assign) char isInvitationDirty; 
@property (assign) char dontSchedule; 
@property (assign) char dontNotify; 
@property (assign) char isInvitationSent; 
@property (assign) char isMyResponseDirty; 
@property (assign) char isRSVPNeeded; 
@property (assign) char isVeryLongDuration; 
@property (assign) char needsReply; 
@property (assign) char isBirthdayWithoutYear; 
@property (assign,nonatomic) char isYearlessLeapMonthBirthday; 
@property (retain) NSString * birthdayName; 
@property (retain) NSString * lunarCalendarID; 
@property (assign) int transparency; 
@property (retain) NSURL * organizerAddress; 
@property (retain) NSString * organizerCommonName; 
@property (retain) NSString * organizerEmailAddress; 
@property (retain) NSString * organizerScheduleStatus; 
@property (retain) NSString * organizerScheduleAgent; 
@property (retain) NSString * privateComment; 
@property (retain) NSDate * recurrenceEndDate; 
@property (retain) CalManagedRecurrenceException * masterException; 
@property (retain) NSMutableSet * recurrenceExceptions; 
@property (retain) NSMutableSet * messages; 
@property (retain) CalManagedEvent * sliceParent; 
@property (retain) CalManagedEvent * sliceChild; 
@property (assign,nonatomic) int statusType; 
@property (retain) CalManagedLocation * structuredLocation; 
@property (retain) CalManagedLocation * travelStartLocation; 
@property (readonly) char isSignificantlyDetached; 
@property (retain) NSMutableSet * attendees; 
@property (retain) NSMutableSet * attendeeComments; 
@property (retain) NSNumber * unlistedOtherAttendees; 
@property (retain) CalManagedAttendee * myAttendee; 
@property (retain) NSString * myAttendeeStatus; 
@property (assign) char hasAttendee; 
@property (assign) char amIInvited; 
@property (assign) char isCalendarOwnerInvited; 
@property (assign) int attendeeIconState; 
@property (retain) NSString * linkID; 
@property (readonly) char changesWillResultIniMIPScheduling; 
@property (assign) char isOrganizerMe; 
@property (assign) int invitationMode; 
@property (assign,nonatomic) double travelDuration; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) char canBeConvertedToFullObject; 
@property (nonatomic,readonly) char isPartialObject; 
@property (nonatomic,readonly) NSDictionary * preFrozenRelationshipObjects; 
@property (nonatomic,readonly) NSManagedObjectID * managedObjectID; 
@property (nonatomic,retain,readonly) NSDate * recurrenceDateUnadjustedFromUTC; 
@property (nonatomic,readonly) NSNumber * calendarItemPermissionNumber; 
@property (nonatomic,copy,readonly) id<EKProtocolCalendar> container; 
@property (nonatomic,copy,readonly) NSString * recurrenceRuleString; 
@property (nonatomic,readonly) char cachedHasAttendee; 
@property (nonatomic,readonly) char cachedHasAttachment; 
@property (nonatomic,readonly) char cachedHasAlarm; 
@property (nonatomic,readonly) char cachedIsCalendarOwnerInvitedAttendee; 
@property (nonatomic,readonly) char cachedIsCurrentUserInvitedAttendee; 
@property (nonatomic,copy,readonly) id<EKProtocolParticipant> participantForMe; 
@property (nonatomic,copy,readonly) NSString * organizerName; 
@property (nonatomic,copy,readonly) NSURL * organizerURL; 
@property (nonatomic,copy,readonly) NSString * organizerEmail; 
@property (nonatomic,readonly) char organizedByMe; 
@property (nonatomic,copy,readonly) NSDate * lastModifiedDate; 
@property (nonatomic,copy,readonly) NSString * scheduleAgentString; 
@property (nonatomic,copy,readonly) NSTimeZone * timeZoneObject; 
@property (nonatomic,copy,readonly) NSDate * startDateUnadjustedFromUTC; 
@property (nonatomic,readonly) char defaultAlarmWasDeleted; 
@property (nonatomic,readonly) NSString * lunarCalendarString; 
@property (nonatomic,copy,readonly) NSDate * endDateUnadjustedFromUTC; 
@property (nonatomic,readonly) NSSet * notificationBoxMessageSet; 
@property (nonatomic,copy,readonly) NSString * privacyLevelString; 
@property (nonatomic,copy,readonly) NSString * statusString; 
@property (nonatomic,readonly) int availabilityEnum; 
@property (nonatomic,copy,readonly) id<EKProtocolStructuredLocation> ekStructuredLocation; 
@property (nonatomic,copy,readonly) id<EKProtocolStructuredLocation> ekStructuredStartLocation; 
@property (nonatomic,readonly) unsigned long long participantsStatus; 
@property (nonatomic,copy,readonly) NSString * responseComment; 
@property (nonatomic,readonly) char dontSendNotificationForChanges; 
@property (nonatomic,copy,readonly) NSString * sliceParentID; 
@property (nonatomic,copy,readonly) NSString * birthdayTitle; 
@property (nonatomic,readonly) NSString * nameForBirthday; 
@property (nonatomic,readonly) char isYearlessBirthday; 
+(id)entityName;
+(id)locationStringFromArray:(id)arg1 ;
+(id)recognizedICSProperties;
+(id)recognizedICSPropertyParameterMap;
+(id)fetchRequestWithPredicate:(id)arg1 inManagedObjectContext:(id)arg2 ;
+(id)fetchRequestWithSharedUID:(id)arg1 occurrence:(id)arg2 calendars:(id)arg3 inManagedObjectContext:(id)arg4 ;
+(int)attendeeIconStateForManagedEvent:(id)arg1 inManagedCalendar:(id)arg2 ;
+(char)isOrganizerMeForManagedEvent:(id)arg1 inManagedCalendar:(id)arg2 ;
+(id)fetchRequestWithSharedUID:(id)arg1 occurrence:(id)arg2 inManagedObjectContext:(id)arg3 ;
+(id)fetchRequestWithLocalUID:(id)arg1 occurrence:(id)arg2 inManagedObjectContext:(id)arg3 ;
+(id)fetchRequestForFutureEventsNeedingReplyForCalendars:(id)arg1 inContext:(id)arg2 ;
+(id)stringIDForFloatingDateTime:(id)arg1 ;
+(id)stringIDForAllDayDate:(id)arg1 ;
+(id)stringIDForUTCDateTime:(id)arg1 ;
-(void)setLocations:(NSArray *)arg1 ;
-(void)setStartDate:(id)arg1 ;
-(double)duration;
-(NSString *)location;
-(void)setStatusString:(NSString *)arg1 ;
-(NSString *)statusString;
-(id)occurrenceID;
-(id)masterEventOccurrence;
-(NSDate *)startDateUnadjustedFromUTC;
-(NSDate *)recurrenceDateUnadjustedFromUTC;
-(NSDate *)endDateUnadjustedFromUTC;
-(char)organizedByMe;
-(id<EKProtocolParticipant>)participantForMe;
-(NSURL *)organizerURL;
-(NSString *)organizerEmail;
-(NSString *)scheduleAgentString;
-(NSString *)nameForBirthday;
-(char)isYearlessBirthday;
-(NSString *)lunarCalendarString;
-(id)attendeeSet;
-(void)setEndDate:(NSDate *)arg1 ;
-(NSArray *)locations;
-(char)isOverlappingAdjacentOccurrenceForStartDate:(id)arg1 endDate:(id)arg2 originalStartDate:(id)arg3 ;
-(char)isOverlappingAlarmForStartDate:(id)arg1 endDate:(id)arg2 newDuration:(id)arg3 ;
-(char)isExchangeCompatible;
-(char)hasAlarmWithDuration:(id)arg1 thatOverlapsOccWithStartDate:(id)arg2 andEndDate:(id)arg3 ;
-(double)travelDuration;
-(void)setTravelDuration:(double)arg1 ;
-(char)isOrganizerOwner;
-(char)hasOccurrencesThatOverlap;
-(id)_makeExchangeCompatible;
-(NSString *)organizerName;
-(void)setOrganizerEmail:(NSString *)arg1 ;
-(char)isSignificantlyDetached;
-(NSURL *)organizerAddress;
-(void)setOrganizerName:(NSString *)arg1 ;
-(char)allowAttendeePreservingMoveToCalendar:(id)arg1 ;
-(id)attendeesExcludingOrganizer;
-(char)isAnInvitation;
-(id)filenameWithoutExtension;
-(char)isInvitationStatusPending;
-(void)setOrganizerAddress:(NSURL *)arg1 ;
-(void)sendiTIP:(int)arg1 changeRequest:(id*)arg2 ;
-(void)sendiTIP:(int)arg1 withInfo:(id)arg2 changeRequest:(id*)arg3 ;
-(char)replyWithStatus:(int)arg1 fromMessage:(id)arg2 putInCalendar:(id)arg3 conflictDecisionBlock:(/*^block*/id)arg4 handledMessage:(char*)arg5 ;
-(id)detachedEventWithOccurrence:(id)arg1 ;
-(int)statusType;
-(id)detachForOccurrence:(id)arg1 ;
-(void)importiCalendarComponent:(id)arg1 occurrences:(id)arg2 fromDocument:(id)arg3 inCalendar:(id)arg4 options:(unsigned long long)arg5 deletionBlock:(/*^block*/id)arg6 ;
-(void)setStatusType:(int)arg1 ;
-(char)hasOccurrenceOnOrAfter:(id)arg1 includingExceptions:(char)arg2 ;
-(id)occurrencesFromDate:(id)arg1 toDate:(id)arg2 excludeDetached:(char)arg3 ;
-(void)updateAttendeeDerivedPropertiesInCalendar:(id)arg1 ;
-(char)shouldShowSeparateInvite;
-(void)updateMyParstatDerivedPropertiesInCalendar:(id)arg1 ;
-(id)checkAndPromptForConflictsWithStatus:(int)arg1 conflictDecisionBlock:(/*^block*/id)arg2 ;
-(id)newestInvitation;
-(void)createExceptionsAndMessages:(id)arg1 forConflicts:(id)arg2 sender:(id)arg3 ;
-(void)_finishImplicitReplyOnMasterEvent:(id)arg1 forEvents:(id)arg2 status:(int)arg3 putInCalendar:(id)arg4 ;
-(void)_finishNonImplicitReplyOnMasterEvent:(id)arg1 forEvents:(id)arg2 status:(int)arg3 putInCalendar:(id)arg4 context:(id)arg5 ;
-(id)addVirtualRequestMessage;
-(id)occurrencesToScanForConflicts;
-(id)conflictsForOccurrences:(id)arg1 ;
-(char)validateForInsert:(id*)arg1 ;
-(char)validateForUpdate:(id*)arg1 ;
-(char)hasOccurrenceAfter:(id)arg1 ;
-(char)hasInvitedAttendee;
-(void)agentScanDropboxOperation;
-(char)isOrganizerScheduleAgentNonServer;
-(char)hasOccurrenceOnOrAfter:(id)arg1 ;
-(id)iCalendarDocumentWithMethod:(int)arg1 options:(unsigned long long)arg2 ;
-(void)_sendCalDAViTIP:(id)arg1 changeRequest:(id*)arg2 ;
-(void)sendiTIP:(int)arg1 withInfo:(id)arg2 ;
-(id)_committedRecurrenceID;
-(void)sendITIPCancelExtraAttendees;
-(void)_sendEmailiTIP:(id)arg1 partstat:(int)arg2 ;
-(void)_sendCalDAViTIP:(id)arg1 ;
-(void)sendiTIP:(int)arg1 ;
-(void)sendITIPCancelExtraAttendeesInExceptions;
-(id)_iCalendarElementWithOptions:(unsigned long long)arg1 ;
-(id)iCalendarDocumentWithOptions:(unsigned long long)arg1 ;
-(void)_updateAfterStartDateWithComponent:(id)arg1 ;
-(char)isEvent;
-(void)_invalidInstances:(id*)arg1 _duplicateExceptions:(id*)arg2 ;
-(id)_occurrenceDatesFromDate:(id)arg1 toDate:(id)arg2 ;
-(void)_zeroTimeIfUndefinedInComponents:(id)arg1 ;
-(id)eventsFromICSDocumentHelper:(id)arg1 ;
-(id)alarmsFromICSEventHelper:(id)arg1 ;
-(void)willSave;
-(char)validateForWrite:(id*)arg1 ;
-(void)willRefresh:(char)arg1 ;
-(id)attributesToCompareForMerge;
-(id)relationshipsToCompareForMerge;
-(id)masterItem;
-(id)defaultAlarmsBasedOnItemAndPreferences;
-(id)defaultAlarmsBasedOnItemAndPreferencesFromServer:(char)arg1 ;
-(id)allAlarms;
-(char)cachedHasAttendee;
-(char)cachedIsCalendarOwnerInvitedAttendee;
-(char)cachedIsCurrentUserInvitedAttendee;
-(void)refreshRelationships;
-(char)hasOccurrenceInRangeFromDate:(id)arg1 toDate:(id)arg2 ;
-(id)earliestOccurrenceDateBetweenStartDate:(id)arg1 endDate:(id)arg2 withOffSet:(long long)arg3 ;
-(void)setScheduleAgentString:(NSString *)arg1 ;
-(void)setStartDateUnadjustedFromUTC:(NSDate *)arg1 ;
-(void)setOrganizerURL:(NSURL *)arg1 ;
-(void)updateWithEntity:(id)arg1 alarms:(char)arg2 inCalendar:(id)arg3 ;
-(Class)entityClass;
-(id)occurrenceIDFromCommittedValues;
-(void)updateAttendeeDerivedPropertiesInCalendar:(id)arg1 processPendingChanges:(char)arg2 ;
-(void)updateAttendeeDerivedPropertiesInCalendar:(id)arg1 processPendingChanges:(char)arg2 myAttendee:(id)arg3 ;
-(id)myAttendeeForAttendees:(id)arg1 inCalendar:(id)arg2 ;
-(int)calculateInvitationModeInCalendar:(id)arg1 ;
-(int)_commonDetachmentTests;
-(id)_detachForOccurrence:(id)arg1 ;
-(id)occurrencesFromDate:(id)arg1 toDate:(id)arg2 withExcludingOption:(int)arg3 ;
-(char)hasOccurrenceInRangeFromDate:(id)arg1 toDate:(id)arg2 withExcludingOption:(int)arg3 ;
-(id)_occurrenceForException:(id)arg1 onDate:(id)arg2 fromDate:(id)arg3 toDate:(id)arg4 withExcludingOption:(int)arg5 ;
-(id)_endDateForRecurrenceID:(id)arg1 ;
-(id)_occurrencesWithNoRecurrenceRuleFromDate:(id)arg1 toDate:(id)arg2 withExcludingOption:(int)arg3 ;
-(id)_exceptionsWithIntervalKeysDictionary;
-(id)_occurrenceWithOccurrenceDate:(id)arg1 fromDate:(id)arg2 toDate:(id)arg3 exception:(id)arg4 withExcludingOption:(int)arg5 ;
-(id)occurrenceHelperFromDate:(id)arg1 toDate:(id)arg2 withExcludingOption:(int)arg3 justChecking:(char)arg4 ;
-(id)occurrencesFromDate:(id)arg1 toDate:(id)arg2 ;
-(id)occurrencesBinnedByDayForEvents:(id)arg1 inCalendar:(id)arg2 startDate:(id)arg3 endDate:(id)arg4 ;
-(char)isAnInvitationInCalendar:(id)arg1 ;
-(char)isAnyAttendeeMeInCalendar:(id)arg1 ;
-(char)_isDate:(id)arg1 betweenStart:(id)arg2 andEnd:(id)arg3 ;
-(void)updateDurationDerivedProperties;
-(void)_fetchManagedAttachmentsWithSource:(id)arg1 ;
-(id)birthdayStringForDate:(id)arg1 ;
-(char)isSignificantlyDetachedIgnoringParticipation;
-(NSSet *)notificationBoxMessageSet;
-(NSString *)privacyLevelString;
-(int)availabilityEnum;
-(id<EKProtocolStructuredLocation>)ekStructuredLocation;
-(id<EKProtocolStructuredLocation>)ekStructuredStartLocation;
-(unsigned long long)participantsStatus;
-(NSString *)responseComment;
-(char)dontSendNotificationForChanges;
-(NSString *)sliceParentID;
-(NSString *)birthdayTitle;
-(char)changesWillResultIniMIPScheduling;
-(void)updateAttendeeDerivedPropertiesInCalendar:(id)arg1 myAttendee:(id)arg2 ;
-(char)hasOccurrenceWithStartDate:(id)arg1 ;
-(id)travelRouteType;
-(id)expandAndTranslateEventsFromDate:(id)arg1 toDate:(id)arg2 translateBlock:(/*^block*/id)arg3 sortSelector:(SEL)arg4 ;
-(void)queueScanDropboxOperation;
-(void)setEndDateUnadjustedFromUTC:(NSDate *)arg1 ;
-(void)setAvailabilityEnum:(int)arg1 ;
-(void)setEkStructuredLocation:(id<EKProtocolStructuredLocation>)arg1 ;
-(void)setEkStructuredStartLocation:(id<EKProtocolStructuredLocation>)arg1 ;
-(void)setPrivacyLevelString:(NSString *)arg1 ;
-(void)setResponseComment:(NSString *)arg1 ;
-(void)setDontSendNotificationForChanges:(char)arg1 ;
-(void)updateWithEntity:(id)arg1 alarms:(char)arg2 inCalendar:(id)arg3 processChanges:(char)arg4 ;
-(id)entityID;
-(void)_updateWithEntity:(id)arg1 alarms:(char)arg2 omitSyncRecord:(char)arg3 inCalendar:(id)arg4 ;
-(int)legacyDateType;
-(id)occurrenceIDForOccurrenceDate:(id)arg1 ;
-(id)_getBirthdayCalendarWithPotentialLunarCalendarString:(id)arg1 ;
-(void)setBirthday:(id)arg1 isYearless:(char)arg2 isYearlessLeapMonthBirthday:(char)arg3 name:(id)arg4 lunarCalendarString:(id)arg5 ;
-(void)updateBirthdayEventWithSummary:(id)arg1 birthday:(id)arg2 linkID:(id)arg3 abUID:(id)arg4 isYearless:(char)arg5 name:(id)arg6 lunarCalendarString:(id)arg7 ;
@end

