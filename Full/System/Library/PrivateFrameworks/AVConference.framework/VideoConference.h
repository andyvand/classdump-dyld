/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 3:34:30 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/AVConference.framework/AVConference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <AVConference/AVConference-Structs.h>
#import <AVConference/VCCallSessionDelegate.h>
#import <AVConference/GKNATObserverDelegate.h>

@protocol VideoConferenceDelegate, VideoConferenceRealTimeChannel, OS_dispatch_queue, VideoConferenceSpeakingDelegate, VideoConferenceChannelQualityDelegate;
@class NSObject, VideoConferenceManager, AVAudioManager, NSMutableDictionary, NSArray, FFTMeter, AVImageQueue, VCVideoRule, CameraConferenceSynchronizer, NSString, VCCallSession, NSDictionary, GKNATObserver;

@interface VideoConference : NSObject <VCCallSessionDelegate, GKNATObserverDelegate> {

	NSObject*<VideoConferenceDelegate> delegate;
	VideoConferenceManager* manager;
	AVAudioManager* audioManager;
	opaque_pthread_rwlock_t stateLock;
	NSMutableDictionary* sessionDict;
	NSArray* sessionArray;
	char outputMeteringEnabled;
	char inputMeteringEnabled;
	char inputFrequencyMeteringEnabled;
	char outputFrequencyMeteringEnabled;
	FFTMeter* _inputFFTMeter;
	FFTMeter* _outputFFTMeter;
	float outputMeterLevel;
	float inputMeterLevel;
	char microphoneMuted;
	NSObject*<VideoConferenceRealTimeChannel> rtChannel;
	NSObject*<OS_dispatch_queue> audioManagerQueue;
	AVImageQueue* frontQueue;
	AVImageQueue* backQueue;
	AVImageQueue* currentQueue;
	char* currentFacing;
	int localFrameWidth;
	int localFrameHeight;
	int remoteFrameWidth;
	int remoteFrameHeight;
	VCVideoRule* conferenceCaptureRule;
	CameraConferenceSynchronizer* synchronizer;
	tagHANDLE* hVR;
	tagHANDLE* hVT;
	char isRecvVideo;
	double dAudioHostTime;
	opaque_pthread_mutex_t xRemoteLayer;
	opaque_pthread_mutex_t xAudioTS;
	unsigned dwAudioTS;
	char forceNoICE;
	char useViceroyBlobFormat;
	int chatMode;
	char isFocus;
	NSString* currentFocus;
	VCCallSession* currentFocusSession;
	char hasMic;
	float conferenceVolume;
	NSArray* mutedPeers;
	NSArray* connectedPeers;
	unsigned talkingPeersLimit;
	unsigned char speakingArray[16];
	NSObject*<VideoConferenceSpeakingDelegate> speakingDelegate;
	NSObject*<VideoConferenceChannelQualityDelegate> qualityDelegate;
	float longTerm;
	float shortTerm;
	char isTalking;
	unsigned talkTime;
	int packetsPerBundle;
	unsigned recvRTPTimeStamp;
	char disableVAD;
	char isAttemptingRelay;
	char requiresWifi;
	unsigned preferredCodec;
	int upstreamBandwidth;
	int downstreamBandwidth;
	char useAFRC;
	char isGKVoiceChat;
	char isUsingSuppression;
	char shouldTimeoutPackets;
	unsigned char requestedCameraType;
	char useCompressedConnectionData;
	NSDictionary* natTypeDictionary;
	opaque_pthread_mutex_t natMutex;
	opaque_pthread_cond_t natCond;
	unsigned lastSentAudioSampleTime;
	double lastReceivedAudioTimestamp;
	int audioTimeStampDelta;
	GKNATObserver* natObserver;
	unsigned mostRecentStartedCall;
	unsigned lastActiveCall;
	char bweOperatingModeInitialized;
	char useNewBWEMode;
	char useActiveProbingSenderLog;
	char useFakeLargeFrameMode;
	char shouldPrioritizeParticipantIDForSIPInvite;
	char shouldResumeAudio;
	char shouldResumeVideo;
	unsigned timeStampUpdateCounter;
	NSObject*<OS_dispatch_queue> delegateNotificationQueue;
	int conferenceOperatingMode;
	char isValid;

}

@property (assign,nonatomic) char useCompressedConnectionData; 
@property (getter=isSpeakerPhoneEnabled) char enableSpeakerPhone; 
@property (assign,nonatomic) char requiresWifi; 
@property (assign,nonatomic) char shouldPrioritizeParticipantIDForSIPInvite; 
@property (assign,nonatomic) NSObject*<VideoConferenceDelegate> delegate; 
@property (assign,nonatomic) char useViceroyBlobFormat; 
@property (assign,getter=isMicrophoneMuted,nonatomic) char microphoneMuted; 
@property (assign,getter=isOutputMeteringEnabled,nonatomic) char outputMeteringEnabled; 
@property (assign,getter=isInputMeteringEnabled,nonatomic) char inputMeteringEnabled; 
@property (assign,getter=isInputFrequencyMeteringEnabled,nonatomic) char inputFrequencyMeteringEnabled; 
@property (assign,getter=isOutputFrequencyMeteringEnabled,nonatomic) char outputFrequencyMeteringEnabled; 
@property (nonatomic,readonly) float outputMeterLevel; 
@property (nonatomic,readonly) float inputMeterLevel; 
@property (setter=setRTChannel:) NSObject*<VideoConferenceRealTimeChannel> rtChannel; 
@property (assign,nonatomic) int chatMode; 
@property (assign,nonatomic) char isFocus; 
@property (nonatomic,copy) NSString * currentFocus; 
@property (assign,nonatomic) int packetsPerBundle; 
@property (assign) char hasMic; 
@property (assign) float conferenceVolume; 
@property (assign) NSObject*<VideoConferenceSpeakingDelegate> speakingDelegate; 
@property (assign) NSObject*<VideoConferenceChannelQualityDelegate> qualityDelegate; 
@property (assign) unsigned talkingPeersLimit; 
@property (assign) char disableVAD; 
@property (assign) char shouldTimeoutPackets; 
@property (assign) int upstreamBandwidth; 
@property (assign) int downstreamBandwidth; 
@property (readonly) int localFrameHeight; 
@property (readonly) int localFrameWidth; 
@property (assign,nonatomic) unsigned preferredCodec; 
@property (assign,nonatomic) char isUsingSuppression; 
@property (assign,nonatomic) char isGKVoiceChat; 
@property (nonatomic,readonly) VCVideoRule * conferenceCaptureRule; 
@property (assign) unsigned lastActiveCall; 
@property (assign) char isValid; 
-(void)warmupForCall:(int)arg1 deviceRole:(int)arg2 ;
-(void)stopAllCalls:(id)arg1 ;
-(void)cleanupManager;
-(char)useViceroyBlobFormat;
-(void)setUseViceroyBlobFormat:(char)arg1 ;
-(void)sendData:(id)arg1 toCallID:(unsigned)arg2 encrypted:(char)arg3 ;
-(void)inviteDataForParticipantID:(id)arg1 callID:(unsigned)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(unsigned long long)arg4 block:(/*^block*/id)arg5 queue:(id)arg6 caller:(id)arg7 ;
-(id)callMetadataForCallID:(unsigned)arg1 ;
-(void)setPeerCN:(id)arg1 callID:(unsigned)arg2 ;
-(void)setSessionID:(id)arg1 callID:(unsigned)arg2 ;
-(double)networkQualityForCallID:(unsigned)arg1 ;
-(char)requiresWifi;
-(void)setRequiresWifi:(char)arg1 ;
-(char)startConnectionWithParticipantID:(id)arg1 callID:(unsigned)arg2 oldCallID:(unsigned)arg3 usingInviteData:(id)arg4 isCaller:(char)arg5 relayResponseDict:(id)arg6 didOriginateRelayRequest:(char)arg7 capabilities:(id)arg8 idsSocket:(int)arg9 error:(id*)arg10 ;
-(void)remoteCancelledCallID:(unsigned)arg1 ;
-(void)setCallReport:(unsigned)arg1 withReport:(id)arg2 ;
-(unsigned)lastActiveCall;
-(void)setLastActiveCall:(unsigned)arg1 ;
-(void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2 ;
-(void)processRemoteIPChange:(id)arg1 callID:(unsigned)arg2 ;
-(char)isOutputMeteringEnabled;
-(void)setOutputMeteringEnabled:(char)arg1 ;
-(char)isInputMeteringEnabled;
-(void)setInputMeteringEnabled:(char)arg1 ;
-(char)isInputFrequencyMeteringEnabled;
-(char)isOutputFrequencyMeteringEnabled;
-(float)outputMeterLevel;
-(char)getIsVideoPaused:(char*)arg1 callID:(unsigned)arg2 error:(id*)arg3 ;
-(float)inputMeterLevel;
-(unsigned)setRemoteVideoDestination:(void*)arg1 facing:(char)arg2 ;
-(double)localFramerateForCallID:(unsigned)arg1 ;
-(double)localBitrateForCallID:(unsigned)arg1 ;
-(double)remoteFramerateForCallID:(unsigned)arg1 ;
-(double)remoteBitrateForCallID:(unsigned)arg1 ;
-(int)localFrameHeight;
-(int)localFrameWidth;
-(CGSize)remoteFrameSizeForCallID:(unsigned)arg1 ;
-(double)remotePacketLossRateForCallID:(unsigned)arg1 ;
-(double)localPacketLossRateForCallID:(unsigned)arg1 ;
-(double)roundTripTimeForCallID:(unsigned)arg1 ;
-(id)statsForCallID:(unsigned)arg1 ;
-(void)setEnableSpeakerPhone:(char)arg1 ;
-(char)isSpeakerPhoneEnabled;
-(int)natType;
-(char)setPauseVideo:(char)arg1 callID:(unsigned)arg2 error:(id*)arg3 ;
-(void)updateCapabilities:(id)arg1 forCallID:(unsigned)arg2 ;
-(void)processRelayRequestResponse:(unsigned)arg1 responseDict:(id)arg2 didOriginateRequest:(char)arg3 ;
-(void)processRelayUpdate:(unsigned)arg1 updateDict:(id)arg2 didOriginateRequest:(char)arg3 ;
-(void)sendARPLData:(id)arg1 toCallID:(unsigned)arg2 ;
-(void)NATTypeDictionaryUpdated:(id)arg1 ;
-(void)getNSError:(id*)arg1 code:(long long)arg2 detailedCode:(long long)arg3 returnCode:(long long)arg4 filePath:(id)arg5 description:(id)arg6 reason:(id)arg7 ;
-(void)getNSError:(id*)arg1 code:(long long)arg2 detailedCode:(long long)arg3 filePath:(id)arg4 description:(id)arg5 reason:(id)arg6 ;
-(void)session:(id)arg1 withCallID:(unsigned)arg2 videoIsDegraded:(char)arg3 isRemote:(char)arg4 ;
-(void)session:(id)arg1 didChangeRemoteScreenAttributes:(id)arg2 ;
-(void)session:(id)arg1 changeVideoRulesToCaptureRule:(id)arg2 encodeRule:(id)arg3 featuresListString:(id)arg4 ;
-(void)session:(id)arg1 remoteMediaStalled:(char)arg2 ;
-(void)session:(id)arg1 receivedNoPacketsForSeconds:(double)arg2 ;
-(void)session:(id)arg1 packMeters:(char*)arg2 withLength:(char*)arg3 ;
-(void)didChangeLocalVariablesForSession:(id)arg1 ;
-(void)session:(id)arg1 sendRelayResponse:(id)arg2 ;
-(int)packetsPerBundle;
-(void)session:(id)arg1 inititiateRelayRequest:(id)arg2 ;
-(void)handleCellTechChange:(int)arg1 cellularMaxPktLen:(unsigned short)arg2 ;
-(void)handlePrimaryConnChange:(tagCONNRESULT*)arg1 oldResult:(tagCONNRESULT*)arg2 ;
-(void)setQualityDelegate:(NSObject*<VideoConferenceChannelQualityDelegate>)arg1 ;
-(NSObject*<VideoConferenceChannelQualityDelegate>)qualityDelegate;
-(char)startConnectionWithParticipantID:(id)arg1 callID:(unsigned)arg2 usingInviteData:(id)arg3 isCaller:(char)arg4 capabilities:(id)arg5 idsSocket:(int)arg6 error:(id*)arg7 ;
-(id)inviteDataForParticipantID:(id)arg1 callID:(unsigned*)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(double)arg4 error:(id*)arg5 ;
-(void)setPacketsPerBundle:(int)arg1 ;
-(void)setIsGKVoiceChat:(char)arg1 ;
-(char)isGKVoiceChat;
-(NSObject*<VideoConferenceRealTimeChannel>)rtChannel;
-(char)useCompressedConnectionData;
-(void)setUseCompressedConnectionData:(char)arg1 ;
-(char)shouldTimeoutPackets;
-(void)setShouldTimeoutPackets:(char)arg1 ;
-(void)session:(id)arg1 didReceiveData:(id)arg2 withCallID:(unsigned)arg3 ;
-(void)closeConnectionForSession:(id)arg1 withCallID:(unsigned)arg2 ;
-(void)session:(id)arg1 cancelRelayRequest:(id)arg2 ;
-(void)session:(id)arg1 withCallID:(unsigned)arg2 networkHint:(char)arg3 ;
-(void)session:(id)arg1 didStart:(char)arg2 connectionType:(unsigned)arg3 localUseCell:(unsigned)arg4 remoteUseCell:(unsigned)arg5 error:(id)arg6 ;
-(void)session:(id)arg1 didStopWithError:(id)arg2 ;
-(void)session:(id)arg1 didStopWithDelay:(long long)arg2 error:(id)arg3 ;
-(void)remoteVideoDidPause:(char)arg1 callID:(unsigned)arg2 ;
-(void)remoteAudioDidPause:(char)arg1 callID:(unsigned)arg2 ;
-(void)session:(id)arg1 localAudioEnabled:(char)arg2 withCallID:(unsigned)arg3 error:(id)arg4 ;
-(BOOL)session:(id)arg1 startVideoIO:(id*)arg2 captureRule:(id)arg3 isUnpausing:(char)arg4 ;
-(char)session:(id)arg1 didStopVideoIO:(char)arg2 error:(id*)arg3 ;
-(BOOL)didDetectBandwidth:(char)arg1 upstreamBandwidth:(int)arg2 downstreamBandwidth:(int)arg3 ;
-(void)setBWEOptions:(char)arg1 UseNewBWEMode:(char)arg2 FakeLargeFrameMode:(char)arg3 ProbingSenderLog:(char)arg4 ;
-(void)session:(id)arg1 remoteAudioEnabled:(char)arg2 withCallID:(unsigned)arg3 ;
-(void)session:(id)arg1 sendIPChangeRequest:(id)arg2 withCallID:(unsigned)arg3 ;
-(void)session:(id)arg1 didReceiveARPLData:(id)arg2 fromCallID:(unsigned)arg3 ;
-(void)cleanupQueues;
-(id)newSessionWithDeviceRole:(int)arg1 ;
-(int)natTypeForCallSessions:(const char*)arg1 ;
-(void)wrlock;
-(void)rdlock;
-(void)setIsUsingSuppression:(char)arg1 ;
-(id)connectionBlobForParticipantID:(id)arg1 callID:(unsigned*)arg2 error:(id*)arg3 ;
-(void)notifyDelegateOfLocalVariablesChange;
-(void)setConferenceOperatingMode:(int)arg1 ;
-(char)startConnectionWithParticipantID:(id)arg1 callID:(unsigned)arg2 usingInviteData:(id)arg3 isCaller:(char)arg4 relayResponseDict:(id)arg5 didOriginateRelayRequest:(char)arg6 capabilities:(id)arg7 idsSocket:(int)arg8 error:(id*)arg9 ;
-(id)sessionForParticipantID:(id)arg1 ;
-(void)stopCallID:(unsigned)arg1 didRemoteCancel:(char)arg2 error:(id)arg3 ;
-(id)openSessionForParticipant:(id)arg1 ;
-(double)packetLossRateForCallID:(unsigned)arg1 ;
-(void)setChatMode:(int)arg1 ;
-(void)connectionBlobForParticipantID:(id)arg1 callID:(unsigned)arg2 block:(/*^block*/id)arg3 queue:(id)arg4 caller:(id)arg5 ;
-(char)shouldSendAudioForCallID:(unsigned)arg1 ;
-(void)setSendAudio:(char)arg1 forCallID:(unsigned)arg2 ;
-(char)shouldReinitializeCallWithDuration:(double)arg1 forCallID:(unsigned)arg2 ;
-(int)conferenceOperatingMode;
-(void)setCurrentFocus:(NSString *)arg1 ;
-(void)updatedMutedPeers:(id)arg1 forParticipantID:(id)arg2 ;
-(void)updatedConnectedPeers:(id)arg1 ;
-(void)setCallReportProtobuf:(unsigned)arg1 withProtobufData:(id)arg2 forMetricID:(long long)arg3 ;
-(void)forceNoICE:(char)arg1 ;
-(void)setHasMic:(char)arg1 ;
-(char)hasMic;
-(void)setConferenceVolume:(float)arg1 ;
-(float)conferenceVolume;
-(void)setRTChannel:(id)arg1 ;
-(int)chatMode;
-(NSString *)currentFocus;
-(unsigned)preferredCodec;
-(void)setPreferredCodec:(unsigned)arg1 ;
-(int)upstreamBandwidth;
-(void)setUpstreamBandwidth:(int)arg1 ;
-(int)downstreamBandwidth;
-(void)setDownstreamBandwidth:(int)arg1 ;
-(NSObject*<VideoConferenceSpeakingDelegate>)speakingDelegate;
-(void)setSpeakingDelegate:(NSObject*<VideoConferenceSpeakingDelegate>)arg1 ;
-(char)isUsingSuppression;
-(unsigned)talkingPeersLimit;
-(void)setTalkingPeersLimit:(unsigned)arg1 ;
-(char)disableVAD;
-(void)setDisableVAD:(char)arg1 ;
-(char)shouldPrioritizeParticipantIDForSIPInvite;
-(void)setShouldPrioritizeParticipantIDForSIPInvite:(char)arg1 ;
-(VCVideoRule *)conferenceCaptureRule;
-(int)tryrdlock;
-(char)updateSpeaking:(unsigned)arg1 timeStamp:(unsigned)arg2 ;
-(unsigned char)powerFloatToInt:(float)arg1 ;
-(int)captureAsFocus:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 timeStampDelta:(int)arg5 averagePower:(unsigned char)arg6 ;
-(int)captureAsFocusClient:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 averagePower:(unsigned char)arg5 ;
-(int)captureMeshMode:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 bufferedSamples:(int)arg5 hostTime:(double)arg6 ;
-(char)recvSamplesForSession:(id)arg1 samples:(char*)arg2 numBytes:(int)arg3 numSamples:(int)arg4 storeTimestamp:(unsigned)arg5 ;
-(unsigned)pruneQuietestPeers:(unsigned)arg1 talking:(unsigned)arg2 mask:(unsigned)arg3 meters:(char*)arg4 ;
-(unsigned)calculateTalkingMaskAtTimeStamp:(unsigned)arg1 samples:(char*)arg2 numBytes:(int)arg3 numSamples:(int)arg4 ;
-(void)calculateMixingArrays:(unsigned*)arg1 talkingMask:(unsigned)arg2 ;
-(int)pullDecodedAsFocus:(char*)arg1 timestamp:(unsigned)arg2 numBytes:(int)arg3 numSamples:(int)arg4 ;
-(int)pullDecodedAsFocusClient:(char*)arg1 timestamp:(unsigned)arg2 numBytes:(int)arg3 numSamples:(int)arg4 ;
-(int)pullDecodedMeshMode:(char*)arg1 timestamp:(unsigned)arg2 numBytes:(int)arg3 numSamples:(int)arg4 ;
-(void)updateMeter:(unsigned char)arg1 forParticipant:(id)arg2 atIndex:(unsigned)arg3 ;
-(void)updateMeters:(unsigned short)arg1 ;
-(float)powerIntToFloat:(unsigned char)arg1 ;
-(BOOL)onCaptureSound:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 timeStampDelta:(int)arg5 bufferedSamples:(int)arg6 hostTime:(double)arg7 averagePower:(float)arg8 voiceActivity:(unsigned)arg9 ;
-(BOOL)onPlaySound:(char*)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned)arg4 averagePower:(float)arg5 ;
-(id)sessionForIncomingParticipantID:(id)arg1 ;
-(id)sessionForIncomingConnectionResult:(tagCONNRESULT*)arg1 ;
-(id)loopbackSessionWaitingForSIPInvite;
-(int)sipCallbackNotification:(int)arg1 callID:(unsigned)arg2 msgIn:(const char*)arg3 msgOut:(char*)arg4 optional:(void*)arg5 confIndex:(int*)arg6 ;
-(char)matchesCallID:(unsigned)arg1 ;
-(char)matchesOpenSessionForParticipantID:(id)arg1 ;
-(unsigned)callIDForOpenSessionWithParticipantID:(id)arg1 ;
-(char)matchesParticipantID:(id)arg1 ;
-(char)hasSessionWaitingForSIPInvite;
-(char)matchesIncomingConnectionResult:(tagCONNRESULT*)arg1 ;
-(int)stateForCallID:(unsigned)arg1 ;
-(void)markUnfinishedSessions;
-(void)cleanupProc:(id)arg1 ;
-(void)threadSafeCleanupSession:(id)arg1 ;
-(void)cleanupSession:(id)arg1 withDelay:(unsigned long long)arg2 ;
-(void)cleanupSession:(id)arg1 didRemoteCancel:(char)arg2 ;
-(unsigned)connectionResultCallbackForCallID:(unsigned)arg1 result:(tagCONNRESULT*)arg2 didReceiveICEPacket:(char)arg3 didUseRelay:(char)arg4 secretKey:(CFDataRef)arg5 skeResult:(int)arg6 ;
-(void)defaultCleanupSession:(id)arg1 ;
-(char)setPauseAudio:(char)arg1 ;
-(char)setPauseVideo:(char)arg1 ;
-(BOOL)initiateResolutionChangeToWidth:(int)arg1 height:(int)arg2 rate:(int)arg3 ;
-(void)session:(id)arg1 didChangeVideoRule:(id)arg2 ;
-(BOOL)session:(id)arg1 receivedRemoteFrame:(CVBufferRef)arg2 atTime:(SCD_Struct_AV9)arg3 withScreenAttributes:(id)arg4 videoAttributes:(id)arg5 isFirstFrame:(char)arg6 isVideoPaused:(char)arg7 ;
-(BOOL)onCaptureFrame:(CVBufferRef)arg1 frameTime:(SCD_Struct_AV9)arg2 cameraStatusBits:(unsigned char)arg3 ;
-(void)avConferencePreviewError:(id)arg1 ;
-(void)shouldSendBlackFrame:(char)arg1 callID:(id)arg2 ;
-(char)isMicrophoneMuted;
-(void)setMicrophoneMuted:(char)arg1 ;
-(char)getIsAudioPaused:(char*)arg1 callID:(unsigned)arg2 error:(id*)arg3 ;
-(char)setPauseAudio:(char)arg1 callID:(unsigned)arg2 error:(id*)arg3 ;
-(unsigned)initializeNewCallWithDeviceRole:(int)arg1 ;
-(void)setInputFrequencyMeteringEnabled:(char)arg1 ;
-(void)setOutputFrequencyMeteringEnabled:(char)arg1 ;
-(void)stopCallID:(unsigned)arg1 ;
-(void)setIsFocus:(char)arg1 ;
-(char)isFocus;
-(id)init;
-(void)setDelegate:(NSObject*<VideoConferenceDelegate>)arg1 ;
-(void)dealloc;
-(void)unlock;
-(NSObject*<VideoConferenceDelegate>)delegate;
-(char)isValid;
-(char)setActive:(char)arg1 ;
-(void)setIsValid:(char)arg1 ;
@end

