/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 3:34:36 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_source, OS_dispatch_queue;
#import <CloudDocsDaemon/CloudDocsDaemon-Structs.h>
@class NSMutableArray, NSObject, NSString, NSURL, NSError;

@interface PQLConnection : NSObject {

	sqlite3Ref _db;
	int _suspendCaching;
	int _savePointLevel;
	int _skipBatchStop;
	int _vacuumTracker;
	NSMutableArray* _flushNotifications;
	NSObject*<OS_dispatch_source> _batchingTimer;
	double _batchingPeriod;
	int _batchingChangesLimit;
	int _batchingChangesCount;
	int _cacheSize;
	char _useBatching;
	char _batchStarted;
	char _useQueue;
	cache_sRef _preparedStatements;
	NSObject*<OS_dispatch_source> _stmtCacheSource;
	NSMutableArray* _stmtCacheCleanupQueue;
	char _traced;
	char _crashIfUsedAfterClose;
	NSString* _label;
	NSURL* _url;
	/*^block*/id _lockedHandler;
	/*^block*/id _autoRollbackHandler;
	/*^block*/id _sqliteErrorHandler;
	/*^block*/id _preFlushHook;
	/*^block*/id _postFlushHook;
	NSObject*<OS_dispatch_queue> _serialQueue;
	NSError* _lastError;

}

@property (nonatomic,copy) NSString * label;                                          //@synthesize label=_label - In the implementation block
@property (assign,getter=isTraced,nonatomic) char traced;                             //@synthesize traced=_traced - In the implementation block
@property (assign,nonatomic) char crashIfUsedAfterClose;                              //@synthesize crashIfUsedAfterClose=_crashIfUsedAfterClose - In the implementation block
@property (nonatomic,copy,readonly) NSURL * url;                                      //@synthesize url=_url - In the implementation block
@property (nonatomic,readonly) sqlite3Ref dbHandle;                                   //@synthesize db=_db - In the implementation block
@property (nonatomic,readonly) char isInBatch; 
@property (nonatomic,readonly) char isInTransaction; 
@property (nonatomic,retain) NSError * lastError;                                     //@synthesize lastError=_lastError - In the implementation block
@property (nonatomic,readonly) long long lastInsertedRowID; 
@property (nonatomic,readonly) long long changes; 
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> serialQueue;              //@synthesize serialQueue=_serialQueue - In the implementation block
@property (nonatomic,copy) id lockedHandler;                                          //@synthesize lockedHandler=_lockedHandler - In the implementation block
@property (nonatomic,copy) id autoRollbackHandler;                                    //@synthesize autoRollbackHandler=_autoRollbackHandler - In the implementation block
@property (nonatomic,copy) id sqliteErrorHandler;                                     //@synthesize sqliteErrorHandler=_sqliteErrorHandler - In the implementation block
@property (nonatomic,copy) id preFlushHook;                                           //@synthesize preFlushHook=_preFlushHook - In the implementation block
@property (nonatomic,copy) id postFlushHook;                                          //@synthesize postFlushHook=_postFlushHook - In the implementation block
+(void)initialize;
-(sqlite3Ref)dbHandle;
-(void)setSqliteErrorHandler:(id)arg1 ;
-(void)setTraced:(char)arg1 ;
-(void)setCrashIfUsedAfterClose:(char)arg1 ;
-(char)executeRaw:(id)arg1 ;
-(char)openAtURL:(id)arg1 withFlags:(int)arg2 error:(id*)arg3 ;
-(char)setupPragmas;
-(char)registerFunction:(id)arg1 nArgs:(int)arg2 handler:(/*^block*/id)arg3 ;
-(id)fetchObjectOfClass:(Class)arg1 sql:(id)arg2 ;
-(id)userVersion;
-(void)setPreFlushHook:(id)arg1 ;
-(void)setPostFlushHook:(id)arg1 ;
-(void)useBatchingWithDelay:(double)arg1 changeCount:(int)arg2 ;
-(char)performWithFlags:(unsigned)arg1 action:(/*^block*/id)arg2 ;
-(char)setUserVersion:(long long)arg1 ;
-(void)useSerialQueue;
-(char)backupToURL:(id)arg1 progress:(/*^block*/id)arg2 ;
-(char)groupInTransaction:(/*^block*/id)arg1 ;
-(void)groupInBatch:(/*^block*/id)arg1 ;
-(id)fetchObject:(/*^block*/id)arg1 sql:(id)arg2 ;
-(long long)lastInsertedRowID;
-(void)forceBatchStart;
-(char)performWithFlags:(unsigned)arg1 action:(/*^block*/id)arg2 whenFlushed:(/*^block*/id)arg3 ;
-(void)setLockedHandler:(id)arg1 ;
-(void)setAutoRollbackHandler:(id)arg1 ;
-(void)_clearStatementCache;
-(char)_execute:(id)arg1 mustSucceed:(char)arg2 bindings:(_va_list_tag*)arg3 ;
-(int)_vacuumMode;
-(void)_vacuumIfNeeded;
-(char)_performWithFlags:(unsigned)arg1 action:(/*^block*/id)arg2 whenFlushed:(/*^block*/id)arg3 ;
-(char)openAtURL:(id)arg1 sharedCache:(char)arg2 error:(id*)arg3 ;
-(char)destroyDatabaseWithError:(id*)arg1 ;
-(id)_newStatementForFormat:(id)arg1 arguments:(_va_list_tag*)arg2 ;
-(id)fetchObjectOfClass:(Class)arg1 initializer:(SEL)arg2 sql:(id)arg3 args:(_va_list_tag*)arg4 ;
-(void)_batchStartIfNeeded;
-(void)_batchStopIfNeeded;
-(void)_fireFlushNotifications;
-(char)isInBatch;
-(char)isInTransaction;
-(char)execute:(id)arg1 args:(_va_list_tag*)arg2 ;
-(id)fetch:(id)arg1 args:(_va_list_tag*)arg2 ;
-(id)fetchObjectOfClass:(Class)arg1 initializer:(SEL)arg2 sql:(id)arg3 ;
-(id)fetchObjectOfClass:(Class)arg1 sql:(id)arg2 args:(_va_list_tag*)arg3 ;
-(id)fetchObject:(/*^block*/id)arg1 sql:(id)arg2 args:(_va_list_tag*)arg3 ;
-(id)lockedHandler;
-(id)autoRollbackHandler;
-(id)sqliteErrorHandler;
-(id)preFlushHook;
-(id)postFlushHook;
-(char)isTraced;
-(char)crashIfUsedAfterClose;
-(NSObject*<OS_dispatch_queue>)serialQueue;
-(void)setLastError:(NSError *)arg1 ;
-(id)init;
-(void)dealloc;
-(void)flush;
-(id)description;
-(NSURL *)url;
-(void)setLabel:(NSString *)arg1 ;
-(char)close:(id*)arg1 ;
-(NSString *)label;
-(id)fetch:(id)arg1 ;
-(void)_resetState;
-(NSError *)lastError;
-(long long)changes;
-(char)execute:(id)arg1 ;
@end

