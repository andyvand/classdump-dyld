/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 3:34:36 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <CloudDocsDaemon/CloudDocsDaemon-Structs.h>
#import <CloudDocsDaemon/BRProtocol.h>
#import <CloudDocsDaemon/BRCProcessMonitorDelegate.h>

@class BRCAccountSession, NSString, NSCountedSet, NSSet, NSXPCConnection;

@interface BRCXPCClient : NSObject <BRProtocol, BRCProcessMonitorDelegate> {

	BRCAccountSession* _accountSession;
	char _dieOnInvalidate;
	char _isForeground;
	char _invalidated;
	char _entitlementsCached;
	char _isProxyEntitled;
	int _clientPid;
	NSString* _debugIdentifier;
	NSCountedSet* _containers;
	NSString* _applicationIdenfier;
	NSString* _defaultContainerID;
	NSSet* _entitledContainerIDs;
	char _isUsingUbiquity;
	NSXPCConnection* _connection;

}

@property (nonatomic,readonly) NSString * defaultContainerID; 
@property (nonatomic,readonly) NSSet * entitledContainerIDs; 
@property (nonatomic,readonly) NSString * bundleID; 
@property (assign,nonatomic) char isUsingUbiquity;                               //@synthesize isUsingUbiquity=_isUsingUbiquity - In the implementation block
@property (nonatomic,__weak,readonly) NSXPCConnection * connection;              //@synthesize connection=_connection - In the implementation block
@property (nonatomic,readonly) char dieOnInvalidate;                             //@synthesize dieOnInvalidate=_dieOnInvalidate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)addContainer:(id)arg1 ;
-(void)removeContainer:(id)arg1 ;
-(NSSet *)entitledContainerIDs;
-(id)initWithConnection:(id)arg1 accountSession:(id)arg2 ;
-(char)dieOnInvalidate;
-(void)_mutateToLoggedInClientWithSession:(id)arg1 ;
-(void)_stopMonitoringProcess;
-(void)process:(int)arg1 didBecomeForeground:(char)arg2 ;
-(void)_startMonitoringProcessIfNeeded;
-(unsigned long long)loggedStatus;
-(char)_hasPrivateIPCEntitlementForSelector:(SEL)arg1 error:(id*)arg2 ;
-(char)_isContainerAccessAllowed;
-(char)_hasAccessToContainerID:(id)arg1 error:(id*)arg2 ;
-(char)_canCreateContainerWithID:(id)arg1 error:(id*)arg2 ;
-(char)_isContainerProxyWithError:(id*)arg1 ;
-(void)accessLogicalOrPhysicalURL:(id)arg1 needsWrite:(char)arg2 asynchronously:(char)arg3 handler:(/*^block*/id)arg4 ;
-(char)_entitlementBooleanValueForKey:(id)arg1 ;
-(char)_cloudEnabledStatusForContainerIDs:(id)arg1 bundleID:(id)arg2 auditToken:(SCD_Struct_BR16)arg3 ;
-(char)_isContainerProxyEntitled;
-(char)cloudEnabledStatus;
-(id)_entitlementValueForKey:(id)arg1 ofClass:(Class)arg2 ;
-(char)canAccessPath:(const char*)arg1 needsWrite:(char)arg2 ;
-(char)isUsingUbiquity;
-(void)_startDownloadItemsAtURLs:(id)arg1 pos:(unsigned long long)arg2 options:(unsigned long long)arg3 error:(id)arg4 reply:(/*^block*/id)arg5 ;
-(id)setupContainer:(id)arg1 root:(id)arg2 error:(id*)arg3 ;
-(char)canAccessPhysicalURL:(id)arg1 ;
-(id)issueContainerExtensionForURL:(id)arg1 error:(id*)arg2 ;
-(char)cloudEnabledStatusForPID:(int)arg1 ;
-(void)__cacheEntitlements;
-(NSString *)defaultContainerID;
-(id)_containerIDsForPid:(int)arg1 ;
-(id)copyContainerIDsForPid:(int)arg1 error:(id*)arg2 ;
-(void)_addExternalDocumentReferenceTo:(id)arg1 underParent:(id)arg2 forceReparent:(char)arg3 reply:(/*^block*/id)arg4 ;
-(void)_setupContainerID:(id)arg1 andSendReply:(/*^block*/id)arg2 ;
-(id)_enabledBundleIDs;
-(char)_cloudSyncTCCDisabledForContainerMeta:(id)arg1 enabledBundleIDs:(id)arg2 ;
-(void)setIsUsingUbiquity:(char)arg1 ;
-(NSString *)bundleID;
-(char)isSandboxed;
-(void)currentAccountCopyTokenWithBundleID:(id)arg1 version:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)currentAccountCreateWithID:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)currentAccountLogoutWithReply:(/*^block*/id)arg1 ;
-(void)getContainersNeedingUpload:(/*^block*/id)arg1 ;
-(oneway void)updateContainerMetadataForID:(id)arg1 bundleID:(id)arg2 ;
-(void)getContainerURLForID:(id)arg1 forPid:(int)arg2 reply:(/*^block*/id)arg3 ;
-(void)getContainerURLForID:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)forceSyncContainerID:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getPublishedURLForItemAtURL:(id)arg1 forStreaming:(char)arg2 requestedTTL:(unsigned long long)arg3 reply:(/*^block*/id)arg4 ;
-(void)registerInitialSyncBarrierForID:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)evictItemAtURL:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)thumbnailChangedForItemAtURL:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)startDownloadItemsAtURLs:(id)arg1 options:(unsigned long long)arg2 reply:(/*^block*/id)arg3 ;
-(void)dumpDatabaseTo:(id)arg1 containerID:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)getAttributeValues:(id)arg1 forItemAtURL:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)getTotalApplicationDocumentUsageWithReply:(/*^block*/id)arg1 ;
-(void)getApplicationDocumentUsageInfoForBundleID:(id)arg1 withReply:(/*^block*/id)arg2 ;
-(void)addExternalDocumentReferenceTo:(id)arg1 forPid:(int)arg2 inContainer:(id)arg3 underParent:(id)arg4 reply:(/*^block*/id)arg5 ;
-(oneway void)bundleDidAccessExternalDocument:(id)arg1 ;
-(void)forceConflictForURL:(id)arg1 bookmarkData:(id)arg2 forcedEtag:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)setiWorkPublishingInfoAtURL:(id)arg1 publish:(char)arg2 readonly:(char)arg3 reply:(/*^block*/id)arg4 ;
-(void)getiWorkPublishingBadgingStatusAtURL:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getiWorkPublishingInfoAtURL:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)setMigrationStatus:(char)arg1 forDSID:(id)arg2 shouldNotify:(char)arg3 reply:(/*^block*/id)arg4 ;
-(void)getMigrationStatusForPrimaryiCloudAccount:(/*^block*/id)arg1 ;
-(void)getPrimaryiCloudAccountStatus:(/*^block*/id)arg1 ;
-(void)getTheoriticalContainerURLWithID:(id)arg1 forPID:(int)arg2 reply:(/*^block*/id)arg3 ;
-(void)getTheoriticalContainerURLWithID:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getApplicationStatusWithPID:(int)arg1 reply:(/*^block*/id)arg2 ;
-(void)getApplicationStatus:(/*^block*/id)arg1 ;
-(void)getNonLocalVersionSenderWithReceiver:(id)arg1 documentURL:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)getItemUpdateSenderWithReceiver:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getNotificationInfoAtURL:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)setupInstanceWithDict:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)resetBudgets:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)performSelfCheck:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)printStatus:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)gatherInformationForPath:(id)arg1 reply:(/*^block*/id)arg2 ;
-(oneway void)log:(const char*)arg1 function:(const char*)arg2 source:(const char*)arg3 line:(int)arg4 message:(id)arg5 ;
-(void)computePurgableSpaceWithUrgency:(int)arg1 reply:(/*^block*/id)arg2 ;
-(void)purgeAmount:(long long)arg1 withUrgency:(int)arg2 reply:(/*^block*/id)arg3 ;
-(void)reclaimAmount:(long long)arg1 withUrgency:(int)arg2 reply:(/*^block*/id)arg3 ;
-(void)waitForFileSystemChangeProcessingWithReply:(/*^block*/id)arg1 ;
-(void)getContainersByID:(/*^block*/id)arg1 ;
-(void)getContainerForURL:(id)arg1 reply:(/*^block*/id)arg2 ;
-(oneway void)checkinAskClientIfUsingUbiquity:(char)arg1 ;
-(void)deleteAllContentsOfContainerID:(id)arg1 onClient:(char)arg2 onServer:(char)arg3 reply:(/*^block*/id)arg4 ;
-(void)resolveConflictWithName:(id)arg1 atURL:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)currentAccountIsUsingUbiquityWithReply:(/*^block*/id)arg1 ;
-(void)jetsamCloudDocsAppsWithReply:(/*^block*/id)arg1 ;
-(void)getBookmarkDataForURL:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)resolveBookmarkDataToURL:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getBackReferencingContainerIDsForURL:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getContainerStatusWithID:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getContainerLastServerUpdateWithID:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)getIsContainerWithIDOverQuota:(id)arg1 reply:(/*^block*/id)arg2 ;
-(NSXPCConnection *)connection;
-(NSString *)description;
-(void)invalidate;
@end

