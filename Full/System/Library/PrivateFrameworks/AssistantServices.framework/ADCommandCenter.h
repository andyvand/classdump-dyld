/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 3:34:28 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <assistantd/assistantd-Structs.h>
#import <assistantd/ADSessionDelegate.h>
#import <assistantd/ADSyncManagerDelegate.h>
#import <assistantd/ADSpeechManagerDelegate.h>
#import <assistantd/ADHandsFreeStateChangedObserver.h>
#import <assistantd/ADContextManagerDelegate.h>
#import <assistantd/ADLocationManagerDelegate.h>

@protocol OS_dispatch_queue, ADCommandCenterClient, ADCommandCenterRequestDelegate, ADCommandCenterSpeechDelegate, OS_dispatch_source, SAServerBoundCommand, OS_dispatch_group;
@class NSObject, ADService, ADAccount, ADSession, ADSyncManager, ADSpeechManager, ADServiceManager, ADUndoManager, ADContextManager, ADManagedStore, ADRetryManager, ADCommandCallbacksManager, ADLocationManager, ADMotionManager, ADLocalDictationManager, ADCallObserver, NSMutableSet, AFSpeechRequestOptions, SASStartSpeech, NSMutableDictionary, ADRequestStatistics, NSString;

@interface ADCommandCenter : NSObject <ADSessionDelegate, ADSyncManagerDelegate, ADSpeechManagerDelegate, ADHandsFreeStateChangedObserver, ADContextManagerDelegate, ADLocationManagerDelegate> {

	NSObject*<OS_dispatch_queue> _queue;
	id<ADCommandCenterClient> _currentClient;
	id<ADCommandCenterRequestDelegate> _requestDelegate;
	id<ADCommandCenterSpeechDelegate> _speechDelegate;
	ADService* _uiService;
	ADAccount* _account;
	ADSession* _session;
	ADSyncManager* _syncManager;
	ADSpeechManager* _speechManager;
	ADServiceManager* _serviceManager;
	ADUndoManager* _undoManager;
	ADContextManager* _contextManager;
	ADManagedStore* _managedStore;
	ADRetryManager* _retryManager;
	ADCommandCallbacksManager* _callbacksManager;
	ADLocationManager* _locationManager;
	ADMotionManager* _motionManager;
	ADLocalDictationManager* _localDictationManager;
	ADCallObserver* _callObserver;
	int _callState;
	NSObject*<OS_dispatch_source> _callKeepAliveTimer;
	char _callIsLikely;
	/*^block*/id _speechCompletion;
	NSMutableSet* _outstandingSyncChunks;
	char _needsToSendSyncFinished;
	AFSpeechRequestOptions* _currentSpeechRequestOptions;
	SASStartSpeech* _startSpeechCommand;
	id<SAServerBoundCommand> _currentRequest;
	id<SAServerBoundCommand> _lastRequest;
	SCD_Struct_AD0 _contextFetchState;
	NSObject*<OS_dispatch_group> _contextDispatchGroup;
	NSMutableSet* _outstandingRequestIds;
	NSMutableDictionary* _aceCompletionMap;
	char _deviceIsLocked;
	double _requestEffectiveStartTime;
	char _isActive;
	char _hasIsActiveNotifyToken;
	int _isActiveNotifyToken;
	ADRequestStatistics* _requestStatistics;

}

@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> _queue;                                                        //@synthesize queue=_queue - In the implementation block
@property (setter=_setRequestDelegate:,nonatomic,retain) id<ADCommandCenterRequestDelegate> _requestDelegate;              //@synthesize requestDelegate=_requestDelegate - In the implementation block
@property (setter=_setSpeechDelegate:,nonatomic,retain) id<ADCommandCenterSpeechDelegate> _speechDelegate;                 //@synthesize speechDelegate=_speechDelegate - In the implementation block
@property (setter=_setUIService:,nonatomic,retain) ADService * _uiService;                                                 //@synthesize uiService=_uiService - In the implementation block
@property (setter=_setAccount:,nonatomic,retain) ADAccount * _account;                                                     //@synthesize account=_account - In the implementation block
@property (setter=_setSession:,nonatomic,retain) ADSession * _session;                                                     //@synthesize session=_session - In the implementation block
@property (setter=_setSpeechCompletion:,nonatomic,copy) id _speechCompletion;                                              //@synthesize speechCompletion=_speechCompletion - In the implementation block
@property (setter=_setStartSpeechCommand:,nonatomic,retain) SASStartSpeech * _startSpeechCommand;                          //@synthesize startSpeechCommand=_startSpeechCommand - In the implementation block
@property (getter=_requestStatistics,nonatomic,retain) ADRequestStatistics * requestStatistics;                            //@synthesize requestStatistics=_requestStatistics - In the implementation block
@property (setter=_setCurrentRequest:,nonatomic,retain) id<SAServerBoundCommand> _currentRequest;                          //@synthesize currentRequest=_currentRequest - In the implementation block
@property (setter=_setLastRequest:,nonatomic,retain) id<SAServerBoundCommand> _lastRequest;                                //@synthesize lastRequest=_lastRequest - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedCommandCenter;
+(id)sharedQueue;
-(void)destroyActiveAccount;
-(void)fetchActiveAccount:(/*^block*/id)arg1 ;
-(void)rescheduleValidationRefresh;
-(void)requestFactoryDictationModels;
-(void)refreshActivation;
-(void)refreshAssistantValidation;
-(void)syncAnchorKeys:(id)arg1 forceReset:(char)arg2 ;
-(void)openURL:(id)arg1 completion:(/*^block*/id)arg2 ;
-(char)isDeviceLocked;
-(id)_speechManager;
-(void)_startObservingCallState;
-(id)_motionManager;
-(void)_cancelSession;
-(id)_requestStatistics;
-(id)_serviceManager;
-(void)_setCurrentRequest:(id)arg1 ;
-(void)_setLastRequest:(id)arg1 ;
-(void)_setStartSpeechCommand:(id)arg1 ;
-(void)_cancelCurrentRequest;
-(void)_clearSpeechDelegateState;
-(void)_clearRequestDelegateState;
-(void)_setRequestDelegate:(id)arg1 ;
-(void)_requestWillStart;
-(void)_setSpeechDelegate:(id)arg1 ;
-(void)_setSpeechCompletion:(/*^block*/id)arg1 ;
-(id)_retryManager;
-(void)_addCompletion:(/*^block*/id)arg1 forCommandId:(id)arg2 ;
-(void)_sendCommandToServer:(id)arg1 ;
-(void)_addOutstandingRequestId:(id)arg1 ;
-(void)_sendRequestToServer:(id)arg1 ;
-(void)_retryNakedCommandsIfNeeded;
-(void)_sendRetryableRequestToServer:(id)arg1 ;
-(void)_sendRollbackCommandForCommand:(id)arg1 ;
-(void)_reallyHandleNewStartRequest:(id)arg1 ;
-(id)_callbacksManager;
-(id<SAServerBoundCommand>)_currentRequest;
-(void)_removeOutstandingRequestId:(id)arg1 ;
-(void)_handleNextCallbacksForReply:(id)arg1 ;
-(void)_sendCommandFailedForCommand:(id)arg1 reason:(id)arg2 ;
-(void)_sendUndoServiceCommands:(id)arg1 toService:(id)arg2 ;
-(void)_handleValidServiceReply:(id)arg1 forCommand:(id)arg2 ;
-(void)_handleServiceReply:(id)arg1 inverse:(id)arg2 error:(id)arg3 forCommand:(id)arg4 service:(id)arg5 ;
-(id)_syncManager;
-(char)_syncChunkWindowFull;
-(char)_isInCall;
-(void)_continueSyncIfConditionsMet;
-(void)_requestAnchorsForKeys:(id)arg1 ;
-(void)_cancelCallKeepAlive;
-(void)_scheduleCallKeepAlive;
-(void)_handleBareRequestCompleted:(id)arg1 ;
-(void)_removeOutstandingSyncChunkId:(id)arg1 ;
-(char)_refIdIsSpeechStart:(id)arg1 ;
-(id)_contextManager;
-(id)_locationManager;
-(char)_hasOutstandingRequestId:(id)arg1 ;
-(char)_hasOutstandingSyncChunkId:(id)arg1 ;
-(void)_processCallbacksForCommand:(id)arg1 ;
-(void)_handleServiceCommand:(id)arg1 ;
-(void)_invokeCompletionForCommand:(id)arg1 ;
-(void)_removeCompletionsForCommandId:(id)arg1 ;
-(void)_clearSyncChunks;
-(void)_invokeAllCompletions;
-(void)_removeAllCompletions;
-(char)_isRetryableSessionError:(id)arg1 ;
-(char)_shouldRetryForError:(id)arg1 ;
-(char)_shouldClearNakedCommandsOnError:(id)arg1 ;
-(void)_sessionDidFailWithError:(id)arg1 ;
-(SASStartSpeech *)_startSpeechCommand;
-(void)_addOutstandingSyncChunkId:(id)arg1 ;
-(void)_speechCaptureCompleted;
-(void)_sendCancelSpeechForCommand:(id)arg1 ;
-(void)_setOutputVoice:(id)arg1 ;
-(void)_replaceSpeechDelegateWhenReady:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)_replaceRequestDelegate:(id)arg1 ;
-(id)_managedStore;
-(void)_setContextWithBulletins:(id)arg1 ;
-(void)_handleNewStartRequest:(id)arg1 suppressCancelationAlertIfCapturingSpeech:(char)arg2 ;
-(void)_reallyHandleNewDirectActionRequest:(id)arg1 ;
-(id<SAServerBoundCommand>)_lastRequest;
-(void)_sendCommandToServer:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_clearAccount;
-(void)_endSessionForDelegate:(id)arg1 ;
-(void)_preheatWithRecordDeviceIdentifier:(id)arg1 ;
-(void)_setLanguageCode:(id)arg1 ;
-(void)_checkLanguageCode:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)_setLockState:(char)arg1 showingLockScreen:(char)arg2 ;
-(void)_startRequest:(id)arg1 withDelegate:(id)arg2 ;
-(void)_startDirectActionRequest:(id)arg1 withDelegate:(id)arg2 ;
-(void)_startSpeechRequestWithDelegate:(id)arg1 withOptions:(id)arg2 ;
-(void)_startSpeechRequestWithURL:(id)arg1 isNarrowBand:(char)arg2 withDelegate:(id)arg3 ;
-(void)_cancelRequestForDelegate:(id)arg1 ;
-(void)_rollbackRequestForDelegate:(id)arg1 ;
-(void)_startDictationWithLanguageCode:(id)arg1 options:(id)arg2 speechOptions:(id)arg3 delegate:(id)arg4 ;
-(void)_startDictationWithURL:(id)arg1 isNarrowBand:(char)arg2 language:(id)arg3 options:(id)arg4 delegate:(id)arg5 ;
-(void)_startSpeechCorrectionWithText:(id)arg1 forCorrectionContext:(id)arg2 delegate:(id)arg3 ;
-(void)_removeDelegate:(id)arg1 ;
-(void)_stopSpeechWithOptions:(id)arg1 forDelegate:(id)arg2 ;
-(void)_cancelSpeechForDelegate:(id)arg1 ;
-(void)_updateSpeechOptions:(id)arg1 forDelegate:(id)arg2 ;
-(void)_sendSpeechCorrectionInfo:(id)arg1 forCorrectionContext:(id)arg2 ;
-(void)_handleGenericAceCommand:(id)arg1 withDelegate:(id)arg2 interruptOutstandingRequest:(char)arg3 reply:(/*^block*/id)arg4 ;
-(void)_nakedClearContext;
-(void)_clearConversationAndSetApplicationContextWithBulletins:(id)arg1 ;
-(void)_fetchSupportedLanguagesWithCompletion:(/*^block*/id)arg1 ;
-(void)fetchSupportedLanguagesWithCompletion:(/*^block*/id)arg1 ;
-(void)_undoRequest;
-(void)_redoRequest;
-(void)_deleteAccountWithIdentifier:(id)arg1 ;
-(id)_activeAccountIdentifier;
-(void)_setActiveAccountIdentifier:(id)arg1 ;
-(void)_destroyActiveAccount;
-(void)_rescheduleValidationRefresh;
-(void)_refreshActivation;
-(id)_managedStoreObjectForKey:(id)arg1 ;
-(void)_setManagedStoreObject:(id)arg1 forKey:(id)arg2 ;
-(void)_syncAnchorKeys:(id)arg1 forceReset:(char)arg2 ;
-(void)_syncNeeded;
-(void)_setUIService:(id)arg1 ;
-(void)_startUpdatingMotionActivity;
-(void)_setAssistantActiveFlag:(char)arg1 ;
-(void)_stopUpdatingMotionActivity;
-(void)_syncIfNeeded;
-(id)_localDictationManager;
-(void)assistantSession:(id)arg1 receivedCommand:(id)arg2 ;
-(void)assistantSession:(id)arg1 receivedError:(id)arg2 ;
-(char)assistantSessionShouldLogVisibleRequestFailure:(id)arg1 forError:(id)arg2 ;
-(char)assistantSessionShouldRestartConnectionOnWiFi:(id)arg1 ;
-(void)assistantSessionConnectionDidReset:(id)arg1 ;
-(void)assistantSession:(id)arg1 didChangeRequestIdFrom:(id)arg2 toId:(id)arg3 ;
-(void)assistantSession:(id)arg1 didLoadAssistantSyncRequested:(char)arg2 syncAnchors:(id)arg3 ;
-(void)syncManager:(id)arg1 chunkForKey:(id)arg2 preAnchor:(id)arg3 postAnchor:(id)arg4 validity:(id)arg5 toAdd:(id)arg6 toRemove:(id)arg7 ;
-(void)syncManager:(id)arg1 finishedSyncForKeys:(id)arg2 ;
-(void)speechManagerWillStartRecording:(id)arg1 ;
-(void)speechManager:(id)arg1 didStartForDictation:(char)arg2 withCodec:(id)arg3 source:(id)arg4 ;
-(void)speechManager:(id)arg1 capturedPackets:(id)arg2 totalCount:(long long)arg3 ;
-(void)speechManager:(id)arg1 updatedAveragePower:(float)arg2 peakPower:(float)arg3 ;
-(void)speechManager:(id)arg1 finishedWithTotalPackets:(long long)arg2 endpointMode:(long long)arg3 ;
-(void)speechManagerDidCancel:(id)arg1 ;
-(void)speechManager:(id)arg1 didFailWithError:(id)arg2 ;
-(void)adShouldSpeakStateDidChange:(char)arg1 ;
-(void)contextManager:(id)arg1 didReceiveNewAlertContext:(id)arg2 ;
-(void)locationManager:(id)arg1 wantsToSetRequestOrigin:(id)arg2 ;
-(char)_hasOutstandingRequests;
-(void)_cancelSessionIfIdle;
-(void)_sendCommandIgnoredForCommand:(id)arg1 ;
-(void)_stopObserveringCallState;
-(void)_saRequestCompleted:(id)arg1 ;
-(void)_saSetSupportedLocales:(id)arg1 ;
-(void)_saCommandFailed:(id)arg1 ;
-(void)_saCommandIgnored:(id)arg1 ;
-(void)_saSendCommands:(id)arg1 ;
-(void)_saAssistantDestroyed:(id)arg1 ;
-(void)_saCancelSucceeded:(id)arg1 ;
-(void)_saRollbackSucceeded:(id)arg1 ;
-(void)_saSyncGetAnchorsResponse:(id)arg1 ;
-(void)_saSyncChunkDenied:(id)arg1 ;
-(void)_saSyncChunkAccepted:(id)arg1 ;
-(void)_sasSpeechRecognized:(id)arg1 ;
-(void)_sasSpeechFailure:(id)arg1 ;
-(void)_saAcknowledgeAlert:(id)arg1 ;
-(void)_saGetRequestOrigin:(id)arg1 ;
-(void)_saUnhandledObject:(id)arg1 ;
-(char)assistantSessionShouldSetAssistantData:(id)arg1 ;
-(char)locationManager:(id)arg1 shouldStartMonitoringLocationForRequest:(id)arg2 ;
-(void)_preheat;
-(void)checkLanguageCode:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)endSessionForDelegate:(id)arg1 ;
-(void)startRequest:(id)arg1 withDelegate:(id)arg2 ;
-(void)startDirectActionRequest:(id)arg1 withDelegate:(id)arg2 ;
-(void)startSpeechRequestWithDelegate:(id)arg1 withOptions:(id)arg2 ;
-(void)startSpeechRequestWithURL:(id)arg1 isNarrowBand:(char)arg2 withDelegate:(id)arg3 ;
-(void)cancelRequestForDelegate:(id)arg1 ;
-(void)rollbackRequestForDelegate:(id)arg1 ;
-(void)startDictationWithLanguageCode:(id)arg1 options:(id)arg2 speechOptions:(id)arg3 delegate:(id)arg4 ;
-(void)startDictationWithURL:(id)arg1 isNarrowBand:(char)arg2 language:(id)arg3 options:(id)arg4 delegate:(id)arg5 ;
-(void)startSpeechCorrectionWithText:(id)arg1 forCorrectionContext:(id)arg2 delegate:(id)arg3 ;
-(void)stopSpeechWithOptions:(id)arg1 forDelegate:(id)arg2 ;
-(void)cancelSpeechForDelegate:(id)arg1 ;
-(void)updateSpeechOptions:(id)arg1 forDelegate:(id)arg2 ;
-(void)handleGenericAceCommand:(id)arg1 withDelegate:(id)arg2 interruptOutstandingRequest:(char)arg3 reply:(/*^block*/id)arg4 ;
-(void)clearConversationAndSetApplicationContextWithBulletins:(id)arg1 ;
-(void)fetchSupportedLanguages;
-(void)fetchAccounts:(/*^block*/id)arg1 ;
-(void)fetchActiveAccountIdentifier:(/*^block*/id)arg1 ;
-(void)fetchManagedStoreObjectForKey:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)fetchContext:(/*^block*/id)arg1 ;
-(void)clientConnected:(id)arg1 ;
-(void)clientDisconnected:(id)arg1 ;
-(void)updateLocalDictationModelAvailabilityWithLanguageCode:(id)arg1 ;
-(id<ADCommandCenterRequestDelegate>)_requestDelegate;
-(id<ADCommandCenterSpeechDelegate>)_speechDelegate;
-(ADService *)_uiService;
-(id)_speechCompletion;
-(void)setRequestStatistics:(ADRequestStatistics *)arg1 ;
-(void)_broadcastCommand:(id)arg1 ;
-(void)_listInstalledServicesWithCompletion:(/*^block*/id)arg1 ;
-(void)_handleCommandInAMOS:(id)arg1 ;
-(char)_sendAMOSCommand:(id)arg1 domain:(id)arg2 toBundleWithIdentifier:(id)arg3 ;
-(void)_sendCreateResponseForCommand:(id)arg1 withIdentifier:(id)arg2 ;
-(char)_handleSADOCommandIfServiceDoesNotUseAMOS:(id)arg1 allowInterposing:(char)arg2 ;
-(void)_amosSADomainObjectCreate:(id)arg1 ;
-(void)_sendRetrieveResponseForCommand:(id)arg1 withSADObjects:(id)arg2 ;
-(void)_sendAMOSCommandToService:(id)arg1 responseHandler:(/*^block*/id)arg2 ;
-(void)_amosSADomainObjectRetrieve:(id)arg1 ;
-(void)_sendUpdateResponseForCommand:(id)arg1 withUpdatedIdentifier:(id)arg2 ;
-(void)_updateObjectFromService:(id)arg1 sadIdentifier:(id)arg2 ;
-(void)_amosSADomainObjectUpdate:(id)arg1 ;
-(void)_sendCancelResponseForCommand:(id)arg1 ;
-(void)_amosSADomainObjectCancel:(id)arg1 ;
-(void)_sendDeleteResponseForCommand:(id)arg1 ;
-(void)_amosSADomainObjectDelete:(id)arg1 ;
-(void)_sendCommitResponseForCommand:(id)arg1 identifier:(id)arg2 ;
-(void)_amosSADomainObjectCommit:(id)arg1 ;
-(void)_saDomainObjectCreate:(id)arg1 ;
-(void)_saDomainObjectRetrieve:(id)arg1 ;
-(void)_saDomainObjectUpdate:(id)arg1 ;
-(void)_saDomainObjectCancel:(id)arg1 ;
-(void)_saDomainObjectDelete:(id)arg1 ;
-(void)_saDomainObjectCommit:(id)arg1 ;
-(NSObject*<OS_dispatch_queue>)_queue;
-(void)removeDelegate:(id)arg1 ;
-(id)_undoManager;
-(void)setActiveAccountIdentifier:(id)arg1 ;
-(void)dismissAssistant;
-(id)_accounts;
-(void)_setAccount:(id)arg1 ;
-(ADAccount *)_account;
-(void)_clearContext;
-(void)_requestDidEnd;
-(void)preheat;
-(void)setLockState:(char)arg1 showingLockScreen:(char)arg2 ;
-(void)undoRequest;
-(void)redoRequest;
-(void)setManagedStoreObject:(id)arg1 forKey:(id)arg2 ;
-(void)_refreshAssistantValidation;
-(void)setOutputVoice:(id)arg1 ;
-(void)sendSpeechCorrectionInfo:(id)arg1 forCorrectionContext:(id)arg2 ;
-(void)preheatWithRecordDeviceIdentifier:(id)arg1 ;
-(void)deleteAccountWithIdentifier:(id)arg1 ;
-(void)_setSession:(id)arg1 ;
-(void)clearContext;
-(id)init;
-(void)dealloc;
-(void)_handleCommand:(id)arg1 ;
-(ADSession *)_session;
-(void)syncNeeded;
-(void)setLanguageCode:(id)arg1 ;
@end

