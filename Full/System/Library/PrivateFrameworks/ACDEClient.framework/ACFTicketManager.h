/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 3:34:23 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/ACDEClient.framework/ACDEClient
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <ACDEClient/ACDEClient-Structs.h>
#import <ACDEClient/ACFTicketManagerProtocol.h>

@class NSData, NSString;

@interface ACFTicketManager : NSObject <ACFTicketManagerProtocol> {

	NSData* _sessionRandomKey;
	NSData* _initializationVector;

}

@property (nonatomic,retain) NSData * sessionRandomKey;                  //@synthesize sessionRandomKey=_sessionRandomKey - In the implementation block
@property (nonatomic,retain) NSData * initializationVector;              //@synthesize initializationVector=_initializationVector - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)envelopForToken:(id)arg1 ;
-(char)installCertificateWithString:(id)arg1 version:(id)arg2 forRealm:(id)arg3 ;
-(id)publicKeyVersionForRealm:(id)arg1 ;
-(id)tokenVersion;
-(OpaqueSecKeyRefRef)publicKeyForRealm:(id)arg1 ;
-(OpaqueSecCertificateRefRef)defaultPublicKeyCertificateForRealm:(id)arg1 ;
-(id)defaultPublicKeyVersionForRealm:(id)arg1 ;
-(id)initialTokenWithRequest:(id)arg1 keyCode:(id)arg2 authenticationType:(int)arg3 ;
-(id)initialTokenWithRequest:(id)arg1 sessionToken:(id)arg2 ;
-(id)initialTokenNotTiedToSessionWithRequest:(id)arg1 ;
-(id)createSSOTokenWithTGT:(id)arg1 keyHMAC:(id)arg2 keyCode:(id)arg3 initialToken:(id)arg4 ;
-(id)serviceTicketStringWithRequest:(id)arg1 ssoToken:(id)arg2 ;
-(void)uninstallPublicKeyForRealm:(id)arg1 ;
-(id)changePasswordTokenWithRequest:(id)arg1 oldPassword:(id)arg2 newPassword:(id)arg3 ;
-(Class)initialTokenClass;
-(Class)ssoTokenClass;
-(void)setSessionRandomKey:(NSData *)arg1 ;
-(id)envelopForToken:(id)arg1 publicKey:(OpaqueSecKeyRefRef)arg2 ;
-(NSData *)sessionRandomKey;
-(id)encryptSourceTokenWithSourceTokenData:(id)arg1 encryptionKey:(id)arg2 initializationVector:(id)arg3 ;
-(id)envelopEncryptedSourceToken:(id)arg1 dsKeyVersion:(id)arg2 encryptedRandomKey:(id)arg3 initializationVector:(id)arg4 tokenDataHMAC:(id)arg5 tokenVersion:(id)arg6 ;
-(void)updateTokenEncryptionHash:(id)arg1 withKeyCode:(id)arg2 ;
-(id)tokenWithCreationDate:(id)arg1 nonce:(id)arg2 data:(id)arg3 keyCode:(id)arg4 randomKey:(id)arg5 initializationVector:(id)arg6 ;
-(id)serviceTicketPrefix;
-(NSData *)initializationVector;
-(void)setInitializationVector:(NSData *)arg1 ;
-(void)dealloc;
-(id)identifier;
@end

