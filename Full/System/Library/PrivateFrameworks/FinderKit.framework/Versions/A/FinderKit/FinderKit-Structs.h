/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 2:28:37 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /System/Library/PrivateFrameworks/FinderKit.framework/Versions/A/FinderKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@class FI_TTagOperationDelegate, FI_TAirDropDiscoveryController, FI_TAirDropLegacyModePopoverViewController, NSObject, NSIndexSet, NSArray, FI_TPopoverController, NSView, QLPreviewPanel, FI_TAirDropProgressLayer, NSDictionary, FI_TValidatingDateFormatter, FI_TFileSizeFormatter, FI_TFloatingInputView, NSFormatter, FI_IActionButtonCell, FI_TTitleField, NSMutableArray, FI_TShrinkToFitWindow, NSWindow, NSMutableDictionary, NSColor, FI_TTextWithTitleFieldImpl, <FIFinderSyncExtensionProtocol>, NSData, NSTimer, NSDate, NSDateComponents, NSVisualEffectView, FI_TUpdateLayerView, SFAirDropDiscoveryController, FIIconViewICloudSortViewController, <TStdAlertSheetClientProtocol>, FI_TBrowserViewDataSource, NSString, FI_TICloudNoDocumentsViewController, FI_TDelayedPopulationViewController, NSImageView, NSTrackingArea, FI_TLayer, FI_TIconView, NSMutableIndexSet, FI_TIconViewCellOffscreenRenderer, NSImage, FI_TColumnViewController, FI_TColumnPreviewController, FI_TIconViewSettings, FI_TListViewSettings, NSURL, FITopBarTitlebarAccessoryViewController, FI_NewFolderController, FI_TSidebarSplitView, FI_TQLPreviewViewZoomController, FI_TImageView, FI_IPropertyValueExtractor, NSFont, SFWirelessSettingsController, <FI_TAirDropNotAvailableDelegateProtocol>, FI_TListHeaderCellView, FIAirDropViewGutsController, FI_TInlineProgressBarLayer, FI_TInlineCancelButtonLayer, FI_TView, FI_TLayoutBinder, FI_TGradientSeparator, FI_TViewController, FI_TPopover, FI_TInlinePreviewData, NSOperationQueue, CALayer, TBackupContainerDelegate, FI_TNodeViewSettings, FI_TSplitView, FI_TDrawRectView, FI_TTagColumnTableViewController, FI_TBrowserBackgroundView, FI_TBrowserViewSwitchAnimator, FI_TWindowHistory, FIScrollViewMirrorView, FIMouseDownCanMoveWindowClipView, NSLayoutConstraint, FI_TTagEditorController, FI_TTextField, FI_TTaggingSuggestionsViewController, FI_TTagSuggestionsWindowController;

typedef struct TNSRef<FI_TTagOperationDelegate *> {
	FI_TTagOperationDelegate* fRef;
} TNSRef<FI_TTagOperationDelegate *>;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct TMutex {
	opaque_pthread_mutex_t fMutex;
} TMutex;

typedef struct opaque_pthread_cond_t {
	long long __sig;
	char __opaque[40];
} opaque_pthread_cond_t;

typedef struct TConditionVariable {
	opaque_pthread_cond_t fCondition;
} TConditionVariable;

typedef struct TriStateBool {
	int fState;
} TriStateBool;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > >;

typedef struct unordered_map<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > >, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > > {
	hash_table<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > > __table_;
} unordered_map<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > >, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > >;

typedef struct _hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> __node_;
} hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>;

typedef struct _hash_map_const_iterator<std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > {
	hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> __i_;
} hash_map_const_iterator<std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> >;

typedef struct _wrap_iter<const std::__1::pair<TFENode, TFENodePropertyList> *> {
	pair<TFENode, TFENodePropertyList> __i;
} wrap_iter<const std::__1::pair<TFENode, TFENodePropertyList> *>;

typedef struct TNSRef<FI_TAirDropDiscoveryController *> {
	FI_TAirDropDiscoveryController* fRef;
} TNSRef<FI_TAirDropDiscoveryController *>;

typedef struct TNSRef<FI_TAirDropLegacyModePopoverViewController *> {
	FI_TAirDropLegacyModePopoverViewController* fRef;
} TNSRef<FI_TAirDropLegacyModePopoverViewController *>;

typedef struct TNSRef<NSObject *> {
	NSObject* fRef;
} TNSRef<NSObject *>;

typedef struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > {
	__CFString fRef;
} TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> >;

typedef struct TString {
	TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > fString;
} TString;

typedef struct TNotificationCenterObserver {
	TNSRef<NSObject *> fFunctorGlue;
	TString fNotificationName;
	id fObject;
} TNotificationCenterObserver;

typedef struct TNSRef<NSIndexSet *> {
	NSIndexSet* fRef;
} TNSRef<NSIndexSet *>;

typedef struct TKeyValueObserver {
	NSObject* fObserver;
	NSObject* fObjectToObserve;
	NSArray* fArrayOfObjectsToObserve;
	TNSRef<NSIndexSet *> fIndexesOfObjectsToObserve;
	TString fKeyPathToObserve;
	void fContext;
} TKeyValueObserver;

typedef struct TNSRef<FI_TPopoverController *> {
	FI_TPopoverController* fRef;
} TNSRef<FI_TPopoverController *>;

typedef struct OpaqueOperationRef* OpaqueOperationRefRef;

typedef struct OperationMonitor {
	OpaqueMonitorData fMonitorData;
	unsigned char fCancelRequested;
	OperationStatus fStatus;
	unsigned fAccumulatedStatusMask;
	unsigned fStatusChangeInterval;
	DSSemaphore fRequestSemaphoreID;
	OpaqueEventQueue fQueue;
	/*function pointer*/void* fTickleProc;
	/*function pointer*/void* fUniqueNameProc;
} OperationMonitor;

typedef struct _compressed_pair<TOperationRecord *, std::__1::allocator<TOperationRecord> > {
	TOperationRecord __first_;
} compressed_pair<TOperationRecord *, std::__1::allocator<TOperationRecord> >;

typedef struct vector<TOperationRecord, std::__1::allocator<TOperationRecord> > {
	TOperationRecord __begin_;
	TOperationRecord __end_;
	compressed_pair<TOperationRecord *, std::__1::allocator<TOperationRecord> > __end_cap_;
} vector<TOperationRecord, std::__1::allocator<TOperationRecord> >;

typedef struct _compressed_pair<TFENode *, std::__1::allocator<TFENode> > {
	TFENode __first_;
} compressed_pair<TFENode *, std::__1::allocator<TFENode> >;

typedef struct TFENodeVector {
	TFENode __begin_;
	TFENode __end_;
	compressed_pair<TFENode *, std::__1::allocator<TFENode> > __end_cap_;
} TFENodeVector;

typedef struct OperationIterator {
	OpaqueOperationData fData;
	/*function pointer*/void* fFirstProc;
	/*function pointer*/void* fNextProc;
} OperationIterator;

typedef struct _wrap_iter<TOperationRecord *> {
	TOperationRecord __i;
} wrap_iter<TOperationRecord *>;

typedef struct HFSUniStr255 {
	unsigned short length;
	unsigned short unicode[255];
} HFSUniStr255;

typedef struct OperationStatus {
	unsigned fStage;
	HFSUniStr255 fCurrentName;
	long long fTimeEstimate;
	long long fItemsTotal;
	long long fItemsCompleted;
	long long fBytesTotal;
	long long fBytesCompleted;
	long long fFSItemsTotal;
	long long fFSItemsCompleted;
} OperationStatus;

typedef struct TNSRef<NSView *> {
	NSView* fRef;
} TNSRef<NSView *>;

typedef struct TFENode {
	OpaqueNodeRef fNodeRef;
} TFENode;

typedef const struct map<const TFENode, const TFENodeVector *const, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, const TFENodeVector *const> > >* map<const TFENode, const TFENodeVector *const, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, const TFENodeVector *const> > >Ref;

typedef const struct map<const TFENode, const std::__1::vector<std::__1::pair<TFENode, unsigned int>, std::__1::allocator<std::__1::pair<TFENode, unsigned int> > > *const, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, const std::__1::vector<std::__1::pair<TFENode, unsigned int>, std::__1::allocator<std::__1::pair<TFENode, unsigned int> > > *const> > >* map<const TFENode, const std::__1::vector<std::__1::pair<TFENode, unsigned int>, std::__1::allocator<std::__1::pair<TFENode, unsigned int> > > *const, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, const std::__1::vector<std::__1::pair<TFENode, unsigned int>, std::__1::allocator<std::__1::pair<TFENode, unsigned int> > > *const> > >Ref;

typedef struct TNSRef<QLPreviewPanel *> {
	QLPreviewPanel* fRef;
} TNSRef<QLPreviewPanel *>;

typedef struct TNSRef<FI_TAirDropProgressLayer *> {
	FI_TAirDropProgressLayer* fRef;
} TNSRef<FI_TAirDropProgressLayer *>;

typedef struct _NSZone* NSZoneRef;

typedef struct CGContext* CGContextRef;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct TNSRef<NSDictionary *> {
	NSDictionary* fRef;
} TNSRef<NSDictionary *>;

typedef struct TNSRef<FI_TValidatingDateFormatter *> {
	FI_TValidatingDateFormatter* fRef;
} TNSRef<FI_TValidatingDateFormatter *>;

typedef struct TNSRef<FI_TFileSizeFormatter *> {
	FI_TFileSizeFormatter* fRef;
} TNSRef<FI_TFileSizeFormatter *>;

typedef struct TNSRef<FI_TFloatingInputView *> {
	FI_TFloatingInputView* fRef;
} TNSRef<FI_TFloatingInputView *>;

typedef struct TNSRef<NSFormatter *> {
	NSFormatter* fRef;
} TNSRef<NSFormatter *>;

typedef struct TRef<OpaqueIconRef *, TRetainReleasePolicy<IconRef> > {
	OpaqueIconRef fRef;
} TRef<OpaqueIconRef *, TRetainReleasePolicy<IconRef> >;

typedef struct TIconRef {
	TRef<OpaqueIconRef *, TRetainReleasePolicy<IconRef> > fIconRef;
} TIconRef;

typedef struct TNSRef<FI_IActionButtonCell *> {
	FI_IActionButtonCell* fRef;
} TNSRef<FI_IActionButtonCell *>;

typedef struct TNSRef<FI_TTitleField *> {
	FI_TTitleField* fRef;
} TNSRef<FI_TTitleField *>;

typedef struct TNSRef<NSMutableArray *> {
	NSMutableArray* fRef;
} TNSRef<NSMutableArray *>;

typedef struct TNSRef<FI_TShrinkToFitWindow *> {
	FI_TShrinkToFitWindow* fRef;
} TNSRef<FI_TShrinkToFitWindow *>;

typedef struct TNSRef<NSWindow *> {
	NSWindow* fRef;
} TNSRef<NSWindow *>;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct TNSRef<NSMutableDictionary *> {
	NSMutableDictionary* fRef;
} TNSRef<NSMutableDictionary *>;

typedef struct TNSRef<NSColor *> {
	NSColor* fRef;
} TNSRef<NSColor *>;

typedef struct TNSRef<FI_TTextWithTitleFieldImpl *> {
	FI_TTextWithTitleFieldImpl* fRef;
} TNSRef<FI_TTextWithTitleFieldImpl *>;

typedef struct _compressed_pair<unsigned long, std::__1::less<TString> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<TString> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TString, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TString, void *> > >;

typedef struct _tree<TString, std::__1::less<TString>, std::__1::allocator<TString> > {
	__tree_node<TString, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TString, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<TString> > __pair3_;
} tree<TString, std::__1::less<TString>, std::__1::allocator<TString> >;

typedef struct set<TString, std::__1::less<TString>, std::__1::allocator<TString> > {
	tree<TString, std::__1::less<TString>, std::__1::allocator<TString> > __tree_;
} set<TString, std::__1::less<TString>, std::__1::allocator<TString> >;

typedef struct _compressed_pair<unsigned long, std::__1::less<UDefaults::RegistryID> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<UDefaults::RegistryID> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<UDefaults::RegistryID, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<UDefaults::RegistryID, void *> > >;

typedef struct _tree<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> > {
	__tree_node<UDefaults::RegistryID, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<UDefaults::RegistryID, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<UDefaults::RegistryID> > __pair3_;
} tree<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> >;

typedef struct set<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> > {
	tree<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> > __tree_;
} set<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> >;

typedef struct TNSRef<NSArray *> {
	NSArray* fRef;
} TNSRef<NSArray *>;

typedef struct _compressed_pair<char *, std::__1::allocator<char> > {
	char* __first_;
} compressed_pair<char *, std::__1::allocator<char> >;

typedef struct vector<char, std::__1::allocator<char> > {
	char* __begin_;
	char* __end_;
	compressed_pair<char *, std::__1::allocator<char> > __end_cap_;
} vector<char, std::__1::allocator<char> >;

typedef struct TNSRef<id<FIFinderSyncExtensionProtocol> > {
	<FIFinderSyncExtensionProtocol>* fRef;
} TNSRef<id<FIFinderSyncExtensionProtocol> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> > > >;

typedef struct unordered_map<TString, TNSRef<NSDictionary *>, std::__1::hash<TString>, std::__1::equal_to<TString>, std::__1::allocator<std::__1::pair<const TString, TNSRef<NSDictionary *> > > > {
	hash_table<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> > > > __table_;
} unordered_map<TString, TNSRef<NSDictionary *>, std::__1::hash<TString>, std::__1::equal_to<TString>, std::__1::allocator<std::__1::pair<const TString, TNSRef<NSDictionary *> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> {
	__hash_node<std::__1::__hash_value_type<TString, TString>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TString, TString>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TString, TString>, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TString> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TString, TString>, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TString> > >;

typedef struct unordered_map<TString, TString, std::__1::hash<TString>, std::__1::equal_to<TString>, std::__1::allocator<std::__1::pair<const TString, TString> > > {
	hash_table<std::__1::__hash_value_type<TString, TString>, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TString> > > __table_;
} unordered_map<TString, TString, std::__1::hash<TString>, std::__1::equal_to<TString>, std::__1::allocator<std::__1::pair<const TString, TString> > >;

typedef struct TNSRef<NSData *> {
	NSData* fRef;
} TNSRef<NSData *>;

typedef struct _compressed_pair<TNSRef<NSURL *> *, std::__1::allocator<TNSRef<NSURL *> > > {
	TNSRef<NSURL *> __first_;
} compressed_pair<TNSRef<NSURL *> *, std::__1::allocator<TNSRef<NSURL *> > >;

typedef struct vector<TNSRef<NSURL *>, std::__1::allocator<TNSRef<NSURL *> > > {
	TNSRef<NSURL *> __begin_;
	TNSRef<NSURL *> __end_;
	compressed_pair<TNSRef<NSURL *> *, std::__1::allocator<TNSRef<NSURL *> > > __end_cap_;
} vector<TNSRef<NSURL *>, std::__1::allocator<TNSRef<NSURL *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TString>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TString> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TString>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TString> > >;

typedef struct unordered_map<TFENode, TString, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TString> > > {
	hash_table<std::__1::__hash_value_type<TFENode, TString>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TString> > > __table_;
} unordered_map<TFENode, TString, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TString> > >;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct function<void ()> {
	type __buf_;
	__base<void ()> __f_;
} function<void ()>;

typedef struct TNSRef<NSTimer *> {
	NSTimer* fRef;
} TNSRef<NSTimer *>;

typedef struct TNSRef<NSDate *> {
	NSDate* fRef;
} TNSRef<NSDate *>;

typedef struct TNSRef<NSDateComponents *> {
	NSDateComponents* fRef;
} TNSRef<NSDateComponents *>;

typedef struct OpaqueLSSharedFileListItemRef* OpaqueLSSharedFileListItemRefRef;

typedef struct TKeyValueBinder {
	NSObject* fReceiverObj;
	TString fReceiversBinding;
} TKeyValueBinder;

typedef struct function<void (FIAirDropListViewCellView *)> {
	type __buf_;
	__base<void (FIAirDropListViewCellView *)> __f_;
} function<void (FIAirDropListViewCellView *)>;

typedef struct TNSRef<NSVisualEffectView *> {
	NSVisualEffectView* fRef;
} TNSRef<NSVisualEffectView *>;

typedef struct TNSRef<FI_TUpdateLayerView *> {
	FI_TUpdateLayerView* fRef;
} TNSRef<FI_TUpdateLayerView *>;

typedef struct TNSRef<SFAirDropDiscoveryController *> {
	SFAirDropDiscoveryController* fRef;
} TNSRef<SFAirDropDiscoveryController *>;

typedef struct TNSRef<FIIconViewICloudSortViewController *> {
	FIIconViewICloudSortViewController* fRef;
} TNSRef<FIIconViewICloudSortViewController *>;

typedef struct TNSRef<id<TStdAlertSheetClientProtocol> > {
	<TStdAlertSheetClientProtocol>* fRef;
} TNSRef<id<TStdAlertSheetClientProtocol> >;

typedef struct function<void (long)> {
	type __buf_;
	__base<void (long)> __f_;
} function<void (long)>;

typedef struct OpaqueNodeRef* OpaqueNodeRefRef;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> > > > {
	__tree_node<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> > > >;

typedef struct map<TFENode, TNSRef<FI_TContainerExtraData *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<FI_TContainerExtraData *> > > > {
	tree<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<FI_TContainerExtraData *> > > > __tree_;
} map<TFENode, TNSRef<FI_TContainerExtraData *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<FI_TContainerExtraData *> > > >;

typedef struct TRef<TBaseNodeComparator *, TRetainReleasePolicy<TBaseNodeComparator *> > {
	TBaseNodeComparator fRef;
} TRef<TBaseNodeComparator *, TRetainReleasePolicy<TBaseNodeComparator *> >;

typedef struct shared_ptr<TThumbnailExtractorController> {
	TThumbnailExtractorController __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<TThumbnailExtractorController>;

typedef struct TNSRef<FI_TBrowserViewDataSource *> {
	FI_TBrowserViewDataSource* fRef;
} TNSRef<FI_TBrowserViewDataSource *>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TFENode>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TFENode>, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, TFENode>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TFENode> > > {
	__tree_node<std::__1::__value_type<TFENode, TFENode>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TFENode>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TFENode>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TFENode> > >;

typedef struct map<TFENode, TFENode, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TFENode> > > {
	tree<std::__1::__value_type<TFENode, TFENode>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TFENode> > > __tree_;
} map<TFENode, TFENode, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TFENode> > >;

typedef struct TNSRef<NSString *> {
	NSString* fRef;
} TNSRef<NSString *>;

typedef struct TRef<TUndoableAction *, TRefCountedRetainReleasePolicy> {
	TUndoableAction fRef;
} TRef<TUndoableAction *, TRefCountedRetainReleasePolicy>;

typedef struct TNSRef<FI_TICloudNoDocumentsViewController *> {
	FI_TICloudNoDocumentsViewController* fRef;
} TNSRef<FI_TICloudNoDocumentsViewController *>;

typedef struct TNSRef<FI_TDelayedPopulationViewController *> {
	FI_TDelayedPopulationViewController* fRef;
} TNSRef<FI_TDelayedPopulationViewController *>;

typedef struct CGImage* CGImageRef;

typedef struct TNSRef<id> {
	id fRef;
} TNSRef<id>;

typedef struct TNSRef<NSImageView *> {
	NSImageView* fRef;
} TNSRef<NSImageView *>;

typedef struct _compressed_pair<unsigned long, std::__1::less<TFENode> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<TFENode> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TFENode, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TFENode, void *> > >;

typedef struct _tree<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> > {
	__tree_node<TFENode, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TFENode, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<TFENode> > __pair3_;
} tree<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> >;

typedef struct set<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> > {
	tree<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> > __tree_;
} set<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> >;

typedef struct _compressed_pair<std::__1::pair<TFENode, TFENode> *, std::__1::allocator<std::__1::pair<TFENode, TFENode> > > {
	pair<TFENode, TFENode> __first_;
} compressed_pair<std::__1::pair<TFENode, TFENode> *, std::__1::allocator<std::__1::pair<TFENode, TFENode> > >;

typedef struct vector<std::__1::pair<TFENode, TFENode>, std::__1::allocator<std::__1::pair<TFENode, TFENode> > > {
	pair<TFENode, TFENode> __begin_;
	pair<TFENode, TFENode> __end_;
	compressed_pair<std::__1::pair<TFENode, TFENode> *, std::__1::allocator<std::__1::pair<TFENode, TFENode> > > __end_cap_;
} vector<std::__1::pair<TFENode, TFENode>, std::__1::allocator<std::__1::pair<TFENode, TFENode> > >;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct TNSRef<NSTrackingArea *> {
	NSTrackingArea* fRef;
} TNSRef<NSTrackingArea *>;

typedef struct TNSRef<FI_TLayer *> {
	FI_TLayer* fRef;
} TNSRef<FI_TLayer *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> > > >;

typedef struct unordered_map<TFENode, TNSRef<FI_TInlineProgressHostLayer *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<FI_TInlineProgressHostLayer *> > > > {
	hash_table<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<FI_TInlineProgressHostLayer *> > > > __table_;
} unordered_map<TFENode, TNSRef<FI_TInlineProgressHostLayer *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<FI_TInlineProgressHostLayer *> > > >;

typedef struct TNSRef<FI_TIconView *> {
	FI_TIconView* fRef;
} TNSRef<FI_TIconView *>;

typedef struct _compressed_pair<DataBrowserItemSpatialData *, std::__1::allocator<DataBrowserItemSpatialData> > {
	DataBrowserItemSpatialData __first_;
} compressed_pair<DataBrowserItemSpatialData *, std::__1::allocator<DataBrowserItemSpatialData> >;

typedef struct vector<DataBrowserItemSpatialData, std::__1::allocator<DataBrowserItemSpatialData> > {
	DataBrowserItemSpatialData __begin_;
	DataBrowserItemSpatialData __end_;
	compressed_pair<DataBrowserItemSpatialData *, std::__1::allocator<DataBrowserItemSpatialData> > __end_cap_;
} vector<DataBrowserItemSpatialData, std::__1::allocator<DataBrowserItemSpatialData> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TFENode>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TFENode> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TFENode>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TFENode> > >;

typedef struct unordered_map<TFENode, TFENode, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TFENode> > > {
	hash_table<std::__1::__hash_value_type<TFENode, TFENode>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TFENode> > > __table_;
} unordered_map<TFENode, TFENode, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TFENode> > >;

typedef struct TNSRef<NSMutableIndexSet *> {
	NSMutableIndexSet* fRef;
} TNSRef<NSMutableIndexSet *>;

typedef struct TNSRef<FI_TIconViewCellOffscreenRenderer *> {
	FI_TIconViewCellOffscreenRenderer* fRef;
} TNSRef<FI_TIconViewCellOffscreenRenderer *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> > > >;

typedef struct unordered_map<TFENode, TNSRef<NSMutableDictionary *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<NSMutableDictionary *> > > > {
	hash_table<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> > > > __table_;
} unordered_map<TFENode, TNSRef<NSMutableDictionary *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<NSMutableDictionary *> > > >;

typedef struct TNSRef<NSImage *> {
	NSImage* fRef;
} TNSRef<NSImage *>;

typedef struct TNSRef<FI_TColumnViewController *> {
	FI_TColumnViewController* fRef;
} TNSRef<FI_TColumnViewController *>;

typedef struct TNSRef<FI_TColumnPreviewController *> {
	FI_TColumnPreviewController* fRef;
} TNSRef<FI_TColumnPreviewController *>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> > > > {
	__tree_node<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> > > >;

typedef struct TAliasesTargets {
	tree<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> > > > __tree_;
} TAliasesTargets;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<long, TFENode>, short> > > {
	__tree_node<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<long, TFENode>, short> > >;

typedef struct TColumnOptimizerContainers {
	tree<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<long, TFENode>, short> > > __tree_;
} TColumnOptimizerContainers;

typedef struct TNSRef<FI_TIconViewSettings *> {
	FI_TIconViewSettings* fRef;
} TNSRef<FI_TIconViewSettings *>;

typedef struct TNSRef<FI_TListViewSettings *> {
	FI_TListViewSettings* fRef;
} TNSRef<FI_TListViewSettings *>;

typedef struct function<void (NSNotification *)> {
	type __buf_;
	__base<void (NSNotification *)> __f_;
} function<void (NSNotification *)>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> > > > {
	__tree_node<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> > > >;

typedef struct map<TFENode, TNSRef<NSMutableDictionary *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<NSMutableDictionary *> > > > {
	tree<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> > > > __tree_;
} map<TFENode, TNSRef<NSMutableDictionary *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<NSMutableDictionary *> > > >;

typedef struct TSideLayoutBinding {
	TNSRef<NSView *> masterView;
	int kind;
	CGRect frame;
} TSideLayoutBinding;

typedef struct TLayoutBinding {
	TSideLayoutBinding top;
	TSideLayoutBinding left;
	TSideLayoutBinding bottom;
	TSideLayoutBinding right;
} TLayoutBinding;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, void *> > >;

typedef struct _tree<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true>, std::__1::allocator<std::__1::__value_type<TNSRef<NSView *>, unsigned long> > > {
	__tree_node<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true> > __pair3_;
} tree<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true>, std::__1::allocator<std::__1::__value_type<TNSRef<NSView *>, unsigned long> > >;

typedef struct map<TNSRef<NSView *>, unsigned long, std::__1::less<TNSRef<NSView *> >, std::__1::allocator<std::__1::pair<const TNSRef<NSView *>, unsigned long> > > {
	tree<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true>, std::__1::allocator<std::__1::__value_type<TNSRef<NSView *>, unsigned long> > > __tree_;
} map<TNSRef<NSView *>, unsigned long, std::__1::less<TNSRef<NSView *> >, std::__1::allocator<std::__1::pair<const TNSRef<NSView *>, unsigned long> > >;

typedef struct TNSRef<NSURL *> {
	NSURL* fRef;
} TNSRef<NSURL *>;

typedef struct TNSRef<FITopBarTitlebarAccessoryViewController *> {
	FITopBarTitlebarAccessoryViewController* fRef;
} TNSRef<FITopBarTitlebarAccessoryViewController *>;

typedef struct TNSRef<FI_NewFolderController *> {
	FI_NewFolderController* fRef;
} TNSRef<FI_NewFolderController *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<TNSRef<NSURL *>, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<TNSRef<NSURL *>, void *> > >;

typedef struct _list_node_base<TNSRef<NSURL *>, void *> {
	__list_node<TNSRef<NSURL *>, void *> __prev_;
	__list_node<TNSRef<NSURL *>, void *> __next_;
} list_node_base<TNSRef<NSURL *>, void *>;

typedef struct list<TNSRef<NSURL *>, std::__1::allocator<TNSRef<NSURL *> > > {
	list_node_base<TNSRef<NSURL *>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<TNSRef<NSURL *>, void *> > > __size_alloc_;
} list<TNSRef<NSURL *>, std::__1::allocator<TNSRef<NSURL *> > >;

typedef struct TNSRef<FI_TSidebarSplitView *> {
	FI_TSidebarSplitView* fRef;
} TNSRef<FI_TSidebarSplitView *>;

typedef struct TSidebarViewContainer* TSidebarViewContainerRef;

typedef struct function<void (const TFENode &)> {
	type __buf_;
	__base<void (const TFENode &)> __f_;
} function<void (const TFENode &)>;

typedef struct __CFString* CFStringRef;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TObserverStats>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TObserverStats>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TFENode, TCoalescedEvents *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TFENode, TCoalescedEvents *>, void *> > >;

typedef struct _tree<std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true>, std::__1::allocator<std::__1::__value_type<const TFENode, TCoalescedEvents *> > > {
	__tree_node<std::__1::__value_type<const TFENode, TCoalescedEvents *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TFENode, TCoalescedEvents *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true>, std::__1::allocator<std::__1::__value_type<const TFENode, TCoalescedEvents *> > >;

typedef struct map<const TFENode, TCoalescedEvents *, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TCoalescedEvents *> > > {
	tree<std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true>, std::__1::allocator<std::__1::__value_type<const TFENode, TCoalescedEvents *> > > __tree_;
} map<const TFENode, TCoalescedEvents *, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TCoalescedEvents *> > >;

typedef struct TNodeChangeNotifier {
	OpaqueEventNotifier fChangeNotifier;
} TNodeChangeNotifier;

typedef struct _tree<std::__1::__value_type<TFENode, TObserverStats>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TObserverStats> > > {
	__tree_node<std::__1::__value_type<TFENode, TObserverStats>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TObserverStats>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TObserverStats>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TObserverStats> > >;

typedef struct map<TFENode, TObserverStats, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TObserverStats> > > {
	tree<std::__1::__value_type<TFENode, TObserverStats>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TObserverStats> > > __tree_;
} map<TFENode, TObserverStats, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TObserverStats> > >;

typedef struct TInfoPreviewViewQTEjectHelper {
	/*function pointer*/void* _vptr$TNodeEventHandler;
	map<TFENode, TObserverStats, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TObserverStats> > > fObservedNodes;
	TNodeChangeNotifier fNodeChangeNotifier;
	BOOL fClearObserversOnNodeDeleted;
	TCoalescingNodeObserver fNextObserverToFlush;
	unsigned long long fNextFlushTime;
	unsigned long long fLastBusyTime;
	unsigned long long fMicrosecondsToCoalesce;
	map<const TFENode, TCoalescedEvents *, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TCoalescedEvents *> > > fCoalescedEventsMap;
	set<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> > fChildListChangesPending;
	BOOL fSupportsBulkEventHandling;
	TFENodeVector fPreviouslyPreviewedNodes;
	id fClient;
	BOOL fResettingTarget;
} TInfoPreviewViewQTEjectHelper;

typedef struct TNSRef<FI_TQLPreviewViewZoomController *> {
	FI_TQLPreviewViewZoomController* fRef;
} TNSRef<FI_TQLPreviewViewZoomController *>;

typedef struct TNSRef<FI_TImageView *> {
	FI_TImageView* fRef;
} TNSRef<FI_TImageView *>;

typedef struct _compressed_pair<TFormattedDateEntry *, std::__1::allocator<TFormattedDateEntry> > {
	TFormattedDateEntry __first_;
} compressed_pair<TFormattedDateEntry *, std::__1::allocator<TFormattedDateEntry> >;

typedef struct vector<TFormattedDateEntry, std::__1::allocator<TFormattedDateEntry> > {
	TFormattedDateEntry __begin_;
	TFormattedDateEntry __end_;
	compressed_pair<TFormattedDateEntry *, std::__1::allocator<TFormattedDateEntry> > __end_cap_;
} vector<TFormattedDateEntry, std::__1::allocator<TFormattedDateEntry> >;

typedef struct TNSRef<FI_IPropertyValueExtractor *> {
	FI_IPropertyValueExtractor* fRef;
} TNSRef<FI_IPropertyValueExtractor *>;

typedef struct _compressed_pair<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > *, std::__1::allocator<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > > > {
	pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > __first_;
} compressed_pair<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > *, std::__1::allocator<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > > >;

typedef struct vector<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> >, std::__1::allocator<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > > > {
	pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > __begin_;
	pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > __end_;
	compressed_pair<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > *, std::__1::allocator<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > > > __end_cap_;
} vector<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> >, std::__1::allocator<std::__1::pair<TNSRef<FI_TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<FI_TLayoutBinder *> > > >;

typedef struct TNSRef<NSFont *> {
	NSFont* fRef;
} TNSRef<NSFont *>;

typedef struct TNSRef<SFWirelessSettingsController *> {
	SFWirelessSettingsController* fRef;
} TNSRef<SFWirelessSettingsController *>;

typedef struct TNSRef<id<FI_TAirDropNotAvailableDelegateProtocol> > {
	<FI_TAirDropNotAvailableDelegateProtocol>* fRef;
} TNSRef<id<FI_TAirDropNotAvailableDelegateProtocol> >;

typedef struct TRecursiveMutex {
	opaque_pthread_mutex_t fMutex;
} TRecursiveMutex;

typedef struct _compressed_pair<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > *, std::__1::allocator<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > > > {
	unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > __first_;
} compressed_pair<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > *, std::__1::allocator<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > > >;

typedef struct vector<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> >, std::__1::allocator<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > > > {
	unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > __begin_;
	unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > __end_;
	compressed_pair<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > *, std::__1::allocator<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > > > __end_cap_;
} vector<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> >, std::__1::allocator<std::__1::unique_ptr<TAirDropSenderOperationController, std::__1::default_delete<TAirDropSenderOperationController> > > >;

typedef struct TNSRef<FI_TListHeaderCellView *> {
	FI_TListHeaderCellView* fRef;
} TNSRef<FI_TListHeaderCellView *>;

typedef struct TNSRef<FIAirDropViewGutsController *> {
	FIAirDropViewGutsController* fRef;
} TNSRef<FIAirDropViewGutsController *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TProgressState> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TProgressState> > >;

typedef struct unordered_map<TFENode, TProgressState, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TProgressState> > > {
	hash_table<std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TProgressState> > > __table_;
} unordered_map<TFENode, TProgressState, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TProgressState> > >;

typedef struct TNSRef<FI_TInlineProgressBarLayer *> {
	FI_TInlineProgressBarLayer* fRef;
} TNSRef<FI_TInlineProgressBarLayer *>;

typedef struct TNSRef<FI_TInlineCancelButtonLayer *> {
	FI_TInlineCancelButtonLayer* fRef;
} TNSRef<FI_TInlineCancelButtonLayer *>;

typedef struct TNSRef<FI_TView *> {
	FI_TView* fRef;
} TNSRef<FI_TView *>;

typedef struct TNSRef<FI_TLayoutBinder *> {
	FI_TLayoutBinder* fRef;
} TNSRef<FI_TLayoutBinder *>;

typedef struct TNSRef<FI_TGradientSeparator *> {
	FI_TGradientSeparator* fRef;
} TNSRef<FI_TGradientSeparator *>;

typedef struct TNSRef<FI_TViewController *> {
	FI_TViewController* fRef;
} TNSRef<FI_TViewController *>;

typedef struct TNSRef<FI_TPopover *> {
	FI_TPopover* fRef;
} TNSRef<FI_TPopover *>;

typedef struct TNSRef<FI_TInlinePreviewData *> {
	FI_TInlinePreviewData* fRef;
} TNSRef<FI_TInlinePreviewData *>;

typedef struct TNSRef<NSOperationQueue *> {
	NSOperationQueue* fRef;
} TNSRef<NSOperationQueue *>;

typedef struct TRef<CGImage *, TRetainReleasePolicy<CGImageRef> > {
	CGImage fRef;
} TRef<CGImage *, TRetainReleasePolicy<CGImageRef> >;

typedef struct TNSRef<CALayer *> {
	CALayer* fRef;
} TNSRef<CALayer *>;

typedef struct TNSRef<TBackupContainerDelegate *> {
	TBackupContainerDelegate* fRef;
} TNSRef<TBackupContainerDelegate *>;

typedef struct TNSRef<FI_TNodeViewSettings *> {
	FI_TNodeViewSettings* fRef;
} TNSRef<FI_TNodeViewSettings *>;

typedef struct TNSRef<FI_TSplitView *> {
	FI_TSplitView* fRef;
} TNSRef<FI_TSplitView *>;

typedef struct TNSRef<FI_TDrawRectView *> {
	FI_TDrawRectView* fRef;
} TNSRef<FI_TDrawRectView *>;

typedef struct TNSRef<FI_TTagColumnTableViewController *> {
	FI_TTagColumnTableViewController* fRef;
} TNSRef<FI_TTagColumnTableViewController *>;

typedef struct TNSRef<FI_TBrowserBackgroundView *> {
	FI_TBrowserBackgroundView* fRef;
} TNSRef<FI_TBrowserBackgroundView *>;

typedef struct TNSRef<FI_TBrowserViewSwitchAnimator *> {
	FI_TBrowserViewSwitchAnimator* fRef;
} TNSRef<FI_TBrowserViewSwitchAnimator *>;

typedef struct TNSRef<FI_TWindowHistory *> {
	FI_TWindowHistory* fRef;
} TNSRef<FI_TWindowHistory *>;

typedef struct TTimeMachineTarget* TTimeMachineTargetRef;

typedef struct TNSRef<FIScrollViewMirrorView *> {
	FIScrollViewMirrorView* fRef;
} TNSRef<FIScrollViewMirrorView *>;

typedef struct _compressed_pair<TNSRef<FIScrollViewMirrorView *> *, std::__1::allocator<TNSRef<FIScrollViewMirrorView *> > > {
	TNSRef<FIScrollViewMirrorView *> __first_;
} compressed_pair<TNSRef<FIScrollViewMirrorView *> *, std::__1::allocator<TNSRef<FIScrollViewMirrorView *> > >;

typedef struct vector<TNSRef<FIScrollViewMirrorView *>, std::__1::allocator<TNSRef<FIScrollViewMirrorView *> > > {
	TNSRef<FIScrollViewMirrorView *> __begin_;
	TNSRef<FIScrollViewMirrorView *> __end_;
	compressed_pair<TNSRef<FIScrollViewMirrorView *> *, std::__1::allocator<TNSRef<FIScrollViewMirrorView *> > > __end_cap_;
} vector<TNSRef<FIScrollViewMirrorView *>, std::__1::allocator<TNSRef<FIScrollViewMirrorView *> > >;

typedef struct TNSRef<FIMouseDownCanMoveWindowClipView *> {
	FIMouseDownCanMoveWindowClipView* fRef;
} TNSRef<FIMouseDownCanMoveWindowClipView *>;

typedef struct TNSRef<NSLayoutConstraint *> {
	NSLayoutConstraint* fRef;
} TNSRef<NSLayoutConstraint *>;

typedef struct TRef<__CFMachPort *, TRetainReleasePolicy<CFMachPortRef> > {
	__CFMachPort fRef;
} TRef<__CFMachPort *, TRetainReleasePolicy<CFMachPortRef> >;

typedef struct TRef<__CFRunLoopSource *, TRetainReleasePolicy<CFRunLoopSourceRef> > {
	__CFRunLoopSource fRef;
} TRef<__CFRunLoopSource *, TRetainReleasePolicy<CFRunLoopSourceRef> >;

typedef struct _compressed_pair<TTypedData *, std::__1::allocator<TTypedData> > {
	TTypedData __first_;
} compressed_pair<TTypedData *, std::__1::allocator<TTypedData> >;

typedef struct vector<TTypedData, std::__1::allocator<TTypedData> > {
	TTypedData __begin_;
	TTypedData __end_;
	compressed_pair<TTypedData *, std::__1::allocator<TTypedData> > __end_cap_;
} vector<TTypedData, std::__1::allocator<TTypedData> >;

typedef struct function<void (const TFENodeVector &, const TError &)> {
	type __buf_;
	__base<void (const TFENodeVector &, const TError &)> __f_;
} function<void (const TFENodeVector &, const TError &)>;

typedef struct _compressed_pair<TString *, std::__1::allocator<TString> > {
	TString __first_;
} compressed_pair<TString *, std::__1::allocator<TString> >;

typedef struct TStringVector {
	TString __begin_;
	TString __end_;
	compressed_pair<TString *, std::__1::allocator<TString> > __end_cap_;
} TStringVector;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true>, std::__1::allocator<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true>, std::__1::allocator<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > >;

typedef struct unordered_map<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> >, TStringCaseInsensitiveHash, TStringCaseInsensitiveCompare, std::__1::allocator<std::__1::pair<const TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > > {
	hash_table<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true>, std::__1::allocator<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > > __table_;
} unordered_map<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> >, TStringCaseInsensitiveHash, TStringCaseInsensitiveCompare, std::__1::allocator<std::__1::pair<const TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > >;

typedef struct TNSRef<FI_TTagEditorController *> {
	FI_TTagEditorController* fRef;
} TNSRef<FI_TTagEditorController *>;

typedef struct TNSRef<FI_TTextField *> {
	FI_TTextField* fRef;
} TNSRef<FI_TTextField *>;

typedef struct TNSRef<FI_TTaggingSuggestionsViewController *> {
	FI_TTaggingSuggestionsViewController* fRef;
} TNSRef<FI_TTaggingSuggestionsViewController *>;

typedef struct TNSRef<FI_TTagSuggestionsWindowController *> {
	FI_TTagSuggestionsWindowController* fRef;
} TNSRef<FI_TTagSuggestionsWindowController *>;

typedef struct opaque_pthread_rwlock_t {
	long long __sig;
	char __opaque[192];
} opaque_pthread_rwlock_t;

typedef struct TReadWriteLock {
	opaque_pthread_rwlock_t fRWLock;
} TReadWriteLock;

