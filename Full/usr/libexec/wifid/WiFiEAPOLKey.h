/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:05:19 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /usr/libexec/wifid
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <wifid/WiFiEAPOLFrame.h>

@class NSData, NSMutableData, NSMutableArray;

@interface WiFiEAPOLKey : WiFiEAPOLFrame {

	unsigned char descriptorType;
	unsigned short keyInformation;
	unsigned char descriptorVersion;
	char isPTK;
	char isInstall;
	char isKeyAck;
	char isKeyMIC;
	char isSecure;
	char isError;
	char isRequest;
	char isEncryptedKeyData;
	char isSMKMessage;
	unsigned char groupKeyIndex;
	unsigned short keyLength;
	unsigned long long keyReplayCounter;
	NSData* keyNonce;
	NSData* eapolKeyIV;
	NSData* keyRSC;
	NSData* keyMIC;
	NSMutableData* keyData;
	NSMutableArray* kdeArray;
	NSData* rsnIE;
	unsigned long long kdeGTKKeyID;
	char kdeGTKIsTx;
	NSData* kdeGTK;
	NSData* kdeMAC;
	NSData* kdePMKID;
	NSData* kdeSMK;
	NSData* kdeSMKKeyNonce;
	NSData* kdeKeyNonce;
	unsigned long long kdeKeyLifetime;
	unsigned long long kdeMUI;
	unsigned long long kdeErrorType;

}

@property (assign,nonatomic) unsigned char descriptorType; 
@property (assign,nonatomic) unsigned short keyInformation; 
@property (assign,nonatomic) unsigned char descriptorVersion; 
@property (assign,nonatomic) char isPTK; 
@property (assign,nonatomic) char isInstall; 
@property (assign,nonatomic) char isKeyAck; 
@property (assign,nonatomic) char isKeyMIC; 
@property (assign,nonatomic) char isSecure; 
@property (assign,nonatomic) char isError; 
@property (assign,nonatomic) char isRequest; 
@property (assign,nonatomic) char isEncryptedKeyData; 
@property (assign,nonatomic) char isSMKMessage; 
@property (assign,nonatomic) unsigned char groupKeyIndex; 
@property (assign,nonatomic) unsigned short keyLength; 
@property (assign,nonatomic) unsigned long long keyReplayCounter; 
@property (nonatomic,retain) NSData * keyNonce; 
@property (nonatomic,retain) NSData * eapolKeyIV; 
@property (nonatomic,retain) NSData * keyRSC; 
@property (nonatomic,retain) NSData * keyMIC; 
@property (nonatomic,retain) NSMutableData * keyData; 
@property (nonatomic,retain) NSMutableArray * kdeArray; 
@property (nonatomic,retain) NSData * rsnIE; 
@property (assign,nonatomic) unsigned long long kdeGTKKeyID; 
@property (assign,nonatomic) char kdeGTKIsTx; 
@property (nonatomic,retain) NSData * kdeGTK; 
@property (nonatomic,retain) NSData * kdeMAC; 
@property (nonatomic,retain) NSData * kdePMKID; 
@property (nonatomic,retain) NSData * kdeSMK; 
@property (nonatomic,retain) NSData * kdeSMKKeyNonce; 
@property (nonatomic,retain) NSData * kdeKeyNonce; 
@property (assign,nonatomic) unsigned long long kdeKeyLifetime; 
@property (assign,nonatomic) unsigned long long kdeMUI; 
@property (assign,nonatomic) unsigned long long kdeErrorType; 
-(void)setKeyData:(NSMutableData *)arg1 ;
-(id)initWithEAPOLFrame:(id)arg1 ;
-(unsigned long long)keyReplayCounter;
-(id)initWithDA:(id)arg1 withSA:(id)arg2 ;
-(void)setDescriptorType:(unsigned char)arg1 ;
-(void)setDescriptorVersion:(unsigned char)arg1 ;
-(void)setIsPTK:(char)arg1 ;
-(void)setIsInstall:(char)arg1 ;
-(void)setIsKeyAck:(char)arg1 ;
-(void)setIsKeyMIC:(char)arg1 ;
-(void)setIsSecure:(char)arg1 ;
-(void)setIsError:(char)arg1 ;
-(void)setIsRequest:(char)arg1 ;
-(void)setIsEncryptedKeyData:(char)arg1 ;
-(void)setIsSMKMessage:(char)arg1 ;
-(void)setKeyLength:(unsigned short)arg1 ;
-(void)setKeyReplayCounter:(unsigned long long)arg1 ;
-(void)setKeyNonce:(NSData *)arg1 ;
-(char)composePacketWithPTK:(id)arg1 error:(id*)arg2 ;
-(unsigned char)descriptorVersion;
-(char)isPTK;
-(char)isSMKMessage;
-(char)isInstall;
-(char)isKeyAck;
-(char)isKeyMIC;
-(char)isError;
-(char)isRequest;
-(char)isEncryptedKeyData;
-(NSData *)keyNonce;
-(char)verifyMICWithPTK:(id)arg1 ;
-(void)parseKeyData:(id)arg1 ;
-(void)setEapolKeyIV:(NSData *)arg1 ;
-(void)setKeyRSC:(NSData *)arg1 ;
-(void)setRsnIE:(NSData *)arg1 ;
-(void)setKdeGTKKeyID:(unsigned long long)arg1 ;
-(void)setKdeGTK:(NSData *)arg1 ;
-(char)calculateMICWithPTK:(id)arg1 error:(id*)arg2 ;
-(void)setGroupKeyIndex:(unsigned char)arg1 ;
-(unsigned short)keyLength;
-(NSData *)kdeGTK;
-(NSData *)keyRSC;
-(unsigned long long)kdeGTKKeyID;
-(char)kdeGTKIsTx;
-(void)parsePacketPayload;
-(void)parseKeyInformation;
-(id)decryptKeyDataWithPTK:(id)arg1 ;
-(void)parseKeyDataElement:(id)arg1 ;
-(void)parseKeyDataElementGTK:(id)arg1 ;
-(void)parseKeyDataElementMAC:(id)arg1 ;
-(void)parseKeyDataElementPMKID:(id)arg1 ;
-(void)parseKeyDataElementSMK:(id)arg1 ;
-(void)parseKeyDataElementNonce:(id)arg1 ;
-(void)parseKeyDataElementLifetime:(id)arg1 ;
-(void)parseKeyDataElementError:(id)arg1 ;
-(void)appendKeyDataElementGTK;
-(id)encryptKeyDataWithPTK:(id)arg1 ;
-(id)encryptKeyDataMD5ARC4:(id)arg1 ;
-(id)encryptKeyDataSHA1AES:(id)arg1 ;
-(id)decryptKeyDataMD5ARC4:(id)arg1 ;
-(id)decryptKeyDataSHA1AES:(id)arg1 ;
-(void)setMIC:(id)arg1 ;
-(unsigned short)keyInformation;
-(void)setKeyInformation:(unsigned short)arg1 ;
-(unsigned char)groupKeyIndex;
-(NSData *)eapolKeyIV;
-(NSData *)keyMIC;
-(void)setKeyMIC:(NSData *)arg1 ;
-(NSMutableArray *)kdeArray;
-(void)setKdeArray:(NSMutableArray *)arg1 ;
-(void)setKdeGTKIsTx:(char)arg1 ;
-(NSData *)kdeMAC;
-(void)setKdeMAC:(NSData *)arg1 ;
-(NSData *)kdePMKID;
-(void)setKdePMKID:(NSData *)arg1 ;
-(NSData *)kdeSMK;
-(void)setKdeSMK:(NSData *)arg1 ;
-(NSData *)kdeSMKKeyNonce;
-(void)setKdeSMKKeyNonce:(NSData *)arg1 ;
-(NSData *)kdeKeyNonce;
-(void)setKdeKeyNonce:(NSData *)arg1 ;
-(unsigned long long)kdeKeyLifetime;
-(void)setKdeKeyLifetime:(unsigned long long)arg1 ;
-(unsigned long long)kdeMUI;
-(void)setKdeMUI:(unsigned long long)arg1 ;
-(unsigned long long)kdeErrorType;
-(void)setKdeErrorType:(unsigned long long)arg1 ;
-(NSMutableData *)keyData;
-(NSData *)rsnIE;
-(char)isSecure;
-(id)init;
-(void)dealloc;
-(id)description;
-(unsigned char)descriptorType;
@end

