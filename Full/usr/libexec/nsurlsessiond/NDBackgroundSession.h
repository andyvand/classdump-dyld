/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:05:16 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /usr/libexec/nsurlsessiond
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <nsurlsessiond/nsurlsessiond-Structs.h>
#import <nsurlsessiond/NDBackgroundSessionProtocol.h>
#import <nsurlsessiond/NDCallbackQueueDelegate.h>
#import <nsurlsessiond/NSURLSessionDataDelegate_Internal.h>
#import <nsurlsessiond/NSURLSessionDownloadDelegate.h>
#import <nsurlsessiond/NSURLSessionTaskDelegatePrivate.h>
#import <nsurlsessiond/NSURLSessionDownloadDelegate_Private.h>
#import <nsurlsessiond/NSURLSessionDelegate_Internal.h>
#import <nsurlsessiond/NDCredentialStorageDelegate.h>

@protocol OS_dispatch_queue, NSXPCProxyCreatingNDBackgroundSessionClient, NDBackgroundSessionDelegate;
@class NSURLSession, NDCredentialStorage, NSObject, NDApplication, NSMutableDictionary, NSMutableArray, NSURL, NSXPCConnection, NDCallbackQueue, NSString;

@interface NDBackgroundSession : NSObject <NDBackgroundSessionProtocol, NDCallbackQueueDelegate, NSURLSessionDataDelegate_Internal, NSURLSessionDownloadDelegate, NSURLSessionTaskDelegatePrivate, NSURLSessionDownloadDelegate_Private, NSURLSessionDelegate_Internal, NDCredentialStorageDelegate> {

	NSURLSession* _userInitiatedSession;
	NSURLSession* _discretionaryPrioritySession;
	NDCredentialStorage* _credentialStorage;
	NSObject*<OS_dispatch_queue> _archiveQueue;
	NDApplication* _clientApplication;
	NDApplication* _connectedExtension;
	NSMutableDictionary* _tasksToIdentifiers;
	NSMutableDictionary* _identifiersToTasks;
	NSMutableDictionary* _identifiersToMonitors;
	NSMutableDictionary* _identifiersToStreams;
	NSMutableDictionary* _identifiersToStreamQueues;
	NSMutableArray* _outstandingTaskIDs;
	double _lastArchiveTime;
	NSURL* _sessionDirectory;
	NSURL* _downloadDirectory;
	NSURL* _uploadsDirectory;
	char _performsEVCertCheck;
	char _clientImplementsWillSendRequest;
	char _clientImplementsSessionChallenge;
	char _clientImplementsTaskChallenge;
	char _sendsLaunchEvents;
	char _discretionary;
	char _obliterated;
	char _cleanedUp;
	char _hasBeenSignalledToDeliverPendingEvents;
	char _infersDiscretionary;
	char _shouldPullInitialCredentials;
	/*^block*/id _completeReconnectionBlock;
	int _clientPID;
	NSXPCConnection* _xpcConn;
	char _retryDataTasks;
	NSObject*<OS_dispatch_queue> _workQueue;
	NDCallbackQueue* _callbackQueue;
	NDApplication* _monitoredApplication;
	NSMutableDictionary* _identifiersToTaskInfo;
	id<NSXPCProxyCreating><NDBackgroundSessionClient> _clientProxy;
	id<NDBackgroundSessionDelegate> _delegate;
	NSString* _identifier;
	NSString* _clientBundleID;
	NSString* _monitoredAppBundleID;
	NSString* _secondaryID;
	/*^block*/id _invalidateReply;
	NSString* _sharedContainerIdentifier;

}

@property (__weak) id<NDBackgroundSessionDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (readonly) NSString * identifier;                               //@synthesize identifier=_identifier - In the implementation block
@property (readonly) NSString * clientBundleID;                           //@synthesize clientBundleID=_clientBundleID - In the implementation block
@property (readonly) NSString * monitoredAppBundleID;                     //@synthesize monitoredAppBundleID=_monitoredAppBundleID - In the implementation block
@property (readonly) NSString * secondaryID;                              //@synthesize secondaryID=_secondaryID - In the implementation block
@property (copy) id invalidateReply;                                      //@synthesize invalidateReply=_invalidateReply - In the implementation block
@property (copy) NSString * sharedContainerIdentifier;                    //@synthesize sharedContainerIdentifier=_sharedContainerIdentifier - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)initWithConfiguration:(id)arg1 bundleID:(id)arg2 isSpringBoardApp:(char)arg3 downloadDirectory:(id)arg4 options:(id)arg5 clientProxy:(id)arg6 delegate:(id)arg7 workQueue:(id)arg8 archiveQueue:(id)arg9 ;
-(id)restoreTasks:(char*)arg1 ;
-(char)hasConnectedClient;
-(id)getTasksForReconnection;
-(void)setXPCConnection:(id)arg1 ;
-(void)reconnectClient:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)obliterate;
-(void)clientApplicationWasReinstalled;
-(double)defaultWindowDurationForResourceTimeout:(double)arg1 ;
-(id)setupDownloadDirectory;
-(id)configurationWithClientConfiguration:(id)arg1 discretionary:(char)arg2 ;
-(void)clientDidDisconnect;
-(void)archiveTaskInfo;
-(void)cleanupSessionWithCompletionHandler:(/*^block*/id)arg1 ;
-(id)tasksArchivePath;
-(char)currentDiscretionaryStatus;
-(long long)priorityForDiscretionaryStatus:(char)arg1 ;
-(void)removeDownloadFileForTaskInfo:(id)arg1 ;
-(void)adjustDiscretionaryStatusForTaskInfo:(id)arg1 ;
-(id)requestWithAdjustedWindowForTaskInfo:(id)arg1 ;
-(id)sessionForDiscretionaryStatus:(char)arg1 ;
-(void)initializeTask:(id)arg1 fromTaskInfo:(id)arg2 ;
-(id)descriptionForTaskWithIdentifier:(unsigned long long)arg1 ;
-(id)createNewTaskFromInfo:(id)arg1 ;
-(id)restoreCompletedTask:(id)arg1 ;
-(id)restoreInProgressTask:(id)arg1 ;
-(id)restoreTask:(id)arg1 isOutstanding:(char*)arg2 ;
-(void)addOutstandingTaskWithIdentifier:(unsigned long long)arg1 ;
-(id)restoreTasksFromArchivedInfo:(id)arg1 ;
-(id)clientErrorForError:(id)arg1 ;
-(void)requeueTask:(unsigned long long)arg1 ;
-(void)cancelMonitorForTask:(unsigned long long)arg1 ;
-(void)finalizeTaskCompletionWithSuppressedWake:(char)arg1 ;
-(char)sessionHasOutstandingTasks;
-(char)clientIsActive;
-(void)wakeUpClient;
-(void)cancelTasksRequiringClientConnectionAndResumeUnstartedTasks;
-(void)setInvalidateReply:(id)arg1 ;
-(void)fillInByteCountsForTaskInfo:(id)arg1 withTaskID:(id)arg2 ;
-(void)enqueueTaskWithIdentifier:(unsigned long long)arg1 ;
-(void)_onqueue_taskShouldResume:(unsigned long long)arg1 ;
-(id)invalidateReply;
-(void)performCommonSetupForTask:(id)arg1 taskInfo:(id)arg2 identifier:(unsigned long long)arg3 discretionaryStatus:(char)arg4 ;
-(id)descriptionForRequest:(id)arg1 ;
-(id)makeTempUploadFile:(id)arg1 withExtensionData:(id)arg2 ;
-(void)_onqueue_taskShouldSuspend:(unsigned long long)arg1 ;
-(char)trustPassesExtendedValidation:(SecTrustRef)arg1 ;
-(id)inputStreamWithFileHandle:(id)arg1 ;
-(void)handleCompletionOfTask:(id)arg1 identifier:(unsigned long long)arg2 taskInfo:(id)arg3 isRecoverable:(char)arg4 suppressWake:(char)arg5 ;
-(void)retryTask:(id)arg1 originalError:(id)arg2 timingData:(id)arg3 ;
-(void)removeOutstandingTaskWithIdentifier:(unsigned long long)arg1 ;
-(void)removeUploadFileForTaskInfo:(id)arg1 ;
-(id)descriptionForTCPConnectionWaitingReason:(long long)arg1 ;
-(void)errorOccurredDuringFinishedCallbackDelivery:(id)arg1 ;
-(void)errorOccurredDuringAuthCallbackDelivery:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)clientAcknowledgedTerminalCallbackForTask:(unsigned long long)arg1 ;
-(id)getClientProxy;
-(void)applicationWasSuspended:(id)arg1 ;
-(NSString *)clientBundleID;
-(NSString *)monitoredAppBundleID;
-(NSString *)secondaryID;
-(void)setDelegate:(id<NDBackgroundSessionDelegate>)arg1 ;
-(NSString *)identifier;
-(id<NDBackgroundSessionDelegate>)delegate;
-(void)invalidateWithReply:(/*^block*/id)arg1 ;
-(NSString *)sharedContainerIdentifier;
-(void)dataTaskWithRequest:(id)arg1 originalRequest:(id)arg2 identifier:(unsigned long long)arg3 reply:(/*^block*/id)arg4 ;
-(void)uploadTaskWithRequest:(id)arg1 originalRequest:(id)arg2 fromFile:(id)arg3 sandboxExtensionData:(id)arg4 identifier:(unsigned long long)arg5 reply:(/*^block*/id)arg6 ;
-(void)downloadTaskWithResumeData:(id)arg1 identifier:(unsigned long long)arg2 reply:(/*^block*/id)arg3 ;
-(void)downloadTaskWithRequest:(id)arg1 originalRequest:(id)arg2 downloadFilePath:(id)arg3 identifier:(unsigned long long)arg4 reply:(/*^block*/id)arg5 ;
-(void)resetStorageWithReply:(/*^block*/id)arg1 ;
-(void)cancelTaskWithIdentifier:(unsigned long long)arg1 byProducingResumeData:(/*^block*/id)arg2 ;
-(void)suspendTaskWithIdentifier:(unsigned long long)arg1 ;
-(void)cancelTaskWithIdentifier:(unsigned long long)arg1 ;
-(void)resumeTaskWithIdentifier:(unsigned long long)arg1 ;
-(void)setPriority:(long long)arg1 forTaskWithIdentifier:(unsigned long long)arg2 ;
-(void)setDescription:(id)arg1 forTask:(unsigned long long)arg2 ;
-(void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2 ;
-(void)_URLSession:(id)arg1 openFileAtPath:(id)arg2 mode:(int)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)URLSession:(id)arg1 task:(id)arg2 needNewBodyStream:(/*^block*/id)arg3 ;
-(void)URLSession:(id)arg1 task:(id)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5 ;
-(void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3 ;
-(void)URLSession:(id)arg1 task:(id)arg2 _willSendRequestForEstablishedConnection:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)URLSession:(id)arg1 task:(id)arg2 _isWaitingForConnectionWithReason:(long long)arg3 ;
-(void)URLSession:(id)arg1 task:(id)arg2 _conditionalRequirementsChanged:(char)arg3 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 didBecomeDownloadTask:(id)arg3 ;
-(void)_URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3 ;
-(void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5 ;
-(void)URLSession:(id)arg1 downloadTask:(id)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4 ;
-(void)_URLSession:(id)arg1 downloadTask:(id)arg2 didReceiveResponse:(id)arg3 ;
-(id)_URLSession:(id)arg1 downloadTaskNeedsDownloadDirectory:(id)arg2 ;
-(void)avAssetDownloadTaskWithURL:(id)arg1 destinationURL:(id)arg2 options:(id)arg3 identifier:(unsigned long long)arg4 reply:(/*^block*/id)arg5 ;
-(void)setSharedContainerIdentifier:(NSString *)arg1 ;
@end

