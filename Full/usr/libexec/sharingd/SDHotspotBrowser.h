/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:05:17 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /usr/libexec/sharingd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <sharingd/IDSContinuityDelegate.h>
#import <sharingd/IDSServiceDelegate.h>
#import <sharingd/SFRemoteHotspotProtocol.h>

@protocol SFRemoteHotspotClient, OS_dispatch_queue;
@class NSObject, SDStatusMonitor, IDSContinuity, IDSService, NSString, PCPersistentTimer, NSMutableDictionary, NSTimer;

@interface SDHotspotBrowser : NSObject <IDSContinuityDelegate, IDSServiceDelegate, SFRemoteHotspotProtocol> {

	char _hasAppleID;
	char _shouldBeConsumerScanning;
	char _shouldBeAdvertisingRequest;
	char _shouldBeAdvertisingResponse;
	char _targetAdvertising;
	char _targetScanning;
	char _sourceAdvertising;
	char _sourceScanning;
	unsigned _IDHash;
	unsigned _powerAssertionID;
	id<SFRemoteHotspotClient> _clientProxy;
	NSObject*<OS_dispatch_queue> _workQueue;
	SDStatusMonitor* _monitor;
	IDSContinuity* _tetheringManager;
	IDSService* _tetheringService;
	NSString* _altDSID;
	NSString* _timeString;
	PCPersistentTimer* _nextCrossoverPersistentTimer;
	unsigned long long _nextDayTimeOffset;
	NSMutableDictionary* _handlers;
	NSMutableDictionary* _retrieveTimers;
	NSTimer* _advertiseResponseTimer;
	NSMutableDictionary* _discoveredDevices;
	NSMutableDictionary* _deviceData;

}

@property (retain) id<SFRemoteHotspotClient> clientProxy;                         //@synthesize clientProxy=_clientProxy - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> workQueue;                        //@synthesize workQueue=_workQueue - In the implementation block
@property (retain) SDStatusMonitor * monitor;                                     //@synthesize monitor=_monitor - In the implementation block
@property (retain) IDSContinuity * tetheringManager;                              //@synthesize tetheringManager=_tetheringManager - In the implementation block
@property (assign) unsigned IDHash;                                               //@synthesize IDHash=_IDHash - In the implementation block
@property (assign) char hasAppleID;                                               //@synthesize hasAppleID=_hasAppleID - In the implementation block
@property (retain) IDSService * tetheringService;                                 //@synthesize tetheringService=_tetheringService - In the implementation block
@property (retain) NSString * altDSID;                                            //@synthesize altDSID=_altDSID - In the implementation block
@property (retain) NSString * timeString;                                         //@synthesize timeString=_timeString - In the implementation block
@property (retain) PCPersistentTimer * nextCrossoverPersistentTimer;              //@synthesize nextCrossoverPersistentTimer=_nextCrossoverPersistentTimer - In the implementation block
@property (assign) unsigned long long nextDayTimeOffset;                          //@synthesize nextDayTimeOffset=_nextDayTimeOffset - In the implementation block
@property (assign) char shouldBeConsumerScanning;                                 //@synthesize shouldBeConsumerScanning=_shouldBeConsumerScanning - In the implementation block
@property (assign) char shouldBeAdvertisingRequest;                               //@synthesize shouldBeAdvertisingRequest=_shouldBeAdvertisingRequest - In the implementation block
@property (retain) NSMutableDictionary * handlers;                                //@synthesize handlers=_handlers - In the implementation block
@property (retain) NSMutableDictionary * retrieveTimers;                          //@synthesize retrieveTimers=_retrieveTimers - In the implementation block
@property (assign) unsigned powerAssertionID;                                     //@synthesize powerAssertionID=_powerAssertionID - In the implementation block
@property (assign) char shouldBeAdvertisingResponse;                              //@synthesize shouldBeAdvertisingResponse=_shouldBeAdvertisingResponse - In the implementation block
@property (retain) NSTimer * advertiseResponseTimer;                              //@synthesize advertiseResponseTimer=_advertiseResponseTimer - In the implementation block
@property (retain) NSMutableDictionary * discoveredDevices;                       //@synthesize discoveredDevices=_discoveredDevices - In the implementation block
@property (assign) char targetAdvertising;                                        //@synthesize targetAdvertising=_targetAdvertising - In the implementation block
@property (assign) char targetScanning;                                           //@synthesize targetScanning=_targetScanning - In the implementation block
@property (assign) char sourceAdvertising;                                        //@synthesize sourceAdvertising=_sourceAdvertising - In the implementation block
@property (assign) char sourceScanning;                                           //@synthesize sourceScanning=_sourceScanning - In the implementation block
@property (retain) NSMutableDictionary * deviceData;                              //@synthesize deviceData=_deviceData - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedBrowser;
-(id<SFRemoteHotspotClient>)clientProxy;
-(void)setClientProxy:(id<SFRemoteHotspotClient>)arg1 ;
-(void)debugInfoRequested:(id)arg1 ;
-(void)releaseIdleSleepAssertion;
-(void)preventIdleSleepAssertion;
-(void)controlCenterVisibilityChanged:(id)arg1 ;
-(void)stopAdvertisingResponse;
-(void)stopAdvertisingTetheringRequest;
-(char)updateIDHash;
-(void)restartAdvertisingTetheringRequest;
-(void)restartProducerScanning;
-(void)stopConsumerScanning;
-(void)stopProducerScanning;
-(char)updateTimeString;
-(void)generateNextDayTimeOffset;
-(id)HMACWithDSID:(id)arg1 timeString:(id)arg2 ;
-(void)clearNextDayTimer;
-(PCPersistentTimer *)nextCrossoverPersistentTimer;
-(void)updateCrossoverTimer;
-(id)deviceForIdentifier:(id)arg1 ;
-(void)appleIDChanged:(id)arg1 ;
-(void)altDSIDUpdated:(id)arg1 ;
-(void)updateIDHashAndRestart;
-(id)pairedPeers;
-(id)tetheringPeers;
-(char)accountHasPairedPeers;
-(id)nextDateForDayInterval:(int)arg1 ;
-(void)nextDayTimerFired:(id)arg1 ;
-(void)setNextCrossoverPersistentTimer:(PCPersistentTimer *)arg1 ;
-(id)formattedDate:(id)arg1 ;
-(char)sendMessage:(id)arg1 toDeviceWithID:(id)arg2 isRequest:(char)arg3 messageID:(id)arg4 error:(id*)arg5 ;
-(void)restartConsumerScanning;
-(char)sendMessage:(id)arg1 toPeer:(id)arg2 isRequest:(char)arg3 messageID:(id)arg4 error:(id*)arg5 ;
-(void)invalidateTimerWithIdentifier:(id)arg1 ;
-(void)addRetrieveTimer:(id)arg1 ;
-(id)modelCodeForIdentifier:(id)arg1 ;
-(void)retrieveTimerFired:(id)arg1 ;
-(char)accountHasTetheringSources;
-(id)appendHashToData:(id)arg1 withType:(unsigned char)arg2 ;
-(void)invalidateResponseTimer;
-(void)advertiseResponseTimerFired:(id)arg1 ;
-(id)networkTypeString:(unsigned char)arg1 ;
-(void)credentialsWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)tetheringDidRetrieveCredentials:(id)arg1 credentials:(id)arg2 error:(id)arg3 ;
-(void)restartAdvertisingTetheringResponse;
-(void)handleIncomingResponse:(id)arg1 identifier:(id)arg2 ;
-(unsigned char)deviceModel;
-(void)screenStateChanged:(id)arg1 ;
-(void)restartAdvertiseResponseTimer;
-(IDSContinuity *)tetheringManager;
-(void)setTetheringManager:(IDSContinuity *)arg1 ;
-(unsigned)IDHash;
-(void)setIDHash:(unsigned)arg1 ;
-(char)hasAppleID;
-(void)setHasAppleID:(char)arg1 ;
-(IDSService *)tetheringService;
-(void)setTetheringService:(IDSService *)arg1 ;
-(void)setAltDSID:(NSString *)arg1 ;
-(NSString *)timeString;
-(void)setTimeString:(NSString *)arg1 ;
-(unsigned long long)nextDayTimeOffset;
-(void)setNextDayTimeOffset:(unsigned long long)arg1 ;
-(char)shouldBeConsumerScanning;
-(void)setShouldBeConsumerScanning:(char)arg1 ;
-(char)shouldBeAdvertisingRequest;
-(void)setShouldBeAdvertisingRequest:(char)arg1 ;
-(NSMutableDictionary *)retrieveTimers;
-(void)setRetrieveTimers:(NSMutableDictionary *)arg1 ;
-(char)shouldBeAdvertisingResponse;
-(void)setShouldBeAdvertisingResponse:(char)arg1 ;
-(NSTimer *)advertiseResponseTimer;
-(void)setAdvertiseResponseTimer:(NSTimer *)arg1 ;
-(NSMutableDictionary *)discoveredDevices;
-(void)setDiscoveredDevices:(NSMutableDictionary *)arg1 ;
-(char)targetAdvertising;
-(void)setTargetAdvertising:(char)arg1 ;
-(char)targetScanning;
-(void)setTargetScanning:(char)arg1 ;
-(char)sourceAdvertising;
-(void)setSourceAdvertising:(char)arg1 ;
-(char)sourceScanning;
-(void)setSourceScanning:(char)arg1 ;
-(NSMutableDictionary *)deviceData;
-(void)setDeviceData:(NSMutableDictionary *)arg1 ;
-(void)continuityDidUpdateState:(id)arg1 ;
-(void)continuity:(id)arg1 didStartAdvertisingOfType:(long long)arg2 ;
-(void)continuity:(id)arg1 didStopAdvertisingOfType:(long long)arg2 ;
-(void)continuity:(id)arg1 didFailToStartAdvertisingOfType:(long long)arg2 withError:(id)arg3 ;
-(void)continuity:(id)arg1 didStartScanningForType:(long long)arg2 ;
-(void)continuity:(id)arg1 didStopScanningForType:(long long)arg2 ;
-(void)continuity:(id)arg1 didFailToStartScanningForType:(long long)arg2 withError:(id)arg3 ;
-(void)continuity:(id)arg1 didDiscoverType:(long long)arg2 withData:(id)arg3 fromPeer:(id)arg4 ;
-(void)startBrowsing;
-(void)stopBrowsing;
-(void)enableHotspotForDevice:(id)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(void)addObservers;
-(void)removeObservers;
-(NSObject*<OS_dispatch_queue>)workQueue;
-(void)service:(id)arg1 account:(id)arg2 incomingMessage:(id)arg3 fromID:(id)arg4 context:(id)arg5 ;
-(void)service:(id)arg1 devicesChanged:(id)arg2 ;
-(void)service:(id)arg1 account:(id)arg2 identifier:(id)arg3 didSendWithSuccess:(char)arg4 error:(id)arg5 ;
-(SDStatusMonitor *)monitor;
-(NSMutableDictionary *)handlers;
-(void)setHandlers:(NSMutableDictionary *)arg1 ;
-(void)setMonitor:(SDStatusMonitor *)arg1 ;
-(NSString *)altDSID;
-(id)init;
-(void)setPowerAssertionID:(unsigned)arg1 ;
-(unsigned)powerAssertionID;
-(void)setWorkQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
@end

