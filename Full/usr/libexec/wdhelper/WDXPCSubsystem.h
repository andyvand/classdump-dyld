/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:05:18 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /usr/libexec/wdhelper
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <wdhelper/NSXPCListenerDelegate.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class NSXPCListener, WDSystemConfiguration, NSObject, NSMutableArray, NSString;

@interface WDXPCSubsystem : NSObject <NSXPCListenerDelegate> {

	NSXPCListener* _listener;
	WDSystemConfiguration* _sysConfig;
	NSObject*<OS_dispatch_queue> _sysConfigQueue;
	NSObject*<OS_dispatch_queue> _logQueue;
	NSObject*<OS_dispatch_queue> _reportQueue;
	NSObject*<OS_dispatch_queue> _captureQueue;
	NSObject*<OS_dispatch_source> _readSource;
	NSObject*<OS_dispatch_queue> _connectionListMutex;
	NSMutableArray* _connectionList;
	NSString* _tmpDir;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)createMiniDiagnosticsReportUsingTemporaryDirectory:(id)arg1 interfaceName:(id)arg2 authorizationData:(id)arg3 connection:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)createBasicDiagnosticsReportUsingTemporaryDirectory:(id)arg1 interfaceName:(id)arg2 authorizationData:(id)arg3 connection:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)createDiagnosticsReportUsingTemporaryDirectory:(id)arg1 interfaceName:(id)arg2 authorizationData:(id)arg3 connection:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)setDNSServerAddresses:(id)arg1 searchDomains:(id)arg2 serviceID:(id)arg3 authorizationData:(id)arg4 connection:(id)arg5 reply:(/*^block*/id)arg6 ;
-(void)configureIPv4ManuallyWithIPAddress:(id)arg1 routerAddress:(id)arg2 subnetMask:(id)arg3 serviceID:(id)arg4 authorizationData:(id)arg5 connection:(id)arg6 reply:(/*^block*/id)arg7 ;
-(void)configureIPv4UsingDHCPWithServiceID:(id)arg1 authorizationData:(id)arg2 connection:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)configureIPv6ManuallyWithIPAddress:(id)arg1 router:(id)arg2 prefixLength:(id)arg3 serviceID:(id)arg4 authorizationData:(id)arg5 connection:(id)arg6 reply:(/*^block*/id)arg7 ;
-(void)configureIPv6AutomaticallyWithServiceID:(id)arg1 authorizationData:(id)arg2 connection:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)queryWiFiLoggingEnabledWithAuthorizationData:(id)arg1 connection:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)setWiFiLoggingEnabled:(char)arg1 authorizationData:(id)arg2 connection:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)queryEAPOLLoggingEnabledWithAuthorizationData:(id)arg1 connection:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)setEAPOLLoggingEnabled:(char)arg1 authorizationData:(id)arg2 connection:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)queryDHCPLoggingEnabledWithAuthorizationData:(id)arg1 connection:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)setDHCPLoggingEnabled:(char)arg1 authorizationData:(id)arg2 connection:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)queryDNSLoggingEnabledWithAuthorizationData:(id)arg1 connection:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)setDNSLoggingEnabled:(char)arg1 authorizationData:(id)arg2 connection:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)queryOpenDirectoryLoggingEnabledWithAuthorizationData:(id)arg1 connection:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)setOpenDirectoryLoggingEnabled:(char)arg1 authorizationData:(id)arg2 connection:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)startFrameCaptureInMonitorModeWithSaveFilePath:(id)arg1 interfaceName:(id)arg2 authorizationData:(id)arg3 connection:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)startFrameCaptureWithDataLinkType:(long long)arg1 promiscuousMode:(char)arg2 interfaceName:(id)arg3 authorizationData:(id)arg4 connection:(id)arg5 reply:(/*^block*/id)arg6 ;
-(void)stopFrameCaptureWithAuthorizationData:(id)arg1 connection:(id)arg2 reply:(/*^block*/id)arg3 ;
-(id)initWithTemporaryDirectory:(id)arg1 ;
-(char)spindump;
-(char)systemProfilerWithPath:(id)arg1 full:(char)arg2 ;
-(char)netstatWithPath:(id)arg1 ;
-(char)kextstatWithPath:(id)arg1 ;
-(char)ifconfigWithPath:(id)arg1 ;
-(char)ipconfigWithPath:(id)arg1 interfaceName:(id)arg2 ;
-(char)top:(id)arg1 ;
-(char)ioreg:(id)arg1 ;
-(char)darwinupList:(id)arg1 ;
-(char)scutil;
-(void)setDHCPLoggingEnabled:(char)arg1 ;
-(void)setOpenDirectoryLoggingEnabled:(char)arg1 ;
-(void)stopFrameCapture;
-(void)collectMiniLogsUsingTemporaryDirectory:(id)arg1 interfaceName:(id)arg2 logMessages:(id)arg3 ;
-(void)collectBasicLogsUsingTemporaryDirectory:(id)arg1 interfaceName:(id)arg2 logMessages:(id)arg3 ;
-(void)collectLogsUsingTemporaryDirectory:(id)arg1 interfaceName:(id)arg2 logMessages:(id)arg3 ;
-(char)flushDNSCache;
-(char)wifiLoggingEnabled;
-(void)setWiFiLoggingEnabled:(char)arg1 ;
-(char)eapolLoggingEnabled;
-(void)setEAPOLLoggingEnabled:(char)arg1 ;
-(char)dhcpLoggingEnabled;
-(char)dnsLoggingEnabled;
-(void)setDNSLoggingEnabled:(char)arg1 ;
-(char)openDirectoryLoggingEnabled;
-(char)captureInMonitorModeWithSaveFilePath:(id)arg1 interfaceName:(id)arg2 error:(id*)arg3 ;
-(char)captureWithDataLinkType:(long long)arg1 promiscuousMode:(char)arg2 interfaceName:(id)arg3 connection:(id)arg4 error:(id*)arg5 ;
-(char)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(void)finalize;
-(void)dealloc;
@end

