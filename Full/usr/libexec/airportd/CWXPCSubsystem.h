/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:05:10 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /usr/libexec/airportd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <airportd/NSXPCListenerDelegate.h>

@protocol OS_dispatch_queue;
@class NSXPCListener, NSObject, NSMutableArray, CWScheduler, CWWiFiClient, NSMutableDictionary, CWANQPInterfaceManager, CWANQPCache, NSOrderedSet, NSString;

@interface CWXPCSubsystem : NSObject <NSXPCListenerDelegate> {

	NSXPCListener* _listener;
	NSXPCListener* _shareKitListener;
	NSObject*<OS_dispatch_queue> _internalQueue;
	NSMutableArray* _connectionList;
	CWScheduler* _scheduler;
	CWWiFiClient* _wifiClient;
	NSMutableDictionary* _interfaceContextMap;
	CWANQPInterfaceManager* _anqpInterfaceManager;
	CWANQPCache* _anqpCache;
	NSMutableArray* _wifiAgentList;
	char _isHybridSystem;
	/*^block*/id _startAutoJoinRequestHandler;
	/*^block*/id _dumpWiFiLogRequestHandler;
	NSMutableDictionary* _entitlementWarningMap;
	double _bluetoothPagingRequestAddedTimestamp;
	char _bluetoothPagingInProgress;
	NSMutableArray* _bluetoothPagingTimestampList;
	NSOrderedSet* _cachedPreferredNetworksList;

}

@property (nonatomic,retain,readonly) CWScheduler * scheduler;                                    //@synthesize scheduler=_scheduler - In the implementation block
@property (nonatomic,retain,readonly) CWWiFiClient * wifiClient;                                  //@synthesize wifiClient=_wifiClient - In the implementation block
@property (nonatomic,retain,readonly) CWANQPInterfaceManager * anqpInterfaceManager;              //@synthesize anqpInterfaceManager=_anqpInterfaceManager - In the implementation block
@property (nonatomic,retain,readonly) CWANQPCache * anqpCache;                                    //@synthesize anqpCache=_anqpCache - In the implementation block
@property (nonatomic,readonly) char isHybridSystem;                                               //@synthesize isHybridSystem=_isHybridSystem - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)filterRedundantScanChannels:(id)arg1 ;
+(id)descriptionForError:(id)arg1 ;
-(id)__interfaceContextWithName:(id)arg1 ;
-(void)__startUserMode8021XWithSSID:(id)arg1 username:(id)arg2 password:(id)arg3 identity:(id)arg4 remember:(char)arg5 interfaceWithName:(id)arg6 reply:(/*^block*/id)arg7 ;
-(void)__startUserMode8021XWithPasspointDomainName:(id)arg1 interfaceWithName:(id)arg2 reply:(/*^block*/id)arg3 ;
-(id)interfaceContextWithName:(id)arg1 ;
-(char)__rememberPreferredNetwork:(id)arg1 error:(id*)arg2 ;
-(char)__setWiFiPasswordForUserKeychain:(id)arg1 ssid:(id)arg2 error:(id*)arg3 ;
-(id)__descriptionForWPACipher:(int)arg1 ;
-(id)__descriptionForWPAAuthSel:(int)arg1 ;
-(id)__descriptionForRSNCipher:(int)arg1 ;
-(id)__descriptionForRSNAuthSel:(int)arg1 ;
-(id)__descriptionForChannel:(id)arg1 ;
-(id)__descriptionForRSNIE:(id)arg1 ;
-(id)__descriptionForWPAIE:(id)arg1 ;
-(char)__disassociateWithInterface:(id)arg1 error:(id*)arg2 ;
-(char)__stopIBSSModeWithInterface:(id)arg1 error:(id*)arg2 ;
-(char)__stopHostAPModeWithInterface:(id)arg1 error:(id*)arg2 ;
-(id)__descriptionForNetwork:(id)arg1 ;
-(char)waitFor8021XWithInterfaceName:(id)arg1 userMode8021X:(char*)arg2 error:(id*)arg3 ;
-(char)disassociateForInterfaceName:(id)arg1 authorization:(id)arg2 connection:(id)arg3 error:(id*)arg4 ;
-(char)__rememberWiFiNetwork:(id)arg1 profile:(id)arg2 collocatedProfile:(id)arg3 password:(id)arg4 is8021X:(char)arg5 isUserMode8021X:(char)arg6 isWEP40:(char)arg7 isWEPOpenSystem:(char)arg8 passpointDomain:(id)arg9 remember:(char)arg10 updateUserKeychain:(char)arg11 interface:(id)arg12 error:(id*)arg13 ;
-(void)__setWiFiPasswordForUserKeychain:(id)arg1 ssid:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)__startBrowsingForTetherDevicesAndReply:(/*^block*/id)arg1 ;
-(void)__stopBrowsingForTetherDevicesAndReply:(/*^block*/id)arg1 ;
-(void)__enableTetherDevice:(id)arg1 reply:(/*^block*/id)arg2 ;
-(CWWiFiClient *)wifiClient;
-(CWANQPInterfaceManager *)anqpInterfaceManager;
-(void)__startUserMode8021XUsingKeychainWithSSID:(id)arg1 interfaceWithName:(id)arg2 reply:(/*^block*/id)arg3 ;
-(char)__associateToWiFiNetwork:(id)arg1 tetherDevice:(id)arg2 password:(id)arg3 is8021X:(char)arg4 passpointDomain:(id)arg5 remember:(char)arg6 updateUserKeychain:(char)arg7 interface:(id)arg8 error:(id*)arg9 ;
-(char)__startUserMode8021XWithPasspointDomainName:(id)arg1 interfaceName:(id)arg2 error:(id*)arg3 ;
-(/*^block*/id)startAutoJoinRequestHandler;
-(char)__startUserMode8021XWithSSID:(id)arg1 username:(id)arg2 password:(id)arg3 identity:(id)arg4 remember:(char)arg5 interfaceName:(id)arg6 error:(id*)arg7 ;
-(char)startUserMode8021XUsingKeychainWithSSID:(id)arg1 interfaceWithName:(id)arg2 error:(id*)arg3 ;
-(char)startHostAPModeWithNetworkName:(id)arg1 securityType:(unsigned long long)arg2 channel:(id)arg3 password:(id)arg4 interfaceName:(id)arg5 connection:(id)arg6 error:(id*)arg7 ;
-(char)__startBrowsingForTetherDevicesAndReturnError:(id*)arg1 ;
-(char)__stopBrowsingForTetherDevicesAndReturnError:(id*)arg1 ;
-(char)__enableTetherDevice:(id)arg1 error:(id*)arg2 hotspotInfo:(id*)arg3 ;
-(id)__supportedScanChannelWithNumber:(id)arg1 interface:(id)arg2 ;
-(id)performScanWithChannelList:(id)arg1 ssidList:(id)arg2 legacyScanSSID:(id)arg3 includeHiddenNetworks:(char)arg4 mergeScanResults:(char)arg5 interfaceName:(id)arg6 connection:(id)arg7 error:(id*)arg8 ;
-(void)__startLoginWindowMode8021XWithProfile:(id)arg1 username:(id)arg2 password:(id)arg3 interfaceWithName:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)__showAvailableWiFiNetworks:(id)arg1 interfaceName:(id)arg2 ;
-(void)__showMICErrorWithNetworkName:(id)arg1 ;
-(void)__showDHCPMessage:(id)arg1 networkName:(id)arg2 ;
-(id)initWithScheduler:(id)arg1 ;
-(void)resumeXPC;
-(void)suspendXPC;
-(void)setStartAutoJoinRequestHandler:(/*^block*/id)arg1 ;
-(/*^block*/id)dumpWiFiLogRequestHandler;
-(void)setDumpWiFiLogRequestHandler:(/*^block*/id)arg1 ;
-(void)logWarningForEntitlement:(id)arg1 connection:(id)arg2 ;
-(char)bluetoothPagingInProgressSince:(double*)arg1 ;
-(char)setBluetoothPagingInProgress:(char)arg1 requestAddedTimestamp:(double)arg2 error:(id*)arg3 ;
-(char)bluetoothPagingLockAcquiredAfterTimestamp:(double)arg1 ;
-(void)setCachedPreferredNetworksList:(id)arg1 ;
-(id)cachedPreferredNetworksList;
-(char)__startLoginWindowMode8021XWithProfile:(id)arg1 username:(id)arg2 password:(id)arg3 interfaceName:(id)arg4 error:(id*)arg5 ;
-(char)setWiFiPowerState:(char)arg1 interfaceName:(id)arg2 authorization:(id)arg3 connection:(id)arg4 error:(id*)arg5 ;
-(char)setWiFiChannel:(id)arg1 interfaceName:(id)arg2 connection:(id)arg3 error:(id*)arg4 ;
-(id)queryScanResultsWithChannel:(id)arg1 ssidList:(id)arg2 maxAge:(double)arg3 maxMissCount:(long long)arg4 maxWakeCount:(long long)arg5 maxAutoJoinCount:(long long)arg6 interfaceName:(id)arg7 connection:(id)arg8 error:(id*)arg9 ;
-(id)queryDirectedScanResultsWithChannel:(id)arg1 ssid:(id)arg2 maxAge:(double)arg3 maxMissCount:(long long)arg4 maxWakeCount:(long long)arg5 maxAutoJoinCount:(long long)arg6 interfaceName:(id)arg7 connection:(id)arg8 error:(id*)arg9 ;
-(char)clearScanCacheWithInterfaceName:(id)arg1 connection:(id)arg2 error:(id*)arg3 ;
-(id)performGASQueryWithANQPElements:(unsigned long long)arg1 network:(id)arg2 interfaceName:(id)arg3 connection:(id)arg4 error:(id*)arg5 ;
-(long long)bluetoothCoexistenceModeForInterfaceWithName:(id)arg1 ;
-(char)associateToWiFiNetwork:(id)arg1 password:(id)arg2 is8021X:(char)arg3 remember:(char)arg4 interfaceName:(id)arg5 authorization:(id)arg6 connection:(id)arg7 error:(id*)arg8 ;
-(char)associateToPasspointWiFiNetwork:(id)arg1 domainName:(id)arg2 interfaceName:(id)arg3 authorization:(id)arg4 connection:(id)arg5 error:(id*)arg6 ;
-(char)associateToWiFiNetworkWithLoginWindowMode8021X:(id)arg1 profile:(id)arg2 username:(id)arg3 password:(id)arg4 interfaceName:(id)arg5 authorization:(id)arg6 connection:(id)arg7 error:(id*)arg8 ;
-(char)associateToWiFiNetworkWithUserMode8021X:(id)arg1 username:(id)arg2 password:(id)arg3 identity:(id)arg4 remember:(char)arg5 interfaceName:(id)arg6 authorization:(id)arg7 connection:(id)arg8 error:(id*)arg9 ;
-(char)associateToUserMode8021XWiFiNetworkUsingKeychain:(id)arg1 remember:(char)arg2 interfaceName:(id)arg3 authorization:(id)arg4 connection:(id)arg5 error:(id*)arg6 ;
-(char)associateToWiFiNetworkWithSystemMode8021X:(id)arg1 interfaceName:(id)arg2 authorization:(id)arg3 connection:(id)arg4 error:(id*)arg5 ;
-(char)associateToWPSNetwork:(id)arg1 pin:(id)arg2 remember:(char)arg3 interfaceName:(id)arg4 authorization:(id)arg5 connection:(id)arg6 error:(id*)arg7 ;
-(char)associateToWiFiNetworkUsingSystemKeychain:(id)arg1 interfaceName:(id)arg2 authorization:(id)arg3 connection:(id)arg4 error:(id*)arg5 ;
-(char)stopIBSSModeForInterfaceName:(id)arg1 authorization:(id)arg2 connection:(id)arg3 error:(id*)arg4 ;
-(char)setPairwiseMasterKey:(id)arg1 interfaceName:(id)arg2 connection:(id)arg3 error:(id*)arg4 ;
-(char)setWEPKey:(id)arg1 flags:(unsigned long long)arg2 index:(long long)arg3 interfaceName:(id)arg4 connection:(id)arg5 error:(id*)arg6 ;
-(char)startIBSSModeWithSSID:(id)arg1 securityType:(unsigned long long)arg2 channel:(id)arg3 password:(id)arg4 interfaceName:(id)arg5 authorization:(id)arg6 connection:(id)arg7 error:(id*)arg8 ;
-(char)startHostAPModeUsingConfigurationForInterfaceName:(id)arg1 connection:(id)arg2 error:(id*)arg3 ;
-(char)stopHostAPModeFornterfaceName:(id)arg1 connection:(id)arg2 error:(id*)arg3 ;
-(char)setWiFiEAPKeychainItemforSSID:(id)arg1 username:(id)arg2 password:(id)arg3 connection:(id)arg4 error:(id*)arg5 ;
-(char)setWiFiEAPKeychainItemforSSID:(id)arg1 identity:(id)arg2 connection:(id)arg3 error:(id*)arg4 ;
-(char)rememberWiFiNetworkProfile:(id)arg1 connection:(id)arg2 error:(id*)arg3 ;
-(char)forgetWiFiNetworkProfileWithSSID:(id)arg1 connection:(id)arg2 error:(id*)arg3 ;
-(char)forgetPasspointWiFiNetworkProfileWithDomainName:(id)arg1 connection:(id)arg2 error:(id*)arg3 ;
-(char)startBrowsingForTetherDevicesWithConnection:(id)arg1 error:(id*)arg2 ;
-(char)stopBrowsingForTetherDevicesWithConnection:(id)arg1 error:(id*)arg2 ;
-(char)connectToTetherDevice:(id)arg1 remember:(char)arg2 interfaceName:(id)arg3 authorization:(id)arg4 connection:(id)arg5 error:(id*)arg6 ;
-(void)linkDidChangeForWiFiInterfaceWithName:(id)arg1 linkUp:(char)arg2 linkDownReason:(long long)arg3 ;
-(void)updatedScanCacheForInterfaceWithName:(id)arg1 ;
-(void)updatedANQPCache;
-(CWScheduler *)scheduler;
-(CWANQPCache *)anqpCache;
-(char)isHybridSystem;
-(char)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(void)powerStateDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)countryCodeDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)autoJoinDidStartForWiFiInterfaceWithName:(id)arg1 ;
-(void)autoJoinDidCompleteForWiFiInterfaceWithName:(id)arg1 ;
-(void)ssidDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)bssidDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)linkQualityDidChangeForWiFiInterfaceWithName:(id)arg1 rssi:(long long)arg2 transmitRate:(double)arg3 ;
-(void)modeDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)interfaceAddedWithName:(id)arg1 ;
-(void)interfaceRemovedWithName:(id)arg1 ;
-(void)rsnHandshakeDidCompleteForWiFiInterfaceWithName:(id)arg1 ;
-(void)foundTetherDevices:(id)arg1 ;
-(void)internal_startUserMode8021XUsingKeychainWithSSID:(id)arg1 interfaceWithName:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)internal_startUserMode8021XWithSSID:(id)arg1 username:(id)arg2 password:(id)arg3 identity:(id)arg4 remember:(char)arg5 interfaceWithName:(id)arg6 reply:(/*^block*/id)arg7 ;
-(void)internal_startUserMode8021XWithPasspointDomainName:(id)arg1 interfaceWithName:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)internal_startLoginWindowMode8021XWithProfile:(id)arg1 username:(id)arg2 password:(id)arg3 interfaceWithName:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)internal_setWiFiPasswordForUserKeychain:(id)arg1 ssid:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)internal_showAvailableWiFiNetworks:(id)arg1 interfaceName:(id)arg2 ;
-(void)internal_showMICErrorWithNetworkName:(id)arg1 ;
-(void)internal_showDHCPMessage:(id)arg1 networkName:(id)arg2 ;
-(void)dealloc;
@end

