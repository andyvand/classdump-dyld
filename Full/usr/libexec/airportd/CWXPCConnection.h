/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:05:10 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /usr/libexec/airportd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <airportd/WiFiXPCRequestProtocol.h>

@protocol OS_dispatch_queue;
@class NSXPCConnection, NSString, NSObject, NSMutableSet, CWXPCSubsystem;

@interface CWXPCConnection : NSObject <WiFiXPCRequestProtocol> {

	NSXPCConnection* _connection;
	NSString* _clientID;
	NSString* _processName;
	NSObject*<OS_dispatch_queue> _eventSetMutex;
	NSMutableSet* _eventSet;
	CWXPCSubsystem* _subsystem;
	double _lastScanRequestTimestamp;

}

@property (nonatomic,copy,readonly) NSString * clientID;                         //@synthesize clientID=_clientID - In the implementation block
@property (nonatomic,retain,readonly) NSXPCConnection * connection;              //@synthesize connection=_connection - In the implementation block
@property (nonatomic,copy,readonly) NSString * processName;                      //@synthesize processName=_processName - In the implementation block
-(char)isUserAgent;
-(id)initWithXPCConnection:(id)arg1 subsystem:(id)arg2 ;
-(char)__verifyWiFiAgentEntitlement;
-(long long)__internalPriority;
-(char)__verifyEntitlement:(id)arg1 ;
-(void)__performScanWithChannelSubset:(id)arg1 ssidList:(id)arg2 legacyScanSSID:(id)arg3 includeHiddenNetworks:(char)arg4 mergeScanResults:(char)arg5 maxAge:(double)arg6 maxMissCount:(long long)arg7 maxWakeCount:(long long)arg8 maxAutoJoinCount:(long long)arg9 interfaceName:(id)arg10 waitForWiFi:(char)arg11 waitForBluetooth:(char)arg12 token:(long long)arg13 priority:(long long)arg14 reply:(/*^block*/id)arg15 ;
-(id)__performScanWithChannelSubset:(id)arg1 ssidList:(id)arg2 legacyScanSSID:(id)arg3 includeHiddenNetworks:(char)arg4 mergeScanResults:(char)arg5 maxAge:(double)arg6 maxMissCount:(long long)arg7 maxWakeCount:(long long)arg8 maxAutoJoinCount:(long long)arg9 interfaceName:(id)arg10 waitForWiFi:(char)arg11 waitForBluetooth:(char)arg12 token:(long long)arg13 priority:(long long)arg14 error:(id*)arg15 ;
-(id)__performScanWithChannelList:(id)arg1 ssidList:(id)arg2 legacyScanSSID:(id)arg3 includeHiddenNetworks:(char)arg4 mergeScanResults:(char)arg5 maxAge:(double)arg6 maxMissCount:(long long)arg7 maxWakeCount:(long long)arg8 maxAutoJoinCount:(long long)arg9 interfaceName:(id)arg10 waitForWiFi:(char)arg11 waitForBluetooth:(char)arg12 token:(long long)arg13 priority:(long long)arg14 error:(id*)arg15 ;
-(void)__queryScanCacheWithChannel:(id)arg1 ssidList:(id)arg2 maxAge:(double)arg3 maxMissCount:(long long)arg4 maxWakeCount:(long long)arg5 maxAutoJoinCount:(long long)arg6 interfaceName:(id)arg7 priority:(long long)arg8 reply:(/*^block*/id)arg9 ;
-(id)__queryScanCacheWithChannel:(id)arg1 ssidList:(id)arg2 maxAge:(double)arg3 maxMissCount:(long long)arg4 maxWakeCount:(long long)arg5 maxAutoJoinCount:(long long)arg6 interfaceName:(id)arg7 priority:(long long)arg8 error:(id*)arg9 ;
-(id)__queryScanCacheWithChannels:(id)arg1 ssidList:(id)arg2 maxAge:(double)arg3 maxMissCount:(long long)arg4 maxWakeCount:(long long)arg5 maxAutoJoinCount:(long long)arg6 interfaceName:(id)arg7 priority:(long long)arg8 error:(id*)arg9 ;
-(char)__verifyRequiredEntitlement:(id)arg1 ;
-(void)__acquireBluetoothPagingLockWithInterfaceName:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)__relinquishBluetoothPagingLockWithInterfaceName:(id)arg1 reply:(/*^block*/id)arg2 ;
-(char)__acquireBluetoothPagingLockWithInterfaceName:(id)arg1 error:(id*)arg2 ;
-(char)__relinquishBluetoothPagingLockWithInterfaceName:(id)arg1 error:(id*)arg2 ;
-(char)__verifyEntitlementForEventType:(long long)arg1 ;
-(void)__addEventWithType:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)__removeEventWithType:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)__removeAllEventsAndReply:(/*^block*/id)arg1 ;
-(void)relinquishBluetoothPagingLockAndReply:(/*^block*/id)arg1 ;
-(void)acquireBluetoothPagingLockAndReply:(/*^block*/id)arg1 ;
-(void)startAutoJoinForInterfaceName:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)dumpWiFiTemporaryLogAndReply:(/*^block*/id)arg1 ;
-(void)associateToSystemMode8021XWiFiNetwork:(id)arg1 interfaceName:(id)arg2 token:(long long)arg3 priority:(long long)arg4 authorization:(id)arg5 reply:(/*^block*/id)arg6 ;
-(void)associateToWiFiNetworkUsingSystemKeychain:(id)arg1 interfaceName:(id)arg2 token:(long long)arg3 priority:(long long)arg4 authorization:(id)arg5 reply:(/*^block*/id)arg6 ;
-(void)setWiFiHostAPModeKeychainItemforInterfaceName:(id)arg1 password:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)setWiFiEAPKeychainItemforSSID:(id)arg1 username:(id)arg2 password:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)setWiFiEAPKeychainItemforSSID:(id)arg1 identity:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)setWiFiKeychainItemforSSID:(id)arg1 password:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)powerStateDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)countryCodeDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)scanCacheUpdatedForWiFiInterfaceWithName:(id)arg1 ;
-(void)autoJoinDidStartForWiFiInterfaceWithName:(id)arg1 ;
-(void)autoJoinDidCompleteForWiFiInterfaceWithName:(id)arg1 ;
-(void)cancelPendingRequestWithToken:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)setWiFiPowerState:(char)arg1 interfaceName:(id)arg2 authorization:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)disassociateForInterfaceName:(id)arg1 token:(long long)arg2 priority:(long long)arg3 authorization:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)startMonitoringEventWithType:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)stopMonitoringEventWithType:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)stopMonitoringAllEventsAndReply:(/*^block*/id)arg1 ;
-(void)ssidDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)bssidDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)linkDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)linkQualityDidChangeForWiFiInterfaceWithName:(id)arg1 rssi:(long long)arg2 transmitRate:(double)arg3 ;
-(void)modeDidChangeForWiFiInterfaceWithName:(id)arg1 ;
-(void)interfaceAddedWithName:(id)arg1 ;
-(void)interfaceRemovedWithName:(id)arg1 ;
-(void)rsnHandshakeDidCompleteForWiFiInterfaceWithName:(id)arg1 ;
-(void)foundTetherDevices:(id)arg1 ;
-(void)internal_startUserMode8021XUsingKeychainWithSSID:(id)arg1 interfaceWithName:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)internal_startUserMode8021XWithSSID:(id)arg1 username:(id)arg2 password:(id)arg3 identity:(id)arg4 remember:(char)arg5 interfaceWithName:(id)arg6 reply:(/*^block*/id)arg7 ;
-(void)internal_startUserMode8021XWithPasspointDomainName:(id)arg1 interfaceWithName:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)internal_startLoginWindowMode8021XWithProfile:(id)arg1 username:(id)arg2 password:(id)arg3 interfaceWithName:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)internal_setWiFiPasswordForUserKeychain:(id)arg1 ssid:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)internal_showAvailableWiFiNetworks:(id)arg1 interfaceName:(id)arg2 ;
-(void)internal_showMICErrorWithNetworkName:(id)arg1 ;
-(void)internal_showDHCPMessage:(id)arg1 networkName:(id)arg2 ;
-(void)internal_startBrowsingForTetherDevicesAndReply:(/*^block*/id)arg1 ;
-(void)internal_stopBrowsingForTetherDevicesAndReply:(/*^block*/id)arg1 ;
-(void)internal_enableTetherDevice:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)startBrowsingForTetherDevicesAndReply:(/*^block*/id)arg1 ;
-(void)stopBrowsingForTetherDevicesAndReply:(/*^block*/id)arg1 ;
-(void)internal_foundTetherDevices:(id)arg1 ;
-(void)setWiFiChannel:(id)arg1 interfaceName:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)setPairwiseMasterKey:(id)arg1 interfaceName:(id)arg2 token:(long long)arg3 priority:(long long)arg4 reply:(/*^block*/id)arg5 ;
-(void)setWEPKey:(id)arg1 flags:(unsigned long long)arg2 index:(long long)arg3 interfaceName:(id)arg4 token:(long long)arg5 priority:(long long)arg6 reply:(/*^block*/id)arg7 ;
-(void)startIBSSModeWithSSID:(id)arg1 securityType:(unsigned long long)arg2 channel:(id)arg3 password:(id)arg4 interfaceName:(id)arg5 token:(long long)arg6 priority:(long long)arg7 authorization:(id)arg8 reply:(/*^block*/id)arg9 ;
-(void)startHostAPModeWithNetworkName:(id)arg1 securityType:(unsigned long long)arg2 channel:(id)arg3 password:(id)arg4 interfaceName:(id)arg5 token:(long long)arg6 priority:(long long)arg7 reply:(/*^block*/id)arg8 ;
-(void)startHostAPModeUsingConfigurationWithInterfaceName:(id)arg1 token:(long long)arg2 priority:(long long)arg3 reply:(/*^block*/id)arg4 ;
-(void)stopHostAPModeWithInterfaceName:(id)arg1 token:(long long)arg2 priority:(long long)arg3 reply:(/*^block*/id)arg4 ;
-(void)associateToWiFiNetwork:(id)arg1 password:(id)arg2 remember:(char)arg3 interfaceName:(id)arg4 token:(long long)arg5 priority:(long long)arg6 authorization:(id)arg7 reply:(/*^block*/id)arg8 ;
-(void)associateToLoginWindowMode8021XWiFiNetwork:(id)arg1 profile:(id)arg2 username:(id)arg3 password:(id)arg4 interfaceName:(id)arg5 token:(long long)arg6 priority:(long long)arg7 authorization:(id)arg8 reply:(/*^block*/id)arg9 ;
-(void)associateToPasspointWiFiNetwork:(id)arg1 domainName:(id)arg2 interfaceName:(id)arg3 token:(long long)arg4 priority:(long long)arg5 authorization:(id)arg6 reply:(/*^block*/id)arg7 ;
-(void)associateToUserMode8021XWiFiNetwork:(id)arg1 username:(id)arg2 password:(id)arg3 identity:(id)arg4 remember:(char)arg5 interfaceName:(id)arg6 token:(long long)arg7 priority:(long long)arg8 authorization:(id)arg9 reply:(/*^block*/id)arg10 ;
-(void)performScanWithChannels:(id)arg1 ssidList:(id)arg2 legacyScanSSID:(id)arg3 includeHiddenNetworks:(char)arg4 mergeScanResults:(char)arg5 maxAge:(double)arg6 maxMissCount:(long long)arg7 maxWakeCount:(long long)arg8 maxAutoJoinCount:(long long)arg9 interfaceName:(id)arg10 waitForWiFi:(char)arg11 waitForBluetooth:(char)arg12 token:(long long)arg13 priority:(long long)arg14 reply:(/*^block*/id)arg15 ;
-(void)queryScanCacheWithChannels:(id)arg1 ssidList:(id)arg2 maxAge:(double)arg3 maxMissCount:(long long)arg4 maxWakeCount:(long long)arg5 maxAutoJoinCount:(long long)arg6 interfaceName:(id)arg7 reply:(/*^block*/id)arg8 ;
-(void)stopIBSSModeForInterfaceName:(id)arg1 token:(long long)arg2 priority:(long long)arg3 authorization:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)associateToWPSNetwork:(id)arg1 pin:(id)arg2 remember:(char)arg3 interfaceName:(id)arg4 token:(long long)arg5 priority:(long long)arg6 authorization:(id)arg7 reply:(/*^block*/id)arg8 ;
-(void)queryANQPElements:(unsigned long long)arg1 network:(id)arg2 maxAge:(double)arg3 interfaceName:(id)arg4 waitForWiFi:(char)arg5 waitForBluetooth:(char)arg6 token:(long long)arg7 priority:(long long)arg8 reply:(/*^block*/id)arg9 ;
-(void)queryANQPCacheWithElements:(unsigned long long)arg1 network:(id)arg2 maxAge:(double)arg3 reply:(/*^block*/id)arg4 ;
-(void)clearANQPCacheForNetwork:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)saveJoinConfigurationWithInterfaceName:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)restoreJoinConfigurationWithInterfaceName:(id)arg1 uuid:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)acquireBluetoothPagingLockWithInterfaceName:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)relinquishBluetoothPagingLockWithInterfaceName:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)currentTetherDeviceWithInterfaceName:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)connectToTetherDevice:(id)arg1 remember:(char)arg2 interfaceName:(id)arg3 token:(long long)arg4 authorization:(id)arg5 reply:(/*^block*/id)arg6 ;
-(void)clearScanCacheWithInterfaceName:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)associateToUserMode8021XWiFiNetworkUsingKeychain:(id)arg1 remember:(char)arg2 interfaceName:(id)arg3 token:(long long)arg4 priority:(long long)arg5 authorization:(id)arg6 reply:(/*^block*/id)arg7 ;
-(void)rememberWiFiNetworkProfile:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)forgetWiFiNetworkProfileWithSSID:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)forgetPasspointWiFiNetworkProfileWithDomainName:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)acquireRequestLockWithType:(long long)arg1 interfaceName:(id)arg2 priority:(long long)arg3 maximumAge:(double)arg4 reply:(/*^block*/id)arg5 ;
-(void)relinquishRequestLockWithType:(long long)arg1 interfaceName:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)acquirePriorityLockWithType:(long long)arg1 priority:(long long)arg2 maximumAge:(double)arg3 token:(long long)arg4 reply:(/*^block*/id)arg5 ;
-(void)relinquishPriorityLockWithToken:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(NSString *)clientID;
-(NSXPCConnection *)connection;
-(void)dealloc;
-(id)description;
-(NSString *)processName;
@end

