/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 3:57:36 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /usr/sbin/networksetup
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <networksetup/networksetup-Structs.h>
@interface Network : NSObject {

	AuthorizationOpaqueRefRef _auth;
	SCPreferencesRef _prefs;

}
-(int)setProxyAuthenticated:(id)arg1 domain:(id)arg2 port:(id)arg3 proxyType:(int)arg4 authenticated:(id)arg5 user:(id)arg6 password:(id)arg7 ;
-(int)setProxy:(id)arg1 domain:(id)arg2 port:(id)arg3 proxyType:(int)arg4 ;
-(id)initUsingExternalAuth;
-(int)listServiceOrder:(char)arg1 ;
-(int)listAllPorts;
-(int)detectNewNetworkHardware;
-(int)getMacAddress:(id)arg1 ;
-(int)getComputerName;
-(int)validateHostName:(id)arg1 ;
-(int)validateComputerName:(id)arg1 ;
-(int)getInfo:(id)arg1 ;
-(int)setManual:(id)arg1 withIP:(id)arg2 withSubnet:(id)arg3 withRouter:(id)arg4 ;
-(int)setIPAutomatic:(id)arg1 withDHCP:(char)arg2 withClientID:(id)arg3 ;
-(int)setDHCPWithIP:(id)arg1 withIPAddress:(id)arg2 ;
-(int)setAdditionalRoutes:(id)arg1 withList:(id)arg2 ;
-(int)setV6AdditionalRoutes:(id)arg1 withList:(id)arg2 ;
-(int)getAdditionalRoutes:(id)arg1 ;
-(int)getV6AdditionalRoutes:(id)arg1 ;
-(int)getDNS:(id)arg1 ;
-(int)getDomain:(id)arg1 ;
-(int)setDNS:(id)arg1 withValues:(id)arg2 ;
-(int)setDomain:(id)arg1 withValues:(id)arg2 ;
-(int)create6To4Service:(id)arg1 ;
-(int)setV4AddressOff:(id)arg1 ;
-(int)setV6AddressOff:(id)arg1 ;
-(int)setV6AddressAutomatic:(id)arg1 ;
-(int)setV6AddressLinkLocalOnly:(id)arg1 ;
-(int)setV6AddressManual:(id)arg1 withAddress:(id)arg2 withPrefixLength:(id)arg3 withRouter:(id)arg4 ;
-(int)set6To4Automatic:(id)arg1 ;
-(int)set6To4ManualWithRelay:(id)arg1 withRelay:(id)arg2 ;
-(int)getProxy:(id)arg1 proxyType:(int)arg2 ;
-(int)setProxyState:(id)arg1 state:(char)arg2 proxyType:(int)arg3 ;
-(int)getBypassDomains:(id)arg1 ;
-(int)setBypassDomains:(id)arg1 enabled:(char)arg2 arrayOfDomains:(id)arg3 ;
-(int)getProxyAutoDiscoveryState:(id)arg1 ;
-(int)setProxyAutoDiscoveryState:(char)arg1 forService:(id)arg2 ;
-(int)setPassiveFTP:(id)arg1 state:(char)arg2 ;
-(int)getPassiveFTP:(id)arg1 ;
-(int)setAutoProxyURL:(id)arg1 forService:(id)arg2 ;
-(int)getAutoProxyURLForService:(id)arg1 ;
-(int)setAutoProxyState:(char)arg1 forService:(id)arg2 ;
-(int)getAirPortNetworkOnDevice:(id)arg1 ;
-(int)setAirPortNetwork:(id)arg1 onDevice:(id)arg2 withPassword:(id)arg3 ;
-(int)getAirPortPower:(id)arg1 ;
-(int)setAirPortPower:(char)arg1 onDevice:(id)arg2 ;
-(int)listPreferredWirelessNetworksOnDevice:(id)arg1 ;
-(int)addPreferredWirelessNetwork:(id)arg1 onDevice:(id)arg2 atIndex:(long long)arg3 withPassword:(id)arg4 andSecurityType:(id)arg5 ;
-(int)removePreferredWirelessNetwork:(id)arg1 fromDevice:(id)arg2 ;
-(int)removeAllPreferredWirelessNetworksFromDevice:(id)arg1 ;
-(int)getServiceEnabled:(id)arg1 ;
-(int)setServiceEnabled:(id)arg1 state:(char)arg2 ;
-(int)createService:(id)arg1 onPort:(id)arg2 ;
-(int)renameService:(id)arg1 withName:(id)arg2 ;
-(int)duplicateService:(id)arg1 withName:(id)arg2 ;
-(int)orderServices:(id)arg1 ;
-(int)setMTUAndMediaAutomatically:(id)arg1 ;
-(int)getMTU:(id)arg1 ;
-(int)setMTU:(id)arg1 toValue:(id)arg2 ;
-(int)listValidMTURange:(id)arg1 ;
-(int)getMedia:(id)arg1 ;
-(int)setMedia:(id)arg1 withSubType:(id)arg2 andOptions:(id)arg3 ;
-(int)listValidMedia:(id)arg1 ;
-(int)createVLAN:(id)arg1 overDevice:(id)arg2 tag:(id)arg3 ;
-(int)deleteVLAN:(id)arg1 overDevice:(id)arg2 tag:(id)arg3 ;
-(int)listVLANs:(char)arg1 ;
-(int)listDevicesThatSupportVLAN;
-(int)getIsBondSupported:(id)arg1 ;
-(int)createBond:(id)arg1 withDevices:(id)arg2 ;
-(int)deleteBond:(id)arg1 ;
-(int)addDevice:(id)arg1 toBond:(id)arg2 ;
-(int)removeDevice:(id)arg1 fromBond:(id)arg2 ;
-(int)showBondStatus:(id)arg1 ;
-(int)listBonds;
-(int)listPPPoEServices;
-(int)showPPPoEStatusForServiceName:(id)arg1 ;
-(int)createPPPoEServiceOnPort:(id)arg1 withName:(id)arg2 accountName:(id)arg3 password:(id)arg4 pppoeServiceName:(id)arg5 ;
-(int)deletePPPoEService:(id)arg1 ;
-(int)setPPPoEAccountName:(id)arg1 forService:(id)arg2 ;
-(int)setPPPoEPassword:(id)arg1 forService:(id)arg2 ;
-(int)connectPPPoEService:(id)arg1 ;
-(int)disconnectPPPoEService:(id)arg1 ;
-(int)listLocations;
-(int)currentLocationName;
-(int)createLocationWithName:(id)arg1 populateWithDefaults:(char)arg2 ;
-(int)deleteLocationWithName:(id)arg1 ;
-(int)switchToLocationWithName:(id)arg1 ;
-(char)isValidHostName:(id)arg1 ;
-(char)isValidComputerName:(id)arg1 ;
-(int)commitDatabase;
-(id)getServiceName:(SCNetworkServiceRef)arg1 ;
-(SCNetworkServiceRef)copyServiceEvenIfInactive:(id)arg1 verbose:(char)arg2 ;
-(int)print6To4InfoForService:(SCNetworkServiceRef)arg1 ;
-(SCNetworkProtocolRef)copyProtocol:(SCNetworkServiceRef)arg1 protocolType:(CFStringRef)arg2 create:(char)arg3 ;
-(int)displayIPInfo:(id)arg1 forService:(SCNetworkServiceRef)arg2 ;
-(char)isValidDomain:(id)arg1 ;
-(int)setAdditionalRoutes:(id)arg1 withList:(id)arg2 isV4:(char)arg3 ;
-(int)getAdditionalRoutes:(id)arg1 isV4:(char)arg2 ;
-(int)print6to4AddressesForService:(SCNetworkServiceRef)arg1 ;
-(void)printV6LocalAddressForService:(SCNetworkServiceRef)arg1 ;
-(SCNetworkProtocolRef)copyProxyPrefs:(id)arg1 create:(char)arg2 ;
-(char)isStringOnOrOff:(id)arg1 error:(char*)arg2 ;
-(char)passwordExistsForServer:(id)arg1 port:(id)arg2 andKind:(int)arg3 ;
-(char)removeProxyServer:(id)arg1 port:(id)arg2 kind:(int)arg3 forAccount:(id)arg4 ;
-(char)setPassword:(id)arg1 andAccount:(id)arg2 forProxyServer:(id)arg3 port:(id)arg4 kind:(int)arg5 ;
-(OpaqueSecKeychainItemRefRef)copyKeychainItemForProxyServer:(id)arg1 port:(id)arg2 account:(id)arg3 andKind:(int)arg4 ;
-(id)accountForKeychainItem:(OpaqueSecKeychainItemRefRef)arg1 ;
-(unsigned)proxyTypeForKind:(int)arg1 ;
-(char)isAirPortForcedOff;
-(char)interfaceIsWiFi:(id)arg1 ;
-(int)_addPreferredWirelessNetwork:(id)arg1 onDevice:(id)arg2 atIndex:(long long)arg3 withPassword:(id)arg4 andSecurityType:(unsigned long long)arg5 log:(char)arg6 ;
-(unsigned)getGUIConsoleUserID;
-(id)convertToAirPortSecurityType:(id)arg1 ;
-(SCNetworkInterfaceRef)copyActiveInterface:(id)arg1 verbose:(char)arg2 ;
-(SCNetworkInterfaceRef)copyInterface:(id)arg1 verbose:(char)arg2 ;
-(void)printMedia:(id)arg1 withOptions:(id)arg2 isActive:(char)arg3 ;
-(char)checkIfArrayContainsEmptyArray:(id)arg1 ;
-(id)copyServices;
-(int)printIPConfigFromSC:(char)arg1 forServiceID:(id)arg2 ;
-(void)displayV6InfoForService:(SCNetworkServiceRef)arg1 ;
-(int)printV6AddressesForService:(SCNetworkServiceRef)arg1 ;
-(SCNetworkServiceRef)copyService:(id)arg1 ;
-(SCNetworkInterfaceRef)checkVLANTag:(id)arg1 andName:(id)arg2 overDevice:(id)arg3 ;
-(void)printBondDescription:(SCNetworkInterfaceRef)arg1 ;
-(SCNetworkInterfaceRef)copyBond:(id)arg1 ;
-(void)addSupportedProtocolsToService:(SCNetworkServiceRef)arg1 ;
-(id)copyAccessPathArray;
-(id)copyUserConfigurations;
-(id)loginConfigurationsForService:(SCNetworkServiceRef)arg1 ;
-(id)systemProfileForService:(SCNetworkServiceRef)arg1 ;
-(int)setSystemProfile:(id)arg1 forService:(SCNetworkServiceRef)arg2 ;
-(int)setLoginConfigurations:(id)arg1 forService:(SCNetworkServiceRef)arg2 ;
-(void)setUserConfigurations:(id)arg1 ;
-(int)importUserProfiles:(id)arg1 ;
-(int)importLoginProfiles:(id)arg1 forService:(SCNetworkServiceRef)arg2 ;
-(int)importSystemProfile:(id)arg1 forService:(SCNetworkServiceRef)arg2 ;
-(id)obfuscatePassword:(id)arg1 ;
-(void*)copyTLSCertHandleForIdentityAtPath:(id)arg1 withPassphrase:(id)arg2 intoKeychain:(OpaqueSecKeychainRefRef)arg3 ;
-(CFDictionaryRef)copyGUIConsoleUserDict;
-(id)validatedUniqueID:(id)arg1 checkService:(SCNetworkServiceRef)arg2 ;
-(id)decryptNewStylePassword:(id)arg1 ;
-(char)processTrustedCertificatesForConfig:(id)arg1 isUser:(char)arg2 ;
-(void)addPreferredWirelessNetwork:(id)arg1 onService:(SCNetworkServiceRef)arg2 withSecurityType:(id)arg3 ;
-(id)accountForProxyServer:(id)arg1 port:(id)arg2 andKind:(int)arg3 ;
-(int)listAllUserProfiles;
-(int)listLoginProfilesForService:(id)arg1 ;
-(int)setEnabled:(char)arg1 systemProfileForService:(id)arg2 ;
-(int)setEnabled:(char)arg1 loginProfile:(id)arg2 forService:(id)arg3 ;
-(int)setEnabled:(char)arg1 userProfile:(id)arg2 ;
-(int)import8021xFromFile:(id)arg1 forService:(id)arg2 ;
-(int)export8021xToFile:(id)arg1 fromService:(id)arg2 includeKeychainItems:(char)arg3 options:(id)arg4 ;
-(int)setTLSIdentityAtPath:(id)arg1 forService:(id)arg2 withPassphrase:(id)arg3 ;
-(int)setTLSIdentityAtPath:(id)arg1 onUserProfile:(id)arg2 withPassphrase:(id)arg3 ;
-(int)deleteUserProfile:(id)arg1 ;
-(int)deleteLoginProfile:(id)arg1 forService:(id)arg2 ;
-(int)deleteSystemProfileForService:(id)arg1 ;
-(int)setComputerName:(id)arg1 ;
-(SCNetworkSetRef)copyLocation:(id)arg1 ;
-(int)removeService:(id)arg1 ;
-(id)init;
-(void)dealloc;
@end

