/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:37:27 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Applications/Mail.app/Contents/MacOS/Mail
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Mail/Mail-Structs.h>
#import <Mail/TilingWebView.h>
#import <Mail/NSInspectorBarClient.h>
#import <Mail/NSTextInputClient.h>

@class DOMHTMLElement, DOMNode, NSString;

@interface EditingMessageWebView : TilingWebView <NSInspectorBarClient, NSTextInputClient> {

	DOMHTMLElement* _contentElement;
	char _delegateRespondsToCanInsertFromDraggingInfo;
	char _delegateRespondsToCanInsertFromPasteboard;
	DOMNode* _cursorPositionNode;

}

@property (nonatomic,retain) DOMNode * cursorPositionNode;                                  //@synthesize cursorPositionNode=_cursorPositionNode - In the implementation block
@property (assign,nonatomic) char delegateRespondsToCanInsertFromDraggingInfo;              //@synthesize delegateRespondsToCanInsertFromDraggingInfo=_delegateRespondsToCanInsertFromDraggingInfo - In the implementation block
@property (assign,nonatomic) char delegateRespondsToCanInsertFromPasteboard;                //@synthesize delegateRespondsToCanInsertFromPasteboard=_delegateRespondsToCanInsertFromPasteboard - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)insertablePasteboardTypes;
-(id)contentElement;
-(void)saveMessageToDrafts:(id)arg1 ;
-(void)makeFontBigger:(id)arg1 ;
-(void)makeFontSmaller:(id)arg1 ;
-(void)layoutResizingAttachmentViews;
-(void)saveSelectionForUndo;
-(void)insertNode:(id)arg1 parent:(id)arg2 nextSibling:(id)arg3 ;
-(void)deleteNode:(id)arg1 ;
-(void)loadHTMLString:(id)arg1 baseURL:(id)arg2 resourcesToAttach:(id)arg3 ;
-(void)removeAllFormatting;
-(void)convertToNumberedList:(id)arg1 ;
-(void)convertToBulletedList:(id)arg1 ;
-(void)increaseListNestingLevel:(id)arg1 ;
-(void)decreaseListNestingLevel:(id)arg1 ;
-(void)setContentElement:(id)arg1 ;
-(id)insertablePasteboardTypes;
-(void)setDelegateRespondsToCanInsertFromPasteboard:(char)arg1 ;
-(void)setDelegateRespondsToCanInsertFromDraggingInfo:(char)arg1 ;
-(char)_replaceSelectionWithPasteboardContentsDraggingInfo:(id)arg1 pasteboard:(id)arg2 pasteboardType:(id)arg3 action:(long long)arg4 options:(long long)arg5 ;
-(void)setMainDocumentURI:(id)arg1 ;
-(void)setStyleProperty:(id)arg1 value:(id)arg2 priority:(id)arg3 ofElement:(id)arg4 ;
-(char)_replaceSelectionWithContentsOfWebpage:(id)arg1 ;
-(unsigned long long)pastedContactCounter;
-(unsigned long long)pastedGraphicCounter;
-(char)removeFormattingFromTree:(id)arg1 forDocument:(id)arg2 hasDocumentContext:(char)arg3 imageStrippingMode:(int)arg4 ;
-(char)_removeAllQuotingFromTree:(id)arg1 ;
-(id)_createAttachmentsForResources:(id)arg1 inFragment:(id)arg2 ;
-(char)_replaceSelectionWithFragment:(id)arg1 attachments:(id)arg2 pasteboard:(id)arg3 types:(id)arg4 action:(long long)arg5 options:(long long)arg6 isPlainText:(char)arg7 ;
-(void)_clearExistingHTML;
-(void)pasteWithCurrentStyle:(id)arg1 ;
-(void)pasteAsQuotation:(id)arg1 ;
-(void)removeStyle:(id)arg1 ;
-(id)selectedAnchor;
-(char)selectionCouldBeMadeIntoALink;
-(void)changeQuoteLevel:(id)arg1 ;
-(void)increaseIndentation:(id)arg1 ;
-(void)decreaseIndentation:(id)arg1 ;
-(char)selectionIsInList;
-(void)_insertNode:(id)arg1 parent:(id)arg2 offset:(unsigned)arg3 ;
-(void)setValue:(id)arg1 forAttribute:(id)arg2 ofElement:(id)arg3 ;
-(void)insertTemporarySelectionMarkersForRange:(id)arg1 ;
-(char)_removeAllFormatting:(int)arg1 ;
-(void)_restoreSelectionFromTemporaryMarkers:(char)arg1 ;
-(char)removeHeadFromDocument:(id)arg1 ;
-(id)temporaryEndingSelectionMarker;
-(void)setSelectionStart:(id)arg1 offset:(int)arg2 end:(id)arg3 offset:(int)arg4 affinity:(unsigned long long)arg5 ;
-(id)mailPreferredPboardTypeFromTypes:(id)arg1 pasteboard:(id)arg2 isForDrag:(char)arg3 preferHTML:(char)arg4 ;
-(char)replaceSelectionWithPasteboardContentsDraggingInfo:(id)arg1 pasteboardType:(id)arg2 action:(long long)arg3 options:(long long)arg4 ;
-(void)restoreSelectionFromTemporaryMarkers;
-(char)replaceSelectionWithPasteboardContentsPasteboard:(id)arg1 pasteboardType:(id)arg2 action:(long long)arg3 options:(long long)arg4 ;
-(DOMNode *)cursorPositionNode;
-(void)setCursorPositionNode:(DOMNode *)arg1 ;
-(void)_changeIndentationIfAllowed:(long long)arg1 ;
-(void)changeIndentation:(long long)arg1 ;
-(void)_removeFragmentBlockQuote:(id)arg1 ;
-(void)deleteRange:(id)arg1 ;
-(void)_splitUpBlockQuotesOverlappingStartOfRange:(id)arg1 ;
-(void)_splitUpBlockQuotesOverlappingEndOfRange:(id)arg1 ;
-(void)_removeBlockQuoteFromTree:(id)arg1 ;
-(void)replaceNode:(id)arg1 oldNode:(id)arg2 ;
-(void)convertListFromType:(id)arg1 toType:(id)arg2 undoTitle:(id)arg3 ;
-(char)selectionIsInListTypes:(id)arg1 ;
-(id)selectedContainerWithNameInArray:(id)arg1 ;
-(char)selectionIsInListType:(id)arg1 ;
-(char)validateUserInterfaceItem:(id)arg1 fallThrough:(char*)arg2 ;
-(char)selectionIsInEmptyListItem;
-(id)textInput;
-(char)replaceSelectionUsingContext:(id)arg1 ;
-(char)isSelectionInContentElement;
-(char)removeNonBodyChildrenAndAttributesFromMainDocumentElement;
-(char)resetMainDocumentBodyAttributes;
-(void)deleteTemporarySelectionMarkersFromDocument:(id)arg1 ;
-(id)temporaryStartingSelectionMarker;
-(char)isFirstLineOfDocument;
-(void)insertNode:(id)arg1 atRange:(id)arg2 ;
-(void)addHorizontalRule:(id)arg1 ;
-(void)changeDocumentBackgroundColorToColor:(id)arg1 ;
-(void)insertListWithNumbers:(char)arg1 undoTitle:(id)arg2 ;
-(char)validateMenuItem:(id)arg1 fallThrough:(char*)arg2 ;
-(char)delegateRespondsToCanInsertFromDraggingInfo;
-(char)delegateRespondsToCanInsertFromPasteboard;
-(void)editLink:(id)arg1 ;
-(char)isActive;
-(char)validateUserInterfaceItem:(id)arg1 ;
-(void)doCommandBySelector:(SEL)arg1 ;
-(void)undo:(id)arg1 ;
-(void)redo:(id)arg1 ;
-(void)registerForDraggedTypes:(id)arg1 ;
-(char)becomeFirstResponder;
-(unsigned long long)draggingEntered:(id)arg1 ;
-(unsigned long long)draggingUpdated:(id)arg1 ;
-(void)draggingExited:(id)arg1 ;
-(char)performDragOperation:(id)arg1 ;
-(void)paste:(id)arg1 ;
-(char)hasMarkedText;
-(NSRange)selectedRange;
-(char)prepareForDragOperation:(id)arg1 ;
-(void)concludeDragOperation:(id)arg1 ;
-(char)wantsPeriodicDraggingUpdates;
-(void)removeLink:(id)arg1 ;
-(unsigned long long)characterIndexForPoint:(CGPoint)arg1 ;
-(void)unmarkText;
-(id)validAttributesForMarkedText;
-(NSRange)markedRange;
-(void)viewDidEndLiveResize;
-(void)insertText:(id)arg1 replacementRange:(NSRange)arg2 ;
-(void)setMarkedText:(id)arg1 selectedRange:(NSRange)arg2 replacementRange:(NSRange)arg3 ;
-(char)isAutomaticLinkDetectionEnabled;
-(void)viewWillStartLiveResize;
-(id)beginDraggingSessionWithItems:(id)arg1 event:(id)arg2 source:(id)arg3 ;
-(id)attributedSubstringForProposedRange:(NSRange)arg1 actualRange:(NSRange*)arg2 ;
-(CGRect)firstRectForCharacterRange:(NSRange)arg1 actualRange:(NSRange*)arg2 ;
-(id)inspectorBarItemIdentifiers;
-(char)_isContentEditable;
-(char)maintainsInactiveSelection;
-(void)setEditingDelegate:(id)arg1 ;
-(id)editingDelegate;
@end

