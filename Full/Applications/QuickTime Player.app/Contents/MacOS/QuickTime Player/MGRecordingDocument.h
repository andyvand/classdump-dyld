/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:50:47 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Applications/QuickTime Player.app/Contents/MacOS/QuickTime Player
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <QuickTime Player/QuickTime Player-Structs.h>
#import <QuickTime Player/MGDocument.h>
#import <QuickTime Player/AVCaptureFileOutputDelegate.h>
#import <QuickTime Player/AVCaptureFileOutputRecordingDelegate.h>

@class NSURL, NSArray, AVCaptureSession, AVCaptureFileOutput, NSError, MGFormatDescription, MGCaptureCompressionPreset, NSString;

@interface MGRecordingDocument : MGDocument <AVCaptureFileOutputDelegate, AVCaptureFileOutputRecordingDelegate> {

	NSURL* _outputDirectory;
	unsigned _videoFormatFourCC;
	unsigned _audioFormatFourCC;
	opaqueCMFormatDescriptionRef _lastOutputVideoFormat;
	opaqueCMFormatDescriptionRef _lastOutputAudioFormat;
	unsigned _flags;
	NSArray* _tagNamesFromLastRunSavePanel;
	unsigned long long _recordingType;
	AVCaptureSession* _captureSession;
	AVCaptureFileOutput* _captureFileOutput;
	NSURL* _outputFile;
	NSError* _recordingError;
	MGFormatDescription* _outputVideoFormat;
	MGFormatDescription* _outputAudioFormat;
	MGCaptureCompressionPreset* _compressionPreset;
	/*^block*/id _closeAfterRecordingHandler;

}

@property (nonatomic,readonly) AVCaptureSession * captureSession;                         //@synthesize captureSession=_captureSession - In the implementation block
@property (nonatomic,readonly) AVCaptureFileOutput * captureFileOutput;                   //@synthesize captureFileOutput=_captureFileOutput - In the implementation block
@property (nonatomic,copy) NSURL * outputDirectory; 
@property (nonatomic,readonly) NSURL * outputFile;                                        //@synthesize outputFile=_outputFile - In the implementation block
@property (getter=isReady,readonly) char ready; 
@property (getter=isRecording,readonly) char recording; 
@property (getter=isFinishingRecording,readonly) char finishingRecording; 
@property (getter=isPaused,readonly) char paused; 
@property (nonatomic,copy) NSError * recordingError;                                      //@synthesize recordingError=_recordingError - In the implementation block
@property (nonatomic,retain) MGFormatDescription * outputVideoFormat;                     //@synthesize outputVideoFormat=_outputVideoFormat - In the implementation block
@property (nonatomic,retain) MGFormatDescription * outputAudioFormat;                     //@synthesize outputAudioFormat=_outputAudioFormat - In the implementation block
@property (nonatomic,retain) MGCaptureCompressionPreset * compressionPreset;              //@synthesize compressionPreset=_compressionPreset - In the implementation block
@property (copy) id closeAfterRecordingHandler;                                           //@synthesize closeAfterRecordingHandler=_closeAfterRecordingHandler - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)modifiedFormatDescriptionFromFormatDescription:(opaqueCMFormatDescriptionRef)arg1 formatFourCC:(unsigned)arg2 ;
+(id)keyPathsForValuesAffectingPaused;
+(char)autosavesInPlace;
+(char)autosavesDrafts;
-(id)initWithRecordingType:(unsigned long long)arg1 ;
-(MGCaptureCompressionPreset *)compressionPreset;
-(NSURL *)outputFile;
-(MGFormatDescription *)outputVideoFormat;
-(MGFormatDescription *)outputAudioFormat;
-(id)baseOutputFileName;
-(void)setCompressionPreset:(MGCaptureCompressionPreset *)arg1 ;
-(AVCaptureFileOutput *)captureFileOutput;
-(void)applyCompressionOptionsToCaptureSession;
-(char)startWritingDataToURL:(id)arg1 error:(id*)arg2 ;
-(void)stopWritingData;
-(void)recordingDocumentWorkspaceSessionDidResignActive:(id)arg1 ;
-(void)recordingDocumentWorkspaceWillSleep:(id)arg1 ;
-(void)captureSessionRuntimeErrorDidOccur:(id)arg1 ;
-(void)setOutputDirectory:(NSURL *)arg1 ;
-(void)setOutputVideoFormat:(MGFormatDescription *)arg1 ;
-(void)setOutputAudioFormat:(MGFormatDescription *)arg1 ;
-(NSURL *)outputDirectory;
-(void)captureFileOutputDidOutputSampleBuffer:(opaqueCMSampleBufferRef)arg1 fromConnection:(id)arg2 ;
-(void)fileOutputWillFinishRecording;
-(void)finishRecordingAndOpenDocumentWithURL:(id)arg1 ;
-(void)recordingDidFinish;
-(void)setRecordingError:(NSError *)arg1 ;
-(void)canCloseDocumentAlertDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void*)arg3 ;
-(NSError *)recordingError;
-(id)closeAfterRecordingHandler;
-(void)setCloseAfterRecordingHandler:(id)arg1 ;
-(void)applyDocumentErrorsToScriptCommand:(id)arg1 ;
-(void)handleStartCommand:(id)arg1 ;
-(void)handleStopCommand:(id)arg1 ;
-(void)document:(id)arg1 didSave:(char)arg2 contextInfo:(void*)arg3 ;
-(char)isReady;
-(char)isFinishingRecording;
-(id)outputFileType;
-(void)captureOutput:(id)arg1 didOutputSampleBuffer:(opaqueCMSampleBufferRef)arg2 fromConnection:(id)arg3 ;
-(void)captureOutput:(id)arg1 willFinishRecordingToOutputFileAtURL:(id)arg2 fromConnections:(id)arg3 error:(id)arg4 ;
-(void)captureOutput:(id)arg1 didFinishRecordingToOutputFileAtURL:(id)arg2 fromConnections:(id)arg3 error:(id)arg4 ;
-(void)stopRecording;
-(char)isRecording;
-(void)pauseRecording;
-(void)resumeRecording;
-(char)captureOutputShouldProvideSampleAccurateRecordingStart:(id)arg1 ;
-(void)startRecording;
-(AVCaptureSession *)captureSession;
-(id)init;
-(void)dealloc;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)commitEditingWithDelegate:(id)arg1 didCommitSelector:(SEL)arg2 contextInfo:(void*)arg3 ;
-(char)validateUserInterfaceItem:(id)arg1 ;
-(id)willPresentError:(id)arg1 ;
-(void)close;
-(id)displayName;
-(id)writableTypesForSaveOperation:(unsigned long long)arg1 ;
-(id)tagNamesFromLastRunSavePanel;
-(char)writeToURL:(id)arg1 ofType:(id)arg2 error:(id*)arg3 ;
-(void)saveDocumentWithDelegate:(id)arg1 didSaveSelector:(SEL)arg2 contextInfo:(void*)arg3 ;
-(void)runModalSavePanelForSaveOperation:(unsigned long long)arg1 delegate:(id)arg2 didSaveSelector:(SEL)arg3 contextInfo:(void*)arg4 ;
-(char)canAsynchronouslyWriteToURL:(id)arg1 ofType:(id)arg2 forSaveOperation:(unsigned long long)arg3 ;
-(void)canCloseDocumentWithDelegate:(id)arg1 shouldCloseSelector:(SEL)arg2 contextInfo:(void*)arg3 ;
-(char)_shouldShowAutosaveButtonForWindow:(id)arg1 ;
-(char)isPaused;
@end

