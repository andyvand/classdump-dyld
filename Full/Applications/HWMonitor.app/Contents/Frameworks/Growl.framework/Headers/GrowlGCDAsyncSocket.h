/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 12:17:16 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Applications/HWMonitor.app/Contents/Frameworks/Growl.framework/Growl
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <Growl/Growl-Structs.h>
@class NSData, NSMutableArray, GrowlGCDAsyncReadPacket, GrowlGCDAsyncWritePacket, NSMutableData;

@interface GrowlGCDAsyncSocket : NSObject {

	unsigned flags;
	unsigned short config;
	id delegate;
	dispatch_queue_sRef delegateQueue;
	int socket4FD;
	int socket6FD;
	int connectIndex;
	NSData* connectInterface4;
	NSData* connectInterface6;
	dispatch_queue_sRef socketQueue;
	dispatch_source_sRef accept4Source;
	dispatch_source_sRef accept6Source;
	dispatch_source_sRef connectTimer;
	dispatch_source_sRef readSource;
	dispatch_source_sRef writeSource;
	dispatch_source_sRef readTimer;
	dispatch_source_sRef writeTimer;
	NSMutableArray* readQueue;
	NSMutableArray* writeQueue;
	GrowlGCDAsyncReadPacket* currentRead;
	GrowlGCDAsyncWritePacket* currentWrite;
	unsigned long long socketFDBytesAvailable;
	NSMutableData* partialReadBuffer;
	SSLContextRef sslContext;
	NSMutableData* sslReadBuffer;
	unsigned long long sslWriteCachedLength;
	id userData;

}
+(id)CRLFData;
+(unsigned short)portFromAddress:(id)arg1 ;
+(id)hostFromSockaddr4:(const sockaddr_in*)arg1 ;
+(id)hostFromSockaddr6:(const sockaddr_in6*)arg1 ;
+(unsigned short)portFromSockaddr4:(const sockaddr_in*)arg1 ;
+(unsigned short)portFromSockaddr6:(const sockaddr_in6*)arg1 ;
+(char)getHost:(id*)arg1 port:(unsigned short*)arg2 fromAddress:(id)arg3 ;
+(id)hostFromAddress:(id)arg1 ;
+(id)CRData;
+(id)LFData;
+(id)ZeroData;
-(void)synchronouslySetDelegate:(id)arg1 ;
-(char)connectToAddress:(id)arg1 withTimeout:(double)arg2 error:(id*)arg3 ;
-(char)connectToHost:(id)arg1 onPort:(unsigned short)arg2 withTimeout:(double)arg3 error:(id*)arg4 ;
-(void)readDataToData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3 ;
-(void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3 ;
-(id)initWithDelegate:(id)arg1 delegateQueue:(dispatch_queue_sRef)arg2 socketQueue:(dispatch_queue_sRef)arg3 ;
-(void)closeWithError:(id)arg1 ;
-(void)setDelegate:(id)arg1 synchronously:(char)arg2 ;
-(void)setDelegateQueue:(dispatch_queue_sRef)arg1 synchronously:(char)arg2 ;
-(void)setDelegate:(id)arg1 delegateQueue:(dispatch_queue_sRef)arg2 synchronously:(char)arg3 ;
-(char)acceptOnInterface:(id)arg1 port:(unsigned short)arg2 error:(id*)arg3 ;
-(id)errnoErrorWithReason:(id)arg1 ;
-(id)badConfigError:(id)arg1 ;
-(void)getInterfaceAddress4:(id*)arg1 address6:(id*)arg2 fromDescription:(id)arg3 port:(unsigned short)arg4 ;
-(id)badParamError:(id)arg1 ;
-(unsigned short)localPort4;
-(char)doAccept:(int)arg1 ;
-(void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)arg1 ;
-(char)connectToHost:(id)arg1 onPort:(unsigned short)arg2 viaInterface:(id)arg3 withTimeout:(double)arg4 error:(id*)arg5 ;
-(char)preConnectWithInterface:(id)arg1 error:(id*)arg2 ;
-(void)lookup:(int)arg1 host:(id)arg2 port:(unsigned short)arg3 ;
-(void)startConnectTimeout:(double)arg1 ;
-(char)connectToAddress:(id)arg1 viaInterface:(id)arg2 withTimeout:(double)arg3 error:(id*)arg4 ;
-(char)connectWithAddress4:(id)arg1 address6:(id)arg2 error:(id*)arg3 ;
-(id)gaiError:(int)arg1 ;
-(void)lookup:(int)arg1 didFail:(id)arg2 ;
-(void)lookup:(int)arg1 didSucceedWithAddress4:(id)arg2 address6:(id)arg3 ;
-(id)otherError:(id)arg1 ;
-(void)endConnectTimeout;
-(void)didConnect:(int)arg1 ;
-(void)didNotConnect:(int)arg1 error:(id)arg2 ;
-(id)connectedHost;
-(void)maybeDequeueRead;
-(void)maybeDequeueWrite;
-(void)doConnectTimeout;
-(id)connectTimeoutError;
-(void)endCurrentRead;
-(void)endCurrentWrite;
-(void)resumeReadSource;
-(void)resumeWriteSource;
-(void)maybeClose;
-(id)connectedHostFromSocket4:(int)arg1 ;
-(id)connectedHostFromSocket6:(int)arg1 ;
-(unsigned short)connectedPortFromSocket4:(int)arg1 ;
-(unsigned short)connectedPortFromSocket6:(int)arg1 ;
-(id)localHostFromSocket4:(int)arg1 ;
-(id)localHostFromSocket6:(int)arg1 ;
-(unsigned short)localPortFromSocket4:(int)arg1 ;
-(unsigned short)localPortFromSocket6:(int)arg1 ;
-(void)doReadData;
-(void)doReadEOF;
-(void)doWriteData;
-(void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 maxLength:(unsigned long long)arg4 tag:(long long)arg5 ;
-(void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5 ;
-(void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 maxLength:(unsigned long long)arg5 tag:(long long)arg6 ;
-(void)maybeStartTLS;
-(void)setupReadTimerWithTimeout:(double)arg1 ;
-(void)flushSSLBuffers;
-(char)usingCFStream;
-(void)suspendReadSource;
-(void)continueSSLHandshake;
-(id)readMaxedOutError;
-(id)sslError:(int)arg1 ;
-(void)completeCurrentRead;
-(id)connectionClosedError;
-(void)doReadTimeout;
-(void)doReadTimeoutWithExtension:(double)arg1 ;
-(id)readTimeoutError;
-(void)setupWriteTimerWithTimeout:(double)arg1 ;
-(void)suspendWriteSource;
-(void)completeCurrentWrite;
-(void)doWriteTimeout;
-(void)doWriteTimeoutWithExtension:(double)arg1 ;
-(id)writeTimeoutError;
-(id)initWithSocketQueue:(dispatch_queue_sRef)arg1 ;
-(void)synchronouslySetDelegateQueue:(dispatch_queue_sRef)arg1 ;
-(void)getDelegate:(id*)arg1 delegateQueue:(dispatch_queue_s*)arg2 ;
-(void)setDelegate:(id)arg1 delegateQueue:(dispatch_queue_sRef)arg2 ;
-(void)synchronouslySetDelegate:(id)arg1 delegateQueue:(dispatch_queue_sRef)arg2 ;
-(char)autoDisconnectOnClosedReadStream;
-(void)setAutoDisconnectOnClosedReadStream:(char)arg1 ;
-(char)isIPv4Enabled;
-(void)setIPv4Enabled:(char)arg1 ;
-(char)isIPv6Enabled;
-(void)setIPv6Enabled:(char)arg1 ;
-(char)isIPv4PreferredOverIPv6;
-(void)setPreferIPv4OverIPv6:(char)arg1 ;
-(char)acceptOnPort:(unsigned short)arg1 error:(id*)arg2 ;
-(char)connectToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id*)arg3 ;
-(char)connectToAddress:(id)arg1 error:(id*)arg2 ;
-(void)disconnectAfterReading;
-(void)disconnectAfterWriting;
-(void)disconnectAfterReadingAndWriting;
-(id)errnoError;
-(id)localHost;
-(unsigned short)localPort;
-(id)connectedHost4;
-(id)connectedHost6;
-(unsigned short)connectedPort4;
-(unsigned short)connectedPort6;
-(id)localHost4;
-(id)localHost6;
-(unsigned short)localPort6;
-(id)connectedAddress;
-(id)localAddress;
-(char)isIPv4;
-(char)isIPv6;
-(void)readDataWithTimeout:(double)arg1 tag:(long long)arg2 ;
-(void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 tag:(long long)arg4 ;
-(void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 tag:(long long)arg3 ;
-(void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5 ;
-(void)readDataToData:(id)arg1 withTimeout:(double)arg2 maxLength:(unsigned long long)arg3 tag:(long long)arg4 ;
-(void)startTLS:(id)arg1 ;
-(int)sslReadWithBuffer:(void*)arg1 length:(unsigned long long*)arg2 ;
-(int)sslWriteWithBuffer:(const void*)arg1 length:(unsigned long long*)arg2 ;
-(int)socketFD;
-(int)socket4FD;
-(int)socket6FD;
-(SSLContextRef)sslContext;
-(id)initWithDelegate:(id)arg1 delegateQueue:(dispatch_queue_sRef)arg2 ;
-(char)isSecure;
-(void)disconnect;
-(void)setDelegateQueue:(dispatch_queue_sRef)arg1 ;
-(char)isDisconnected;
-(void)performBlock:(/*^block*/id)arg1 ;
-(id)init;
-(void)setDelegate:(id)arg1 ;
-(void)dealloc;
-(char)isConnected;
-(id)delegate;
-(id)userData;
-(dispatch_queue_sRef)delegateQueue;
-(unsigned short)connectedPort;
-(void)setUserData:(id)arg1 ;
@end

