/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 12:16:45 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Applications/Automator.app/Contents/MacOS/Automator
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Automator/Automator-Structs.h>
#import <AppKit/NSWindowController.h>
#import <Automator/NSToolbarDelegate.h>
#import <Automator/NSWindowDelegate.h>
#import <Automator/AMMediaPanelObserver.h>

@class AMSplitView, NSView, AMWorkflowView, NSTabView, AMGlossyStatusView, NSProgressIndicator, NSTextField, NSButton, AMWorkflowController, AMLogViewController, AMVariablesViewController, AMLibraryViewController, AMWorkflowLog, AMAction, NSWindowController, AMLoadingErrorsDisplayController, AMPersonalityChooserDisplayController, NSDictionary, NSString;

@interface AMDocumentWindowController : NSWindowController <NSToolbarDelegate, NSWindowDelegate, AMMediaPanelObserver> {

	AMSplitView* majorSplitView;
	NSView* libraryViewContainer;
	AMWorkflowView* workflowView;
	AMSplitView* minorSplitView;
	NSTabView* logTabView;
	AMGlossyStatusView* statusView;
	NSProgressIndicator* progressIndicator;
	NSTextField* statusField;
	NSButton* logButton;
	NSButton* variablesButton;
	NSButton* workflowStatusButton;
	AMWorkflowController* _workflowController;
	AMLogViewController* _logViewController;
	AMVariablesViewController* _variablesViewController;
	AMLibraryViewController* _libraryViewController;
	AMWorkflowLog* _workflowLog;
	AMAction* _recordingAction;
	NSWindowController* _recordingHUDWindowController;
	AMLoadingErrorsDisplayController* _loadingErrorsDisplayController;
	AMPersonalityChooserDisplayController* _startingPointsDisplayController;
	AMPersonalityChooserDisplayController* _convertDisplayController;
	NSDictionary* _blackTextAttributes;
	NSDictionary* _grayTextAttributes;
	int _documentWindowControllerState;
	char _observersAdded;
	/*^block*/id _versionBrowserExitBlock;

}

@property (retain,readonly) AMWorkflowController * workflowController;                                            //@synthesize workflowController=_workflowController - In the implementation block
@property (retain,readonly) AMWorkflowView * workflowView; 
@property (retain,readonly) AMWorkflowLog * workflowLog;                                                          //@synthesize workflowLog=_workflowLog - In the implementation block
@property (setter=setHUDEnabled:,getter=hudEnabled) char hudEnabled; 
@property (readonly) char isShowingLibrary; 
@property (assign) int documentWindowControllerState;                                                             //@synthesize documentWindowControllerState=_documentWindowControllerState - In the implementation block
@property (readonly) char personalityControllerExists; 
@property (retain,readonly) AMVariablesViewController * variablesViewController;                                  //@synthesize variablesViewController=_variablesViewController - In the implementation block
@property (retain,readonly) AMPersonalityChooserDisplayController * startingPointsDisplayController; 
@property (retain) AMAction * recordingAction;                                                                    //@synthesize recordingAction=_recordingAction - In the implementation block
@property (readonly) char documentIsInViewingMode; 
@property (copy) id versionBrowserExitBlock;                                                                      //@synthesize versionBrowserExitBlock=_versionBrowserExitBlock - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(char)hasLoadedWindow;
+(void)findAndPlaySoundNamed:(id)arg1 soundID:(unsigned*)arg2 ;
+(void)playCompletedSound;
+(void)playFailedSound;
+(id)keyPathsForValuesAffectingValueForKey:(id)arg1 ;
-(AMWorkflowLog *)workflowLog;
-(char)personalityControllerExists;
-(char)isShowingLibrary;
-(void)toggleLibrary:(id)arg1 ;
-(void)recursiveRemoveFromMaps:(id)arg1 ;
-(char)documentIsInViewingMode;
-(void)setVersionBrowserExitBlock:(id)arg1 ;
-(void)setDocumentWindowControllerState:(int)arg1 ;
-(void)updateStatusBarButtons;
-(void)didStopRecording:(id)arg1 ;
-(void)displayLoadingErrors:(id)arg1 ;
-(void)displayStartingPoints;
-(void)setupToolbar;
-(void)notifyWorkflowOfActivation;
-(void)stopProgress;
-(id)workflowFinishedStatusMessageWithError:(id)arg1 ;
-(id)toolbarItemWithIdentifier:(id)arg1 ;
-(char)canStep;
-(char)canRecord;
-(id)loadingErrorsDisplayController;
-(int)documentWindowControllerState;
-(AMPersonalityChooserDisplayController *)startingPointsDisplayController;
-(void)startingPointsSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void*)arg3 ;
-(id)convertDisplayController;
-(void)convertToSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void*)arg3 ;
-(void)toggleWorkflowLog:(id)arg1 ;
-(void)toggleVariablesView:(id)arg1 ;
-(void)setRecordingAction:(AMAction *)arg1 ;
-(void)document:(id)arg1 didDuplicateWithConversion:(char)arg2 contextInfo:(void*)arg3 ;
-(void)recordUIEvents:(id)arg1 ;
-(char)isShowingMediaPanel;
-(void)toggleMediaPanel:(id)arg1 ;
-(void)hideHUD:(id)arg1 ;
-(char)isShowingLogView;
-(id)versionBrowserExitBlock;
-(char)canRunOrPause;
-(void)showWorkflowLog:(id)arg1 ;
-(void)resetWorkflow:(id)arg1 ;
-(void)convertTo:(id)arg1 ;
-(void)noAccessibilityAlertDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void*)arg3 ;
-(void)findInLibrary:(id)arg1 ;
-(void)showLibrary:(id)arg1 ;
-(void)deleteVariable:(id)arg1 ;
-(void)showHUD:(id)arg1 ;
-(AMVariablesViewController *)variablesViewController;
-(AMAction *)recordingAction;
-(AMWorkflowController *)workflowController;
-(AMWorkflowView *)workflowView;
-(void)showVariablesView:(id)arg1 ;
-(char)canRun;
-(void)workflowControllerWillRun:(id)arg1 ;
-(void)workflowControllerDidRun:(id)arg1 ;
-(void)workflowControllerDidStop:(id)arg1 ;
-(void)workflowControllerDidPause:(id)arg1 ;
-(void)workflowController:(id)arg1 willRunAction:(id)arg2 ;
-(void)workflowController:(id)arg1 didRunAction:(id)arg2 ;
-(void)workflowController:(id)arg1 didError:(id)arg2 ;
-(void)workflowController:(id)arg1 didLogMessage:(id)arg2 ofType:(unsigned long long)arg3 fromAction:(id)arg4 ;
-(void)workflowController:(id)arg1 willRunConversion:(id)arg2 ;
-(void)workflowController:(id)arg1 didRunConversion:(id)arg2 ;
-(void)workflowController:(id)arg1 didResumeWithAction:(id)arg2 ;
-(void)workflow:(id)arg1 didAddVariable:(id)arg2 ;
-(void)workflowController:(id)arg1 workflowWasModified:(id)arg2 ;
-(void)step:(id)arg1 ;
-(void)removeFromMaps_ask;
-(void)selectActionInLibrary:(id)arg1 ;
-(void)mediaPanelDidOpen:(id)arg1 ;
-(void)mediaPanelDidClose:(id)arg1 ;
-(void)addAutomatorActions:(id)arg1 ;
-(void)addAutomatorVariables:(id)arg1 ;
-(void)editGroup:(id)arg1 ;
-(void)addSmartGroup:(id)arg1 ;
-(void)removeGroups:(id)arg1 ;
-(char)canStop;
-(void)addGroup:(id)arg1 ;
-(void)startProgress;
-(void)dealloc;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)encodeRestorableStateWithCoder:(id)arg1 ;
-(void)restoreStateWithCoder:(id)arg1 ;
-(char)isRunning;
-(char)validateMenuItem:(id)arg1 ;
-(void)stop:(id)arg1 ;
-(id)toolbar:(id)arg1 itemForItemIdentifier:(id)arg2 willBeInsertedIntoToolbar:(char)arg3 ;
-(id)toolbarDefaultItemIdentifiers:(id)arg1 ;
-(id)toolbarAllowedItemIdentifiers:(id)arg1 ;
-(void)windowWillClose:(id)arg1 ;
-(id)windowNibName;
-(char)windowShouldClose:(id)arg1 ;
-(void)windowDidBecomeMain:(id)arg1 ;
-(void)windowWillEnterVersionBrowser:(id)arg1 ;
-(void)windowWillExitVersionBrowser:(id)arg1 ;
-(void)windowDidLoad;
-(char)splitView:(id)arg1 canCollapseSubview:(id)arg2 ;
-(char)splitView:(id)arg1 shouldCollapseSubview:(id)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3 ;
-(double)splitView:(id)arg1 constrainSplitPosition:(double)arg2 ofSubviewAt:(long long)arg3 ;
-(void)splitViewDidResizeSubviews:(id)arg1 ;
-(void)tabView:(id)arg1 didSelectTabViewItem:(id)arg2 ;
-(char)isPaused;
-(void)run:(id)arg1 ;
-(void)pause:(id)arg1 ;
-(char)hudEnabled;
-(void)setHUDEnabled:(char)arg1 ;
@end

