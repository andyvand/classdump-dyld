/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:08:25 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Library/Application Support/iLifeMediaBrowser/Plug-Ins/iLMBAperture31Plugin.ilmbplugin/Contents/MacOS/iLMBAperture31Plugin
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <iLMBAperture31Plugin/iLMBAperture31Plugin-Structs.h>
@class NSNumber, ILMB_APERTURE_HgEntity;

@interface ILMB_APERTURE_HgModel : NSObject {

	int _spinlock;
	unsigned _flags;
	NSNumber* _modelId;
	ILMB_APERTURE_HgEntity* _entity;

}

@property (assign,nonatomic) char isInCache; 
@property (assign,nonatomic) char isOpen; 
@property (assign,nonatomic) char skipChangeEntries; 
@property (assign,nonatomic) char wasRecentlyUsed; 
+(void)sendModelsCreated:(id)arg1 ;
+(id)addressesFromDatabase:(id)arg1 where:(id)arg2 ;
+(char)modelExistsInModels:(id)arg1 fromQuery:(id)arg2 ;
+(id)arrayOfModels:(id)arg1 where:(id)arg2 ;
+(id)anyOfModels:(id)arg1 fromQuery:(id)arg2 ;
+(id)dictionaryForKey:(id)arg1 value:(id)arg2 where:(id)arg3 ;
+(id)anyOfModels:(id)arg1 where:(id)arg2 ;
+(id)select:(id)arg1 orderedBy:(id)arg2 where:(id)arg3 ;
+(id)setOfModels:(id)arg1 where:(id)arg2 ;
+(id)addressesFromQuery:(id)arg1 ;
+(void)sendModelContentsChanged:(id)arg1 ;
+(id)select:(id)arg1 orderedBy:(id)arg2 fromQuery:(id)arg3 ;
+(id)dataForColumns:(id)arg1 where:(id)arg2 ;
+(id)setOfModels:(id)arg1 fromQuery:(id)arg2 ;
+(void)sendModelsDeleted:(id)arg1 ;
+(id)arrayOfModels:(id)arg1 fromQuery:(id)arg2 ;
+(id)dictionaryForKey:(id)arg1 value:(id)arg2 fromModels:(id)arg3 where:(id)arg4 ;
+(id)dictionaryForKey:(id)arg1 value:(id)arg2 fromModels:(id)arg3 fromQuery:(id)arg4 ;
+(char)modelExistsInModels:(id)arg1 where:(id)arg2 ;
+(id)dictionaryForKey:(id)arg1 value:(id)arg2 fromQuery:(id)arg3 ;
+(id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 fromDatabase:(id)arg4 where:(id)arg5 ;
+(id)dataForColumns:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4 ;
+(id)dataForColumns:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 ;
+(void)insertIntoRidList:(id)arg1 fromDatabase:(id)arg2 idsForColumn:(id)arg3 where:(id)arg4 ;
+(void)sendModelsPropertyChange:(id)arg1 forProperty:(id)arg2 ;
+(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromModels:(id)arg4 where:(id)arg5 ;
+(id)dictionaryOfModelsForKey:(id)arg1 fromModels:(id)arg2 fromQuery:(id)arg3 ;
+(id)selectDistinct:(id)arg1 fromModels:(id)arg2 fromQuery:(id)arg3 ;
+(id)select:(id)arg1 orderedBy:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 ;
+(void)appendAddressesToArray:(id)arg1 orderedBy:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 ;
+(void)appendAddressesToArray:(id)arg1 orderedBy:(id)arg2 where:(id)arg3 ;
+(void)appendAddressesToArray:(id)arg1 orderedBy:(id)arg2 fromQuery:(id)arg3 ;
+(void)updateColumn:(id)arg1 toValue:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 ;
+(id)modelsFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)modelForId:(id)arg1 ;
+(id)arrayOfModelsFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)modelForUuid:(id)arg1 fromDatabase:(id)arg2 ;
+(id)iteratorFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)modelsWhere:(id)arg1 ;
+(id)selectDistinctList:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 ;
+(id)dictionaryForKey:(id)arg1 value:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 ;
+(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromDatabase:(id)arg4 where:(id)arg5 ;
+(id)dictionaryOfModelsForKey:(id)arg1 fromModels:(id)arg2 where:(id)arg3 ;
+(void)prefetchRelationships:(id)arg1 forObjects:(id)arg2 ;
+(id)selectDistinct:(id)arg1 fromModels:(id)arg2 where:(id)arg3 ;
+(id)selectDistinct:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 ;
+(id)anyModelFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)modelIdListWhere:(id)arg1 ;
+(id)modelsForIdList:(id)arg1 fromDatabase:(id)arg2 ;
+(id)modelsForIds:(id)arg1 fromDatabase:(id)arg2 ;
+(id)modelIdListFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)databaseForModels:(id)arg1 ;
+(id)modelIdsForModels:(id)arg1 ;
+(id)modelForId:(id)arg1 fromDatabase:(id)arg2 ;
+(unsigned long long)countOfModelsFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 where:(id)arg4 ;
+(id)modelIdListForModels:(id)arg1 ;
+(id)modelUuidsFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)selectObjects:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 ;
+(id)modelsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(char)modelExistsFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)modelIdsFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)modelForAddress:(id)arg1 ;
+(id)selectOneObject:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 ;
+(id)modelIdsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(id)selectDistinct:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4 ;
+(id)modelUuidsWhere:(id)arg1 ;
+(id)selectObjects:(id)arg1 fromQuery:(id)arg2 ;
+(id)modelsForIdList:(id)arg1 ;
+(id)modelsFromQuery:(id)arg1 ;
+(id)arrayOfModelsFromQuery:(id)arg1 ;
+(id)iteratorFromQuery:(id)arg1 ;
+(id)modelUuidsFromQuery:(id)arg1 ;
+(id)modelIdsFromQuery:(id)arg1 ;
+(id)selectDistinctList:(id)arg1 fromQuery:(id)arg2 ;
+(id)modelIdListFromQuery:(id)arg1 ;
+(id)selectDistinct:(id)arg1 fromQuery:(id)arg2 ;
+(void)insertIntoRidList:(id)arg1 idsForColumn:(id)arg2 fromQuery:(id)arg3 ;
+(id)selectOneObject:(id)arg1 fromQuery:(id)arg2 ;
+(id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 fromQuery:(id)arg4 ;
+(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromQuery:(id)arg4 ;
+(void)deleteModelsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(void)deleteModelsFromQuery:(id)arg1 ;
+(id)arrayOfModelsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(id)iteratorFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(id)anyModelFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(id)anyModelFromQuery:(id)arg1 ;
+(id)anyOfModels:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(id)arrayOfModels:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(id)setOfModels:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(id)dictionaryForKey:(id)arg1 value:(id)arg2 fromModels:(id)arg3 where:(id)arg4 args:(id)arg5 ;
+(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromModels:(id)arg4 where:(id)arg5 args:(id)arg6 ;
+(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromModels:(id)arg4 fromQuery:(id)arg5 ;
+(char)modelExistsInModels:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(unsigned long long)countOfModelsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(unsigned long long)countOfModelsFromQuery:(id)arg1 ;
+(char)modelExistsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(char)modelExistsFromQuery:(id)arg1 ;
+(id)selectDistinctList:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4 ;
+(id)selectDistinct:(id)arg1 fromModels:(id)arg2 where:(id)arg3 args:(id)arg4 ;
+(id)selectOneObject:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4 ;
+(id)selectObjects:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4 ;
+(id)select:(id)arg1 orderedBy:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 args:(id)arg5 ;
+(void)appendAddressesToArray:(id)arg1 orderedBy:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 args:(id)arg5 ;
+(void)updateColumn:(id)arg1 toValue:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 args:(id)arg5 ;
+(id)dictionaryForKey:(id)arg1 value:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 args:(id)arg5 ;
+(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromDatabase:(id)arg4 where:(id)arg5 args:(id)arg6 ;
+(id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 fromDatabase:(id)arg4 where:(id)arg5 args:(id)arg6 ;
+(id)modelUuidsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(id)modelIdListFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3 ;
+(id)addressesForModelIds:(id)arg1 fromDatabase:(id)arg2 ;
+(void)insertIntoRidList:(id)arg1 fromDatabase:(id)arg2 idsForColumn:(id)arg3 where:(id)arg4 args:(id)arg5 ;
+(void)deleteModelsFromDatabase:(id)arg1 where:(id)arg2 ;
+(id)addressesForModels:(id)arg1 ;
+(id)arrayOfModelsWhere:(id)arg1 ;
+(id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 where:(id)arg4 ;
+(void)insertIntoRidList:(id)arg1 idsForColumn:(id)arg2 where:(id)arg3 ;
+(id)modelIdsWhere:(id)arg1 ;
+(unsigned long long)countOfModelsWhere:(id)arg1 ;
+(id)selectDistinctList:(id)arg1 where:(id)arg2 ;
+(id)selectObjects:(id)arg1 where:(id)arg2 ;
+(id)iteratorWhere:(id)arg1 ;
+(id)modelsForAddresses:(id)arg1 ;
+(void)updateColumn:(id)arg1 toValue:(id)arg2 where:(id)arg3 ;
+(char)modelExistsWhere:(id)arg1 ;
+(id)anyModel:(id)arg1 ;
+(id)anyModelWhere:(id)arg1 ;
+(void)deleteModelsWhere:(id)arg1 ;
+(id)selectDistinct:(id)arg1 where:(id)arg2 ;
+(id)selectOneObject:(id)arg1 where:(id)arg2 ;
+(id)modelsForUuids:(id)arg1 fromDatabase:(id)arg2 ;
+(void)prefetchAllObjectRelationships:(id)arg1 ;
+(id)modelsForIds:(id)arg1 ;
+(void)deleteModels:(id)arg1 ;
-(id)dateValueForField:(id)arg1 ;
-(id)numberValueForField:(id)arg1 ;
-(id)stringValueForField:(id)arg1 ;
-(void)simpleWriteValue:(id)arg1 toField:(id)arg2 ;
-(id)initWithModelId:(id)arg1 ;
-(void)setSkipChangeEntries:(char)arg1 ;
-(char)skipChangeEntries;
-(void)setRecentChange:(id)arg1 ;
-(id)recentChange;
-(void)uncache;
-(unsigned long long)setToClosed;
-(void)deleteModel;
-(id)initWithUuid:(id)arg1 inDatabase:(id)arg2 ;
-(id)dataValueForField:(id)arg1 ;
-(char)modelFlagForFlag:(unsigned)arg1 ;
-(void)setModelFlagTo:(char)arg1 forFlag:(unsigned)arg2 ;
-(void)writeValue:(id)arg1 toField:(id)arg2 ;
-(void)setWasRecentlyUsed:(char)arg1 ;
-(id)initWithUuid:(id)arg1 forEntity:(id)arg2 ;
-(id)initWithModelId:(id)arg1 forEntity:(id)arg2 ;
-(void)setDatabaseEntity:(id)arg1 ;
-(char)flushModelAggressively;
-(char)setNotifyOfChanges:(char)arg1 ;
-(char)sample:(long long)arg1 samplingIntervalinMilliseconds:(long long)arg2 fileName:(id)arg3 ;
-(void)includeInOpenChanges:(unsigned long long)arg1 ;
-(void)simpleWriteValue:(id)arg1 toField:(id)arg2 withModDate:(id)arg3 ;
-(void)setIsInCache:(char)arg1 ;
-(void)setModelId:(unsigned long long)arg1 ;
-(char)notifyOfChanges;
-(char)wasRecentlyUsed;
-(id)databaseEntity;
-(void)persist;
-(char)isPersisted;
-(void)cacheModDate:(id)arg1 ;
-(id)initWithModelId:(id)arg1 inDatabase:(id)arg2 ;
-(void)setIsPersisted;
-(id)modelIdAsNumber;
-(unsigned long long)modelId;
-(char)flushModel;
-(void)wasPersisted;
-(void)willBeDeleted;
-(char)isInCache;
-(void)setIsDeleted;
-(id)uuid;
-(id)database;
-(id)lastModifiedDate;
-(void)setIsOpen:(char)arg1 ;
-(id)init;
-(oneway void)release;
-(void)dealloc;
-(id)description;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)close;
-(void)open;
-(char)isOpen;
-(id)modDate;
-(id)creationDate;
-(char)isDeleted;
-(id)address;
-(id)createDate;
@end

