/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:08:25 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Library/Application Support/iLifeMediaBrowser/Plug-Ins/iLMBAperture31Plugin.ilmbplugin/Contents/MacOS/iLMBAperture31Plugin
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@class NSString, ILMB_APERTURE_HgLockedDictionary, ILMB_APERTURE_HgAdminDataEntity, NSMutableArray, ILMB_APERTURE_HgDispatchQueue;

@interface ILMB_APERTURE_HgDatabase : NSObject {

	int m_spinlock;
	NSString* m_uuid;
	NSString* m_databaseDirectoryPath;
	long long m_schemaMajorVersion;
	long long m_schemaMinorVersion;
	ILMB_APERTURE_HgLockedDictionary* m_entitiesByClass;
	ILMB_APERTURE_HgLockedDictionary* m_entitiesByTable;
	ILMB_APERTURE_HgAdminDataEntity* m_adminDataEntity;
	ILMB_APERTURE_HgLockedDictionary* m_databaseMgrsByName;
	char m_readOnly;
	char m_isOpen;
	char m_isVault;
	NSMutableArray* m_reservations;
	ILMB_APERTURE_HgDispatchQueue* m_backgroundActionQueue;

}

@property (assign,nonatomic) char isOpen; 
@property (nonatomic,readonly) char readOnly; 
@property (assign,nonatomic) char isVault; 
@property (assign,nonatomic) long long schemaMajorVersion; 
@property (assign,nonatomic) long long schemaMinorVersion; 
@property (nonatomic,retain) ILMB_APERTURE_HgAdminDataEntity * adminDataEntity; 
+(id)entityForTable:(id)arg1 ;
+(id)databaseForUuid:(id)arg1 ;
+(void)addEntity:(id)arg1 forClass:(Class)arg2 ;
+(void)setDatabaseUuidLookup:(id)arg1 ;
+(void)setDefaultDatabase:(id)arg1 ;
+(id)defaultDatabaseForModelClass:(Class)arg1 ;
+(void)setDefaultDatabase:(id)arg1 forModelClass:(Class)arg2 overwriteExisting:(char)arg3 ;
+(void)addEntity:(id)arg1 forTable:(id)arg2 ;
+(id)defaultDatabase;
+(id)entityForClass:(Class)arg1 ;
+(id)noDatabase;
+(void)initialize;
-(void)processShortDelayTasks;
-(void)flushCachedModels;
-(void)addBackgroundOperation:(id)arg1 ;
-(long long)schemaMajorVersion;
-(void)saveNextModelIds;
-(char)createSchemaIfMissing;
-(id)backgroundActionQueue;
-(void)releaseFSReservation;
-(ILMB_APERTURE_HgAdminDataEntity *)adminDataEntity;
-(id)entityForTable:(id)arg1 ;
-(long long)schemaMinorVersion;
-(void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 idsForQuery:(id)arg3 withArgs:(id)arg4 ;
-(void)addBackgroundBlock:(/*^block*/id)arg1 ;
-(void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 canceler:(id)arg3 idsForQuery:(id)arg4 withArgs:(id)arg5 ;
-(id)initAsClosedDatabase;
-(void)setSchemaMajorVersion:(long long)arg1 ;
-(void)setSchemaMinorVersion:(long long)arg1 ;
-(id)databaseManagerForName:(id)arg1 ;
-(void)setBackgroundWritingEnabled:(char)arg1 ;
-(void)addDatabaseManager:(id)arg1 forName:(id)arg2 ;
-(void)setSynchronicity:(long long)arg1 ;
-(void)addEntity:(id)arg1 forClass:(Class)arg2 ;
-(void)recomputeNextModelIds;
-(void)willSaveDatabase;
-(void)acquireFSReservationOnPath:(id)arg1 ;
-(void)commitAndBeginNewTransaction;
-(void)setAdminDataEntity:(ILMB_APERTURE_HgAdminDataEntity *)arg1 ;
-(id)databaseDirectoryPath;
-(void)releaseAllReservations;
-(void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 limitedTo:(id)arg3 canceler:(id)arg4 idsForQuery:(id)arg5 withArgs:(id)arg6 ;
-(void)addEntity:(id)arg1 forTable:(id)arg2 ;
-(void)setLockingModeToExclusive:(char)arg1 ;
-(void)closeDatabaseForQuit:(char)arg1 ;
-(void)onCloseReleaseReservation:(id)arg1 ;
-(void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 idsForQuery:(id)arg3 ;
-(void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 canceler:(id)arg3 idsForQuery:(id)arg4 ;
-(void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 limitedTo:(id)arg3 canceler:(id)arg4 idsForQuery:(id)arg5 ;
-(void)didOpenDatabase;
-(void)setIsVault:(char)arg1 ;
-(void)waitForOutstandingWrites;
-(char)openDatabaseWithOptions:(int)arg1 ;
-(id)entityForClass:(Class)arg1 ;
-(void)saveDatabase;
-(void)repairIndexes;
-(char)isVault;
-(void)analyze;
-(id)uuid;
-(void)setUuid:(id)arg1 ;
-(id)initWithDatabasePath:(id)arg1 ;
-(char)readOnly;
-(void)setIsOpen:(char)arg1 ;
-(void)beginTransaction;
-(void)dealloc;
-(void)commit;
-(id)description;
-(char)isOpen;
-(char)hasChanges;
-(void)closeDatabase;
-(void)vacuum;
@end

