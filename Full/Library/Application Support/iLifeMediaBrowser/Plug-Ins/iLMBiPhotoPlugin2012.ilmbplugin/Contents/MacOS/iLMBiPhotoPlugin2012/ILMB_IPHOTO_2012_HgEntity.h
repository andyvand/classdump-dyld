/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:08:28 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Library/Application Support/iLifeMediaBrowser/Plug-Ins/iLMBiPhotoPlugin2012.ilmbplugin/Contents/MacOS/iLMBiPhotoPlugin2012
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <iLMBiPhotoPlugin2012/iLMBiPhotoPlugin2012-Structs.h>
@class ILMB_IPHOTO_2012_HgDatabase, ILMB_IPHOTO_2012_HgKDatabaseManager, NSString, NSMutableArray, NSMutableDictionary, ILMB_IPHOTO_2012_HgRidIndexEntity, ILMB_IPHOTO_2012_HgLockedDictionary, ILMB_IPHOTO_2012_HgLockedRidList, ILMB_IPHOTO_2012_HgRidIter, NSMutableSet, ILMB_IPHOTO_2012_HgKPreparedSql, ILMB_IPHOTO_2012_HgLockedSet, ILMB_IPHOTO_2012_HgRidList, NSCountedSet;

@interface ILMB_IPHOTO_2012_HgEntity : NSObject {

	int _spinlock;
	ILMB_IPHOTO_2012_HgDatabase* _database;
	ILMB_IPHOTO_2012_HgKDatabaseManager* _databaseManager;
	NSString* _tableName;
	NSMutableArray* _fieldDefs;
	NSMutableDictionary* _fieldDefsByName;
	NSMutableArray* _derivedFieldDefs;
	NSMutableArray* _fieldNames;
	NSString* _primaryKeyField;
	NSMutableArray* _multiColumnIndexes;
	NSMutableArray* _uniqueMultiColumnIndexes;
	NSString* _infoDictionaryColumns;
	ILMB_IPHOTO_2012_HgRidIndexEntity* _ridIndexEntity;
	Class _modelClass;
	char _canPrepareSql;
	char _canCreateModels;
	char _allModelsLoaded;
	int _numOutstandingWrites;
	char _hasModelIdField;
	char _hasUuidField;
	char _hasCreateDateField;
	char _hasModDateField;
	char _hasIsInTrashField;
	char _supportsOpenClose;
	char _hasInfoDictionary;
	char _nextModelIdIsDirty;
	unsigned long long _nextModelId;
	char _entityIsClosing;
	char _canFlushModels;
	unsigned long long _flushModelCount;
	ILMB_IPHOTO_2012_HgLockedDictionary* _cachedModelsByUuid;
	ILMB_IPHOTO_2012_HgLockedDictionary* _cachedModelsById;
	ILMB_IPHOTO_2012_HgLockedRidList* _cachedModelIdList;
	ILMB_IPHOTO_2012_HgRidIter* _flushModelIdIterator;
	opaque_pthread_rwlock_t _cachedModelsLock;
	NSMutableSet* _cachedModels;
	NSString* _allFieldsList;
	NSString* _autoLoadFieldList;
	ILMB_IPHOTO_2012_HgKPreparedSql* _persistModelSql;
	ILMB_IPHOTO_2012_HgKPreparedSql* _copyRecordSql;
	ILMB_IPHOTO_2012_HgLockedDictionary* _commonQueries;
	ILMB_IPHOTO_2012_HgLockedDictionary* _commonDistinctQueries;
	ILMB_IPHOTO_2012_HgLockedDictionary* _commonUpdates;
	ILMB_IPHOTO_2012_HgLockedDictionary* _commonModifies;
	ILMB_IPHOTO_2012_HgLockedDictionary* _commonMultiUpdates;
	ILMB_IPHOTO_2012_HgLockedDictionary* _commonDeletes;
	ILMB_IPHOTO_2012_HgLockedDictionary* _inMemoryFilters;
	ILMB_IPHOTO_2012_HgLockedDictionary* _entityMemoryFilters;
	ILMB_IPHOTO_2012_HgLockedSet* _reusableStrings;
	ILMB_IPHOTO_2012_HgLockedDictionary* _ridIndexes;
	ILMB_IPHOTO_2012_HgLockedDictionary* _ridIndexesByFieldName;
	ILMB_IPHOTO_2012_HgRidList* _allModelIds;
	NSCountedSet* _allQueriesUsed;
	NSCountedSet* _couldHaveBeenInMemory;
	unsigned long long _indentLevel;
	ILMB_IPHOTO_2012_HgLockedDictionary* _relationshipCaches;

}

@property (nonatomic,retain) ILMB_IPHOTO_2012_HgRidIndexEntity * ridIndexEntity;              //@synthesize ridIndexEntity=_ridIndexEntity - In the implementation block
@property (assign,nonatomic) char entityIsClosing;                                            //@synthesize entityIsClosing=_entityIsClosing - In the implementation block
@property (assign,nonatomic) char canCreateModels;                                            //@synthesize canCreateModels=_canCreateModels - In the implementation block
@property (assign,nonatomic) char canPrepareSql;                                              //@synthesize canPrepareSql=_canPrepareSql - In the implementation block
@property (assign,nonatomic) char allModelsLoaded;                                            //@synthesize allModelsLoaded=_allModelsLoaded - In the implementation block
@property (assign,nonatomic) char canFlushModels; 
@property (assign,nonatomic) unsigned long long flushModelCount;                              //@synthesize flushModelCount=_flushModelCount - In the implementation block
+(void)addObjectOrNull:(id)arg1 toArray:(id)arg2 ;
+(id)stringForSqlType:(int)arg1 ;
+(id)capitalizedString:(id)arg1 ;
+(id)setOfType:(int)arg1 forQuery:(id)arg2 withArgs:(id)arg3 ;
+(id)setOfType:(int)arg1 withCanceler:(id)arg2 forQuery:(id)arg3 withArgs:(id)arg4 ;
+(id)objectFromResultSet:(id)arg1 forType:(int)arg2 forColumnIndex:(long long)arg3 ;
+(void)appendToArray:(id)arg1 ofType:(int)arg2 withCanceler:(id)arg3 forQuery:(id)arg4 withArgs:(id)arg5 ;
+(void)appendToArray:(id)arg1 ofType:(int)arg2 forQuery:(id)arg3 withArgs:(id)arg4 ;
+(id)arrayOfType:(int)arg1 withCanceler:(id)arg2 forQuery:(id)arg3 withArgs:(id)arg4 ;
+(id)newLoadDataFromResultSet:(id)arg1 forFieldsWithDefs:(id)arg2 ;
+(id)classForSqlType:(int)arg1 ;
+(char)needRetainForSqlType:(int)arg1 ;
+(id)readerForSqlType:(int)arg1 ;
+(id)castToObjectFor:(id)arg1 withSqlType:(int)arg2 ;
+(id)sqlTypeStringForSqlType:(int)arg1 ;
+(id)instanceNameForName:(id)arg1 ;
+(id)indexedReaderForSqlType:(int)arg1 ;
+(id)stripSqlComments:(id)arg1 ;
+(id)classNameForName:(id)arg1 ;
+(int)fieldTypeFromDefinition:(id)arg1 ;
+(id)entitiesFromDatabaseFile:(id)arg1 ;
+(void)createEntitiesForDatabaseFile:(id)arg1 asReadOnly:(char)arg2 ;
+(void)createEntitiesForDatabaseFile:(id)arg1 ;
+(id)arrayOfType:(int)arg1 forQuery:(id)arg2 withArgs:(id)arg3 ;
+(void)flushModelsAggressively:(id)arg1 ;
+(id)stripCComments:(id)arg1 ;
+(id)makeUpdateList:(id)arg1 ;
+(id)tablePrefixes;
+(id)normalizeSql:(id)arg1 ;
+(void)flushModels:(id)arg1 ;
+(id)makeList:(id)arg1 ;
+(void)initialize;
-(id)modelForId:(id)arg1 ;
-(id)anyModelWhere:(id)arg1 args:(id)arg2 ;
-(char)allModelsLoaded;
-(id)modelsWhere:(id)arg1 ;
-(id)modelForUuid:(id)arg1 ;
-(id)ridIndexes;
-(id)dictionaryForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 where:(id)arg4 args:(id)arg5 ;
-(id)initWithTableName:(id)arg1 forDatabaseManager:(id)arg2 forDatabase:(id)arg3 ;
-(id)dictionaryForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 where:(id)arg4 ;
-(id)registerEntityMemoryFilterForWhere:(id)arg1 ;
-(id)modelIdListWhere:(id)arg1 ;
-(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 where:(id)arg4 ;
-(id)ridIndexForFieldName:(id)arg1 ;
-(id)infoDictionariesWhere:(id)arg1 ;
-(void)insertIntoRidList:(id)arg1 idsForColumn:(id)arg2 where:(id)arg3 args:(id)arg4 ;
-(id)sqlForSelect:(id)arg1 where:(id)arg2 ;
-(id)cachedModelForId:(unsigned long long)arg1 ;
-(char)deleteModelsWhere:(id)arg1 args:(id)arg2 ;
-(id)sqlForSelectOf:(id)arg1 where:(id)arg2 ;
-(id)ridIndexForIndexName:(id)arg1 ;
-(id)modelUuidsWhere:(id)arg1 ;
-(void)willSaveDatabase;
-(id)modelsForIdList:(id)arg1 withCanceler:(id)arg2 ;
-(id)selectObjectsAsDictionaries:(id)arg1 fromQuery:(id)arg2 ;
-(id)selectObjects:(id)arg1 fromQuery:(id)arg2 ;
-(id)modelIdListWhere:(id)arg1 args:(id)arg2 ;
-(void)copyRecordsToEntity:(id)arg1 withCanceler:(id)arg2 where:(id)arg3 args:(id)arg4 ;
-(char)hasIndexForField:(id)arg1 ;
-(id)fieldDefForField:(id)arg1 ;
-(id)cachedModelsForIdList:(id)arg1 notFound:(id*)arg2 ;
-(opaque_pthread_rwlock_t*)cachedModelsLock;
-(id)allCachedModelIdList;
-(id)modelsForIdList:(id)arg1 ;
-(void)decrementOutstandingWrites;
-(id)autoLoadFieldList;
-(void)refreshPreparedSql;
-(void)recomputeAllModelIds;
-(void)recomputeNextModelId;
-(void)setCanPrepareSql:(char)arg1 ;
-(void)setEntityIsClosing:(char)arg1 ;
-(void)repairRidIndexes;
-(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 where:(id)arg4 args:(id)arg5 ;
-(void)loadRelationshipCache:(id)arg1 where:(id)arg2 args:(id)arg3 ;
-(id)relationshipCacheForFieldName:(id)arg1 forKeyField:(id)arg2 ;
-(id)valueSelectorForField:(id)arg1 ;
-(id)valueForFieldName:(id)arg1 forKeyField:(id)arg2 withKeyValue:(id)arg3 ;
-(id)cachedModelForIdNumber:(id)arg1 ;
-(void)incrementOutstandingWrites;
-(void)addRidIndexForField:(id)arg1 options:(int)arg2 ;
-(void)addField:(id)arg1 withType:(int)arg2 options:(int)arg3 changeMask:(unsigned long long)arg4 ;
-(void)addRidIndex:(id)arg1 forIndexName:(id)arg2 ;
-(void)addRidIndex:(id)arg1 forFieldName:(id)arg2 ;
-(long long)createIndexOnColumnNames:(id)arg1 unique:(char)arg2 ;
-(void)setupIntrospection;
-(id)selectPrefixForColumn:(id)arg1 ;
-(id)cachedQueryInDictionary:(id)arg1 selectList:(id)arg2 whereClause:(id)arg3 ;
-(id)setCachedQuery:(id)arg1 inDictionary:(id)arg2 selectList:(id)arg3 whereClause:(id)arg4 ;
-(id)selectDistinctPrefixForColumn:(id)arg1 ;
-(id)sqlForUpdateOfField:(id)arg1 where:(id)arg2 ;
-(id)sqlForModifyOfField:(id)arg1 where:(id)arg2 ;
-(id)sqlForUpdateOfField:(id)arg1 ;
-(id)sqlForUpdateOf:(id)arg1 where:(id)arg2 ;
-(id)loadModelFromResultSet:(id)arg1 ;
-(void)deleteOfModelObjectWithId:(id)arg1 ;
-(id)sqlForDeleteWhere:(id)arg1 ;
-(void)deleteModelsForIds:(id)arg1 ;
-(void)deleteOfModelsWithIds:(id)arg1 deleteInfoDictionary:(char)arg2 ;
-(void)deleteModelsForIds:(id)arg1 deleteInfoDictionary:(char)arg2 ;
-(id)sqlForSelectDistinct:(id)arg1 where:(id)arg2 ;
-(void)async_deleteModelsWhere:(id)arg1 args:(id)arg2 ;
-(id)entityMemoryFilterForWhere:(id)arg1 ;
-(void)setAllModelsLoaded:(char)arg1 ;
-(id)modelsFromQuery:(id)arg1 ;
-(id)modelsWhere:(id)arg1 args:(id)arg2 ;
-(id)loadArrayOfModelsFromResultSet:(id)arg1 limit:(unsigned long long)arg2 ;
-(id)arrayOfModelsFromQuery:(id)arg1 ;
-(id)arrayOfModelsWhere:(id)arg1 args:(id)arg2 ;
-(id)iteratorFromQuery:(id)arg1 ;
-(id)infoDictionaryColumns;
-(id)loadInfoDictionariesFromResultSet:(id)arg1 ;
-(id)infoDictionariesWhere:(id)arg1 args:(id)arg2 ;
-(id)modelUuidsFromQuery:(id)arg1 ;
-(id)modelUuidsWhere:(id)arg1 args:(id)arg2 ;
-(id)modelIdsFromQuery:(id)arg1 ;
-(id)selectDistinctList:(id)arg1 fromQuery:(id)arg2 ;
-(id)modelIdListFromQuery:(id)arg1 ;
-(unsigned long long)countOfModelsWhere:(id)arg1 args:(id)arg2 ;
-(char)modelExistsWhere:(id)arg1 args:(id)arg2 ;
-(void)appendAddressesToArray:(id)arg1 withCanceler:(id)arg2 forQuery:(id)arg3 withArgs:(id)arg4 ;
-(id)selectDistinct:(id)arg1 fromQuery:(id)arg2 ;
-(void)insertIntoRidList:(id)arg1 idsForColumn:(id)arg2 fromQuery:(id)arg3 ;
-(id)selectDistinctList:(id)arg1 where:(id)arg2 args:(id)arg3 ;
-(id)selectOneObject:(id)arg1 fromQuery:(id)arg2 ;
-(id)selectOneObject:(id)arg1 where:(id)arg2 args:(id)arg3 ;
-(id)selectObjects:(id)arg1 where:(id)arg2 args:(id)arg3 ;
-(id)selectDictionaryOfObjects:(id)arg1 forKey:(id)arg2 fromQuery:(id)arg3 ;
-(id)selectDictionaryOfObjects:(id)arg1 forKey:(id)arg2 withCanceler:(id)arg3 where:(id)arg4 args:(id)arg5 ;
-(id)selectDictionaryOfDictionaries:(id)arg1 forKey:(id)arg2 fromQuery:(id)arg3 ;
-(id)selectDictionaryOfDictionaries:(id)arg1 forKey:(id)arg2 withCanceler:(id)arg3 where:(id)arg4 args:(id)arg5 ;
-(id)selectObjectsAsDictionaries:(id)arg1 where:(id)arg2 args:(id)arg3 ;
-(void)updateColumn:(id)arg1 toValue:(id)arg2 where:(id)arg3 args:(id)arg4 ;
-(id)keyListForKey:(id)arg1 data:(id)arg2 fromQuery:(id)arg3 ;
-(id)keyListForKey:(id)arg1 data:(id)arg2 where:(id)arg3 args:(id)arg4 ;
-(id)dictionaryForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromQuery:(id)arg4 ;
-(id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 fromQuery:(id)arg4 ;
-(id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 where:(id)arg4 args:(id)arg5 ;
-(id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromQuery:(id)arg4 ;
-(id)dictionaryOfListsForKey:(id)arg1 value:(id)arg2 fromQuery:(id)arg3 ;
-(id)dictionaryOfListsForKey:(id)arg1 value:(id)arg2 where:(id)arg3 args:(id)arg4 ;
-(void)insertIntoRidList:(id)arg1 withCanceler:(id)arg2 idsForColumn:(id)arg3 where:(id)arg4 args:(id)arg5 ;
-(id)fieldDefsForFields:(id)arg1 ;
-(void)copyFields:(id)arg1 toEntity:(id)arg2 withInsertSql:(id)arg3 where:(id)arg4 args:(id)arg5 ;
-(id)readForDupSqlWhere:(id)arg1 ;
-(void)copyRecordsToEntity:(id)arg1 fromQuery:(id)arg2 ;
-(id)modelsForUuids:(id)arg1 withCanceler:(id)arg2 ;
-(id)cachedModelsForIds:(id)arg1 notFound:(id*)arg2 ;
-(id)modelsForIds:(id)arg1 withCanceler:(id)arg2 ;
-(id)addressForModelId:(id)arg1 ;
-(char)hasInfoDictionary;
-(void)willDeleteModel:(id)arg1 ;
-(void)deleteOfModelObjectWithId:(id)arg1 deleteInfoDictionary:(char)arg2 ;
-(id)hasCachedModelForModelId:(id)arg1 ;
-(id)sqlForModifyOfField:(id)arg1 ;
-(void)writeString:(id)arg1 toHandle:(id)arg2 ;
-(id)fieldKeyForFieldName:(id)arg1 ;
-(void)writeIndentedString:(id)arg1 toHandle:(id)arg2 ;
-(void)writeOptions:(int)arg1 toHandle:(id)arg2 ;
-(char)hasCreateDateField;
-(void)writeCopyrightHeaderForName:(id)arg1 toHandle:(id)arg2 ;
-(void)writeModelInterfaceToHandle:(id)arg1 asReadOnly:(char)arg2 ;
-(void)writeModelImplementationToHandle:(id)arg1 asReadOnly:(char)arg2 ;
-(void)writeEntityInterfaceToHandle:(id)arg1 ;
-(void)writeEntityImplementationToHandle:(id)arg1 ;
-(void)writeDatabaseInterfaceToHandle:(id)arg1 forDatabaseClass:(id)arg2 withEntities:(id)arg3 ;
-(void)writeDatabaseImplementationToHandle:(id)arg1 forDatabase:(id)arg2 withEntities:(id)arg3 asReadOnly:(char)arg4 ;
-(void)generateFilesAsReadOnly:(char)arg1 ;
-(void)generateDatabaseClassForDatabase:(id)arg1 withEntities:(id)arg2 asReadOnly:(char)arg3 ;
-(char)deleteModelsFromQuery:(id)arg1 ;
-(id)addressesForModelIds:(id)arg1 ;
-(id)anyModelFromQuery:(id)arg1 ;
-(id)inMemoryFilterForWhere:(id)arg1 ;
-(unsigned long long)countOfModelsFromQuery:(id)arg1 ;
-(char)modelExistsFromQuery:(id)arg1 ;
-(id)select:(id)arg1 orderedBy:(id)arg2 where:(id)arg3 args:(id)arg4 ;
-(void)appendAddressesToArray:(id)arg1 orderedBy:(id)arg2 where:(id)arg3 args:(id)arg4 ;
-(long long)retainCountForCachedModel;
-(unsigned long long)changeMaskForField:(id)arg1 ;
-(void)writeValue:(id)arg1 toField:(id)arg2 forModelId:(id)arg3 withModDate:(id)arg4 ;
-(id)ridIndexesForFieldName:(id)arg1 ;
-(id)stringValueForField:(id)arg1 forModelId:(id)arg2 ;
-(id)numberValueForField:(id)arg1 forModelId:(id)arg2 ;
-(id)dateValueForField:(id)arg1 forModelId:(id)arg2 ;
-(id)dataValueForField:(id)arg1 forModelId:(id)arg2 ;
-(id)cachedModelsForUuids:(id)arg1 uuidsNotFound:(id)arg2 ;
-(char)supportsOpenClose;
-(id)arrayOfModelsWhere:(id)arg1 ;
-(id)keyListForKey:(id)arg1 data:(id)arg2 where:(id)arg3 ;
-(id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 where:(id)arg4 ;
-(id)dictionaryOfListsForKey:(id)arg1 value:(id)arg2 where:(id)arg3 ;
-(void)insertIntoRidList:(id)arg1 withCanceler:(id)arg2 idsForColumn:(id)arg3 where:(id)arg4 ;
-(void)insertIntoRidList:(id)arg1 idsForColumn:(id)arg2 where:(id)arg3 ;
-(void)copyFields:(id)arg1 toEntity:(id)arg2 withInsertSql:(id)arg3 where:(id)arg4 ;
-(id)modelIdsWhere:(id)arg1 ;
-(void)appendAddressesToArray:(id)arg1 forQuery:(id)arg2 withArgs:(id)arg3 ;
-(void)uncacheModels:(id)arg1 ;
-(unsigned long long)countOfModelsWhere:(id)arg1 ;
-(void)copyFields:(id)arg1 toEntity:(id)arg2 withInsertSql:(id)arg3 fromQuery:(id)arg4 ;
-(void)copyRecordsToEntity:(id)arg1 withCanceler:(id)arg2 where:(id)arg3 ;
-(void)copyRecordsToEntity:(id)arg1 where:(id)arg2 ;
-(void)resetUuidForModel:(id)arg1 fromUuid:(id)arg2 ;
-(void)deleteOfModelsWithIds:(id)arg1 ;
-(unsigned long long)cachedModelCount;
-(void)update:(id)arg1 withData:(id)arg2 forModelId:(id)arg3 ;
-(char)boolValueForField:(id)arg1 forModelId:(id)arg2 ;
-(long long)intValueForField:(id)arg1 forModelId:(id)arg2 ;
-(id)fieldTypesForFields:(id)arg1 ;
-(id)selectDistinctList:(id)arg1 where:(id)arg2 ;
-(id)selectObjects:(id)arg1 where:(id)arg2 ;
-(id)selectObjectsAsDictionaries:(id)arg1 where:(id)arg2 ;
-(id)loadModelsFromIdResultSet:(id)arg1 limit:(unsigned long long)arg2 ;
-(id)iteratorWhere:(id)arg1 ;
-(void)deleteModelsForIdList:(id)arg1 ;
-(id)selectDictionaryOfObjects:(id)arg1 forKey:(id)arg2 withCanceler:(id)arg3 where:(id)arg4 ;
-(id)selectDictionaryOfDictionaries:(id)arg1 forKey:(id)arg2 withCanceler:(id)arg3 where:(id)arg4 ;
-(void)updateColumn:(id)arg1 toValue:(id)arg2 where:(id)arg3 ;
-(void)addField:(id)arg1 withType:(int)arg2 changeMask:(unsigned long long)arg3 ;
-(char)hasOutstandingWrites;
-(char)createIndexOnField:(id)arg1 ;
-(id)ridIndexListForIndexName:(id)arg1 value:(id)arg2 ;
-(void)addRidIndexForFields:(id)arg1 ;
-(id)valueForFieldName:(id)arg1 forModelId:(id)arg2 ;
-(char)hasIsInTrashField;
-(void)loadRelationshipCache:(id)arg1 ;
-(id)valueForFieldName:(id)arg1 forUuid:(id)arg2 ;
-(void)loadRelationshipCache:(id)arg1 where:(id)arg2 ;
-(void)executeUpdate:(id)arg1 ;
-(void)reportCachedSql;
-(id)createRelationshipCacheForFieldName:(id)arg1 forKeyField:(id)arg2 isOneToOne:(char)arg3 ;
-(void)dropRelationshipCacheForFieldName:(id)arg1 forKeyField:(id)arg2 ;
-(void)executeMultiUpdate:(id)arg1 withListOfArgs:(id)arg2 ;
-(id)ridIndexListForIndexName:(id)arg1 boolValue:(char)arg2 ;
-(char)modelExistsWhere:(id)arg1 ;
-(unsigned long long)flushModelCount;
-(unsigned long long)indentLevel;
-(int)typeForField:(id)arg1 ;
-(id)anyModelWhere:(id)arg1 ;
-(id)primaryKeyField;
-(void)flushModels;
-(id)loadModelsFromResultSet:(id)arg1 limit:(unsigned long long)arg2 ;
-(void)didOpenDatabase;
-(void)setRidIndexEntity:(ILMB_IPHOTO_2012_HgRidIndexEntity *)arg1 ;
-(id)cachedModelForUuid:(id)arg1 ;
-(id)sqlForSelectWhere:(id)arg1 ;
-(id)modelIdsWhere:(id)arg1 args:(id)arg2 ;
-(id)selectDistinct:(id)arg1 where:(id)arg2 args:(id)arg3 ;
-(void)setFlushModelCount:(unsigned long long)arg1 ;
-(void)executeUpdate:(id)arg1 withArgs:(id)arg2 ;
-(char)deleteModelsWhere:(id)arg1 ;
-(id)selectDistinct:(id)arg1 where:(id)arg2 ;
-(void)uncacheAllModels;
-(void)setCanCreateModels:(char)arg1 ;
-(void)setHasInfoDictionary:(char)arg1 ;
-(unsigned long long)nextModelId;
-(void)copyRecordsToEntity:(id)arg1 where:(id)arg2 args:(id)arg3 ;
-(id)databaseMgr;
-(char)createTableIfMissing;
-(id)selectOneObject:(id)arg1 where:(id)arg2 ;
-(void)waitForOutstandingWrites;
-(id)allCachedModels;
-(void)uncacheModel:(id)arg1 ;
-(id)cacheModel:(id)arg1 ;
-(id)reusableString:(id)arg1 ;
-(void)setCanFlushModels:(char)arg1 ;
-(void)addMultiColumnIndex:(id)arg1 unique:(char)arg2 ;
-(void)addField:(id)arg1 withType:(int)arg2 options:(int)arg3 ;
-(void)addField:(id)arg1 withType:(int)arg2 ;
-(void)addDerivedField:(id)arg1 withType:(int)arg2 ;
-(void)setModelClass:(Class)arg1 ;
-(char)hasModelIdField;
-(char)canCreateModels;
-(char)entityIsClosing;
-(void)usedModelId:(unsigned long long)arg1 ;
-(ILMB_IPHOTO_2012_HgRidIndexEntity *)ridIndexEntity;
-(char)_logErrors;
-(void)saveNextModelId;
-(id)selectPrefixForColumns:(id)arg1 ;
-(void)async_deleteModelsWhere:(id)arg1 ;
-(id)allModelIds;
-(void)flushAllModels;
-(char)hasUuidField;
-(id)persistModelSql;
-(Class)modelClass;
-(id)modelsForIds:(id)arg1 ;
-(id)persistFields;
-(id)cachedModels;
-(void)whereUsed:(id)arg1 ;
-(id)modelsForUuids:(id)arg1 ;
-(void)incrIndentLevel;
-(void)updateModel:(id)arg1 ;
-(char)canFlushModels;
-(void)decrIndentLevel;
-(char)hasModDateField;
-(void)flushModels:(char)arg1 ;
-(void)update:(id)arg1 args:(id)arg2 ;
-(id)copyRecordSql;
-(void)persistModel:(id)arg1 ;
-(void)deleteModel:(id)arg1 ;
-(void)deleteModels:(id)arg1 ;
-(id)allFieldsList;
-(id)autoLoadFields;
-(char)isModelIdInUse:(unsigned long long)arg1 ;
-(id)sqlForUpdateOf:(id)arg1 ;
-(id)fieldDefs;
-(char)canPrepareSql;
-(id)initWithTableName:(id)arg1 forDatabaseManager:(id)arg2 ;
-(id)database;
-(id)tableName;
-(void)dealloc;
-(id)description;
-(void)update:(id)arg1 ;
-(id)fieldNames;
@end

