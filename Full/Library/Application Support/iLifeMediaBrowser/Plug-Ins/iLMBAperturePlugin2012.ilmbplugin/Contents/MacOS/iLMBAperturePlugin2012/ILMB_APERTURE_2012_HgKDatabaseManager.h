/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 4:08:26 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Library/Application Support/iLifeMediaBrowser/Plug-Ins/iLMBAperturePlugin2012.ilmbplugin/Contents/MacOS/iLMBAperturePlugin2012
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <iLMBAperturePlugin2012/iLMBAperturePlugin2012-Structs.h>
@class NSRecursiveLock, NSString, NSMutableDictionary, ILMB_APERTURE_2012_HgKResultSet, NSMutableSet, ILMB_APERTURE_2012_HgBlockQueue, ILMB_APERTURE_2012_HgKPreparedSql;

@interface ILMB_APERTURE_2012_HgKDatabaseManager : NSObject {

	sqlite3Ref _db;
	NSRecursiveLock* _dbLock;
	NSString* _databasePath;
	char _readOnly;
	char _logsErrors;
	char _throwExceptionOnError;
	char _crashOnErrors;
	char _inTransaction;
	char _traceExecution;
	char _profileTraceExecution;
	char _isCorrupt;
	long long _busyRetryTimeout;
	NSMutableDictionary* _tblXref;
	NSMutableDictionary* _colXref;
	ILMB_APERTURE_2012_HgKResultSet* _activeResultSet;
	NSMutableSet* _preparedStatements;
	unsigned _sqlErrorCount;
	unsigned long long _uncommittedUpdates;
	ILMB_APERTURE_2012_HgBlockQueue* _backgroundWriteQueue;
	ILMB_APERTURE_2012_HgKPreparedSql* _commitSql;
	ILMB_APERTURE_2012_HgKPreparedSql* _beginTransactionSql;
	unsigned long long _queryCount;

}

@property (assign,nonatomic) char backgroundWritingEnabled; 
@property (assign,nonatomic) unsigned long long uncommittedUpdates;              //@synthesize uncommittedUpdates=_uncommittedUpdates - In the implementation block
@property (nonatomic,readonly) char inTransaction;                               //@synthesize inTransaction=_inTransaction - In the implementation block
@property (assign) char isCorrupt;                                               //@synthesize isCorrupt=_isCorrupt - In the implementation block
@property (assign,nonatomic) char logsErrors;                                    //@synthesize logsErrors=_logsErrors - In the implementation block
@property (assign,nonatomic) char crashOnErrors;                                 //@synthesize crashOnErrors=_crashOnErrors - In the implementation block
@property (assign,nonatomic) char throwExceptionOnError;                         //@synthesize throwExceptionOnError=_throwExceptionOnError - In the implementation block
@property (assign,nonatomic) char traceExecution;                                //@synthesize traceExecution=_traceExecution - In the implementation block
@property (assign,nonatomic) char profileTraceExecution;                         //@synthesize profileTraceExecution=_profileTraceExecution - In the implementation block
+(id)firstInstance;
+(void)setLogErrorsEnabled:(char)arg1 ;
+(id)sqliteLibVersion;
+(id)newInstance;
-(id)setOfStringsForQuery:(id)arg1 ;
-(id)setOfStringsForQuery:(id)arg1 withArgs:(id)arg2 ;
-(id)setOfNumbersForQuery:(id)arg1 withArgs:(id)arg2 ;
-(id)setOfDatesForQuery:(id)arg1 withArgs:(id)arg2 ;
-(char)openAsReadOnly:(char)arg1 attemptJournalCleanup:(char)arg2 ;
-(void)setBusyRetryTimeout:(long long)arg1 ;
-(void)setBackgroundWritingEnabled:(char)arg1 ;
-(void)setSynchronicity:(long long)arg1 ;
-(id)dictionaryWithKeySelector:(SEL)arg1 valueSelector:(SEL)arg2 forQuery:(id)arg3 withArgs:(id)arg4 ;
-(id)dictionaryOfDatesForQuery:(id)arg1 withArgs:(id)arg2 ;
-(id)dictionaryOfStringsForQuery:(id)arg1 withArgs:(id)arg2 ;
-(id)arrayOfStringsForQuery:(id)arg1 withArgs:(id)arg2 ;
-(void)finalizePreparedStatements;
-(char)throwExceptionOnError;
-(char)update:(id)arg1 withArgs:(id)arg2 ;
-(id)beginTransactionSql;
-(id)backgroundWriteQueue;
-(char)commitAndBeginNewTransaction;
-(void)setBackgroundWritingEnabled:(char)arg1 onQueue:(id)arg2 ;
-(void)incrementSqlErrorCount;
-(void)bindObject:(id)arg1 toColumn:(long long)arg2 inStatement:(sqlite3_stmtRef)arg3 ;
-(void)unregisterPreparedStatement:(id)arg1 ;
-(void)registerPreparedStatement:(id)arg1 ;
-(char)profileTraceExecution;
-(unsigned long long)uncommittedUpdates;
-(void)setUncommittedUpdates:(unsigned long long)arg1 ;
-(void)setActiveResultSet:(id)arg1 ;
-(long long)busyRetryTimeout;
-(void)backgroundCommit;
-(void)backgroundCommitAndBeginNewTransaction;
-(void)setLockingModeToExclusive:(char)arg1 ;
-(char)goodConnection;
-(char)crashOnErrors;
-(unsigned long long)lastInsertRowId;
-(void)setLogsErrors:(char)arg1 ;
-(id)activeResultSet;
-(char)hadError;
-(long long)filesize;
-(char)isCorrupt;
-(char)logsErrors;
-(id)pathForQueryLog;
-(long long)synchronicity;
-(id)dictionaryOfDatesForQuery:(id)arg1 ;
-(id)dictionaryOfStringsForQuery:(id)arg1 ;
-(id)setOfNumbersForQuery:(id)arg1 ;
-(id)listOfNumbersForQuery:(id)arg1 withArgs:(id)arg2 ;
-(id)arrayOfStringsForQuery:(id)arg1 ;
-(char)passesIntegrityCheck;
-(void)reserveDatabaseSize:(long long)arg1 ;
-(long long)longForQuery:(id)arg1 ;
-(void)increaseDatabaseSize:(long long)arg1 ;
-(char)backgroundWritingEnabled;
-(char)createIndexOnTable:(id)arg1 columnName:(id)arg2 ;
-(char)createIndexOnTable:(id)arg1 columnNames:(id)arg2 named:(id)arg3 ;
-(void)setCrashOnErrors:(char)arg1 ;
-(void)setThrowExceptionOnError:(char)arg1 ;
-(void)setTraceExecution:(char)arg1 ;
-(void)setProfileTraceExecution:(char)arg1 ;
-(id)query:(id)arg1 withArgs:(id)arg2 ;
-(id)commitSql;
-(unsigned)sqlErrorCount;
-(long long)intForQuery:(id)arg1 ;
-(id)query:(id)arg1 ;
-(void)unlockDatabase;
-(void)lockDatabase;
-(char)logErrors;
-(char)traceExecution;
-(void)setIsCorrupt:(char)arg1 ;
-(id)numberForQuery:(id)arg1 ;
-(id)dataForQuery:(id)arg1 ;
-(id)stringForQuery:(id)arg1 ;
-(double)doubleForQuery:(id)arg1 ;
-(id)dateForQuery:(id)arg1 ;
-(char)openAsReadOnly:(char)arg1 ;
-(long long)longLongForQuery:(id)arg1 ;
-(void)analyze;
-(char)inTransaction;
-(id)lastErrorMessage;
-(long long)lastErrorCode;
-(char)readOnly;
-(char)rollback;
-(sqlite3Ref)db;
-(char)boolForQuery:(id)arg1 ;
-(char)beginTransaction;
-(char)beginDeferredTransaction;
-(id)columnsForTable:(id)arg1 ;
-(id)databasePath;
-(void)dealloc;
-(char)commit;
-(void)close;
-(id)initWithPath:(id)arg1 ;
-(char)update:(id)arg1 ;
-(void)vacuum;
@end

