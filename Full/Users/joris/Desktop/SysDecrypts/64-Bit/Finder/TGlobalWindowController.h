/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 7:58:08 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Users/joris/Desktop/SysDecrypts/64-Bit/Finder
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Finder/Finder-Structs.h>
#import <AppKit/NSResponder.h>

@class TBaseBrowserWindowController;

@interface TGlobalWindowController : NSResponder {

	BOOL _windowStateSavePending;
	BOOL _restoringWindowState;
	TBaseBrowserWindowController* _mainBrowserWindowController;

}

@property (assign,nonatomic) BOOL windowStateSavePending;                                             //@synthesize windowStateSavePending=_windowStateSavePending - In the implementation block
@property (assign,nonatomic) BOOL restoringWindowState;                                               //@synthesize restoringWindowState=_restoringWindowState - In the implementation block
@property (assign,nonatomic) TBaseBrowserWindowController * mainBrowserWindowController;              //@synthesize mainBrowserWindowController=_mainBrowserWindowController - In the implementation block
+(void)setFrontRaiseOneWindow:(id)arg1 ;
+(id)findBrowserWindowControllerAndSelectNodes:(const TFENodeVector*)arg1 ;
+(id)orderedBrowserWindows;
+(id)globalWindowController;
+(void)newTabOrWindowForTarget:(const TFENode*)arg1 nodesToSelect:(const TFENodeVector*)arg2 ;
+(id)findBrowserWindowControllerForNode:(const TFENode*)arg1 ;
+(id)createWindowWithTarget:(const TFENode*)arg1 ;
+(id)selectOrCreateWindow:(const TFENode*)arg1 alwaysCreate:(BOOL)arg2 forceToolbarHidden:(BOOL)arg3 sendFolderAction:(BOOL)arg4 ;
+(TFENode*)defaultWindowTarget;
+(void)openDockTargetForFFK:(const TFENode*)arg1 ;
+(void)replaceUnresolvedTargets:(const TFENode*)arg1 withTarget:(const TFENode*)arg2 ;
+(BOOL)okayToSpawnInTabForWindow:(id)arg1 ;
+(id)createWindowWithTarget:(const TFENode*)arg1 forceContainer:(BOOL)arg2 ;
+(id)createWindowWithTarget:(const TFENode*)arg1 forceContainer:(BOOL)arg2 spawnOrigin:(shared_ptr<ISpawnOrigin>*)arg3 desiredLocation:(CGPoint)arg4 ;
+(id)createWindowWithTarget:(const TFENode*)arg1 forceContainer:(BOOL)arg2 spawnOrigin:(shared_ptr<ISpawnOrigin>*)arg3 desiredLocation:(CGPoint)arg4 creationState:(id)arg5 ;
+(unsigned long long)browserWindowCount;
+(BOOL)shouldUseContainerSavedViewOptions:(const TFENode*)arg1 ;
+(id)firstWindowWithTarget:(const TFENode*)arg1 containerController:(id*)arg2 ;
+(id)selectOrCreateWindowWithOptions:(id)arg1 inTarget:(const TFENode*)arg2 ;
+(id)firstContainerWithTarget:(const TFENode*)arg1 ;
+(id)frontmostBrowserWindowControllerExcludingDesktop;
+(id)frontmostBrowserWindowControllerIncludingDesktop;
+(id)targetSelectOrCreateWindowWithOptions:(id)arg1 inTarget:(const TFENode*)arg2 ;
+(void)targetSelectOrCreateWindow:(id)arg1 inTarget:(const TFENode*)arg2 selectNodes:(const TFENodeVector*)arg3 ;
+(id)windowCreationOptions:(id)arg1 nodes:(const TFENodeVector*)arg2 ;
+(void)targetSelectOrCreateWindowForTarget:(const TFENode*)arg1 withOptions:(id)arg2 ;
+(id)frontmostBrowserWindowController;
+(BOOL)nodeCanReveal:(const TFENode*)arg1 ;
+(void)springNewWindowForTarget:(const TFENode*)arg1 atLocation:(CGPoint)arg2 includingMouseLocation:(BOOL)arg3 withOrigin:(shared_ptr<ISpawnOrigin>*)arg4 ;
+(void)closeOrRetargetWindowForTarget:(const TFENode*)arg1 toPath:(const TFENodeVector*)arg2 originatingBrowser:(long long)arg3 ;
+(void)targetSelectOrCreateWindowWithTarget:(const TFENode*)arg1 ;
+(id)orderedBrowserWindowsForScreen:(id)arg1 ;
+(id)frontmostBrowserWindowControllerForScreen:(id)arg1 ;
+(id)findBrowserWindowControllerForNode:(const TFENode*)arg1 andScreen:(id)arg2 ;
+(void)retargetFrontOrCreateWindowForFind:(int)arg1 searchString:(id)arg2 shouldSpawn:(BOOL)arg3 ;
+(BOOL)isFrontWindowBackupBrowser;
+(TFENode*)nodeForUrl:(const TString*)arg1 ;
+(TString*)urlForNode:(const TFENode*)arg1 ;
+(id)createWindowWithDefaultTarget;
+(id)createWindowFromState:(id)arg1 ;
+(id)firstActiveContainerWithTarget:(const TFENode*)arg1 ;
+(unsigned long long)selectionForMainBrowserWindow:(TFENodeVector*)arg1 maxItems:(unsigned long long)arg2 ;
+(void)targetSelectOrCreate:(const TFENode*)arg1 windowController:(id)arg2 ;
+(void)openEnclosingFolderOfNodes:(const TFENodeVector*)arg1 windowOptions:(id)arg2 alwaysSelectNodes:(BOOL)arg3 ;
+(id)windowForTimeMachine;
+(void)typeSelectInFrontmostBrowser:(id)arg1 ;
+(void)staggerBrowserWindow:(id)arg1 useDefaultWindowState:(BOOL)arg2 ;
+(BOOL)frameForFrontBrowserWindow:(CGRect*)arg1 ;
+(BOOL)nodeIsAnICloudRoot:(const TFENode*)arg1 ;
+(TString*)titleForICloudContainer:(const TFENode*)arg1 ;
+(TFENode*)theICloudNode;
+(BOOL)nodeIsInICloud:(const TFENode*)arg1 allowQueryHits:(BOOL)arg2 ;
+(TFENode*)cloudDocsNodeForNode:(TFENode*)arg1 ;
+(BOOL)isTheICloudNode:(const TFENode*)arg1 ;
+(void)reduceRootedPath:(TFENodeVector*)arg1 ;
+(TFENode*)cloudLibrariesContainer;
+(TFENode*)mapToUserVisibleCloudLocation:(const TFENode*)arg1 ;
+(TString*)pathPrettyStringForNode:(TFENode*)arg1 ;
+(TFENode*)parentNodeToOpen:(const TFENode*)arg1 ;
-(TBaseBrowserWindowController *)mainBrowserWindowController;
-(void)springWindowDockCallback:(const char*)arg1 forRect:(const CGRect*)arg2 inDirection:(int)arg3 ;
-(void)applicationDidFinishRestoringWindows:(id)arg1 ;
-(void)closeAllWindowsForQuitting;
-(void)cmdSpotlightFindFile:(id)arg1 ;
-(void)cmdFindFile:(id)arg1 ;
-(void)handleReopenAppleEvent;
-(void)closeAllTrashWindows;
-(void)setWindowStateSavePending:(BOOL)arg1 ;
-(void)setRestoringWindowState:(BOOL)arg1 ;
-(void)postWindowDidBecomeMainNotification:(id)arg1 ;
-(void)browserWindowDidBecomeMain:(id)arg1 ;
-(TFENode*)nodeFromDockPath:(const TString*)arg1 ;
-(void)closeAllAccessoryWindows;
-(void)closeAllWindowsExceptDesktop;
-(void)closeAllWindowsForFFK;
-(void)cmdNewTab:(id)arg1 ;
-(void)cmdNewFileViewer:(id)arg1 ;
-(BOOL)validateNewTab:(id)arg1 ;
-(BOOL)commonValidateGoToForNode:(const TFENode*)arg1 ;
-(void)goToCommon:(const TFENode*)arg1 ;
-(BOOL)shouldUseMergeAllWindowsAnimation;
-(void)setMainBrowserWindowController:(TBaseBrowserWindowController *)arg1 ;
-(BOOL)restoringWindowState;
-(BOOL)windowStateSavePending;
-(BOOL)anyWindowIsSpringing;
-(void)saveWindowState;
-(void)revertAllSprungWindowsIncludingUnderMouse:(BOOL)arg1 ;
-(void)cmdNewSmartFolder:(id)arg1 ;
-(BOOL)validateCloseAllWindows:(id)arg1 ;
-(void)cmdCloseAllWindows:(id)arg1 ;
-(void)cmdAlternateFindFile:(id)arg1 ;
-(BOOL)validateGoToComputer:(id)arg1 ;
-(BOOL)validateGoHome:(id)arg1 ;
-(BOOL)validateGoToDesktop:(id)arg1 ;
-(BOOL)validateGoToDownloads:(id)arg1 ;
-(BOOL)validateGoToUserLibrary:(id)arg1 ;
-(BOOL)validateGoToNetwork:(id)arg1 ;
-(BOOL)validateGoToMeetingRoom:(id)arg1 ;
-(void)cmdGoToMeetingRoom:(id)arg1 ;
-(BOOL)validateGoToApplications:(id)arg1 ;
-(BOOL)validateGoToAllMyFiles:(id)arg1 ;
-(void)cmdGoToAllMyFiles:(id)arg1 ;
-(BOOL)validateGoToDocuments:(id)arg1 ;
-(BOOL)validateGoToFavorites:(id)arg1 ;
-(void)cmdGoToFavorites:(id)arg1 ;
-(BOOL)validateGoToMusic:(id)arg1 ;
-(void)cmdGoToMusic:(id)arg1 ;
-(BOOL)validateGoToMovies:(id)arg1 ;
-(void)cmdGoToMovies:(id)arg1 ;
-(BOOL)validateGoToPictures:(id)arg1 ;
-(void)cmdGoToPictures:(id)arg1 ;
-(BOOL)validateGoToPublic:(id)arg1 ;
-(void)cmdGoToPublic:(id)arg1 ;
-(BOOL)validateGoToUtilities:(id)arg1 ;
-(BOOL)validateGoTo:(id)arg1 ;
-(BOOL)validateMergeAllWindows:(id)arg1 ;
-(void)cmdMergeAllWindows:(id)arg1 ;
-(BOOL)validateBringAllToFront:(id)arg1 ;
-(void)cmdBringAllToFront:(id)arg1 ;
-(void)updateMainBrowserWindowController;
-(void)restoreOneBrowserWindowFromState:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)cmdGoHome:(id)arg1 ;
-(void)cmdGoToComputer:(id)arg1 ;
-(void)cmdGoToApplications:(id)arg1 ;
-(void)cmdGoToDocuments:(id)arg1 ;
-(void)cmdGoToDesktop:(id)arg1 ;
-(void)cmdGoToDownloads:(id)arg1 ;
-(void)cmdGoToICloud:(id)arg1 ;
-(void)cmdGoToUserLibrary:(id)arg1 ;
-(void)cmdGoToUtilities:(id)arg1 ;
-(void)cmdGoTo:(id)arg1 ;
-(void)cmdSetFocusToSearchField:(id)arg1 ;
-(void)windowDidChange;
-(void)cmdGoToNetwork:(id)arg1 ;
-(id)init;
@end

