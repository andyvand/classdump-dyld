/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 7:58:12 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Users/joris/Desktop/SysDecrypts/64-Bit/Finder
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@class <TStdAlertSheetClientProtocol>, NSUbiquitousKeyValueStore, NSImage, NSObject<NSCopying>, NSMutableOrderedSet, NSVisualEffectView, TUpdateLayerView, NSObject, TAirDropDiscoveryController, NSIndexSet, NSArray, <FIFinderSyncExtensionProtocol>, NSData, NSFormatter, CALayer, TAirDropProgressLayer, TAirDropInfoViewController, TAirDropLayoutController, TLayer, TDesktopViewController, NSDictionary, NSLayoutConstraint, TTargetActionFunctor, NSView, NSTrackingArea, NSMutableArray, NSColor, TShrinkToFitWindow, NSWindow, SFWirelessSettingsController, TShrinkToFitController, TDesktopIcon, TRenameOperation, NSMutableDictionary, TAirDropDiscoverableModePopoverViewController, TPopoverController, TBaseBrowserWindowController, NSURLConnection, NSMutableSet, TMidnightTimer, TICloudAccountManager, TTabViewController, TSingleLineTabViewController, NSButton, TToolbarController, TTabViewItem, NSTimer, TTitleField, TQueuedPopoverController, TAirDropPerson, NSArrayController, TOpenWithPopupMenuController, TQLPreviewViewZoomController, TDesktopMultiViewController, TTextWithTitleFieldImpl, TFavoriteServersTableViewController, TFloatingInputView, TValidatingDateFormatter, TIconViewSettings, TListViewSettings, NSString, TLayoutBinder, TPropertyLogicalSizeExtractor, TFileSizeFormatter, TProgressStatusViewController, <TAirDropNotAvailableDelegateProtocol>, TInlineProgressHostLayer, TBasicImageView, TDesktopIconSelectionView, TDesktopInlineProgressHostView, TDesktopTitleBubbleView, TDesktopSubtitleTextField, QLPreviewPanel, NSDate, TIconView, NSMutableIndexSet, TIconViewCellOffscreenRenderer, TBrowserViewDataSource, TICloudNoDocumentsViewController, TDelayedPopulationViewController, SFAirDropDiscoveryController, TColumnPreviewController, NSImageView, TSidebarSplitView, QLInlinePreviewController, TImageView, IActionButtonCell, NSDateComponents, TListHeaderCellView, TTagOperationDelegate, TOpenWithMenuFactory, NSMenu, NSEvent, CAContext, IPropertyValueExtractor, TView, TGradientSeparator, TViewController, TPopover, NSFont, TInlineProgressBarLayer, TInlineCancelButtonLayer, DMCoreStorage, TAirDropLegacyModePopoverViewController, TInlinePreviewData, NSSharingServicePicker, NSOperationQueue, NSURL, TTabViewCoverLayer, TTabViewSingleLineView, TBackupContainerDelegate, TNodeViewSettings, TSplitView, TDrawRectView, TTagColumnTableViewController, TBrowserBackgroundView, TBrowserViewSwitchAnimator, TWindowHistory, TBulkRenameController, NSTextStorage, NSLayoutManager, NSTextContainer, TDesktopViewDataSource, TDesktopGridLayoutController, TDesktopIconSpatialDataController, TDesktopBandSelectionController, TDesktopInlinePreviewController, TGroupInFolderAnimationController, TTagEditorController, TTextField, TTaggingSuggestionsViewController, TTagSuggestionsWindowController, TTagInfo;

typedef struct TNSRef<id<TStdAlertSheetClientProtocol> > {
	<TStdAlertSheetClientProtocol>* fRef;
} TNSRef<id<TStdAlertSheetClientProtocol> >;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct function<void (long)> {
	type __buf_;
	__base<void (long)> __f_;
} function<void (long)>;

typedef struct TNSRef<NSUbiquitousKeyValueStore *> {
	NSUbiquitousKeyValueStore* fRef;
} TNSRef<NSUbiquitousKeyValueStore *>;

typedef struct TNSRef<id> {
	id fRef;
} TNSRef<id>;

typedef struct TriStateBool {
	int fState;
} TriStateBool;

typedef struct _NSZone* NSZoneRef;

typedef struct TFENode {
	OpaqueNodeRef fNodeRef;
} TFENode;

typedef struct TNSRef<NSImage *> {
	NSImage* fRef;
} TNSRef<NSImage *>;

typedef struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > {
	__CFString fRef;
} TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> >;

typedef struct TString {
	TRef<const __CFString *, TRetainReleasePolicy<CFStringRef> > fString;
} TString;

typedef struct TNSRef<NSObject<NSCopying> *> {
	NSObject<NSCopying>* fRef;
} TNSRef<NSObject<NSCopying> *>;

typedef const struct TGroupedNodes* TGroupedNodesRef;

typedef struct opaque_pthread_rwlock_t {
	long long __sig;
	char __opaque[192];
} opaque_pthread_rwlock_t;

typedef struct TReadWriteLock {
	opaque_pthread_rwlock_t fRWLock;
} TReadWriteLock;

typedef struct _compressed_pair<TFENode *, std::__1::allocator<TFENode> > {
	TFENode __first_;
} compressed_pair<TFENode *, std::__1::allocator<TFENode> >;

typedef struct TFENodeVector {
	TFENode __begin_;
	TFENode __end_;
	compressed_pair<TFENode *, std::__1::allocator<TFENode> > __end_cap_;
} TFENodeVector;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<TFENode> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<TFENode> >;

typedef struct _compressed_pair<float, std::__1::equal_to<TFENode> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<TFENode> >;

typedef struct _hash_node_base<std::__1::__hash_node<TFENode, void *> *> {
	__hash_node<TFENode, void *> __next_;
} hash_node_base<std::__1::__hash_node<TFENode, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TFENode, void *> *>, std::__1::allocator<std::__1::__hash_node<TFENode, void *> > > {
	hash_node_base<std::__1::__hash_node<TFENode, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TFENode, void *> *>, std::__1::allocator<std::__1::__hash_node<TFENode, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<TFENode, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > > {
	__hash_node<TFENode, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<TFENode, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<TFENode, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > > {
	compressed_pair<std::__1::__hash_node<TFENode, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<TFENode, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > >;

typedef struct _hash_table<TFENode, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<TFENode> > {
	unique_ptr<std::__1::__hash_node<TFENode, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TFENode, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TFENode, void *> *>, std::__1::allocator<std::__1::__hash_node<TFENode, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<TFENode> > __p2_;
	compressed_pair<float, std::__1::equal_to<TFENode> > __p3_;
} hash_table<TFENode, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<TFENode> >;

typedef struct unordered_set<TFENode, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<TFENode> > {
	hash_table<TFENode, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<TFENode> > __table_;
} unordered_set<TFENode, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<TFENode> >;

typedef struct TRef<dispatch_queue_s *, TRetainReleasePolicy<dispatch_queue_t> > {
	dispatch_queue_s fRef;
} TRef<dispatch_queue_s *, TRetainReleasePolicy<dispatch_queue_t> >;

typedef struct TNSRef<NSMutableOrderedSet *> {
	NSMutableOrderedSet* fRef;
} TNSRef<NSMutableOrderedSet *>;

typedef struct TRef<TDesktopNodesComparator *, TRetainReleasePolicy<TDesktopNodesComparator *> > {
	TDesktopNodesComparator fRef;
} TRef<TDesktopNodesComparator *, TRetainReleasePolicy<TDesktopNodesComparator *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TString, std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, std::__1::less<TString>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TString, std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, std::__1::less<TString>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, void *> > >;

typedef struct _tree<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, std::__1::__map_value_compare<TString, std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, std::__1::less<TString>, true>, std::__1::allocator<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers> > > {
	__tree_node<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TString, std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, std::__1::less<TString>, true> > __pair3_;
} tree<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, std::__1::__map_value_compare<TString, std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, std::__1::less<TString>, true>, std::__1::allocator<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers> > >;

typedef struct map<TString, TKVOPubKeyPathAndObservers, std::__1::less<TString>, std::__1::allocator<std::__1::pair<const TString, TKVOPubKeyPathAndObservers> > > {
	tree<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, std::__1::__map_value_compare<TString, std::__1::__value_type<TString, TKVOPubKeyPathAndObservers>, std::__1::less<TString>, true>, std::__1::allocator<std::__1::__value_type<TString, TKVOPubKeyPathAndObservers> > > __tree_;
} map<TString, TKVOPubKeyPathAndObservers, std::__1::less<TString>, std::__1::allocator<std::__1::pair<const TString, TKVOPubKeyPathAndObservers> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> > > > {
	__tree_node<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> > > >;

typedef struct map<TFENode, TNSRef<NSMutableDictionary *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<NSMutableDictionary *> > > > {
	tree<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<NSMutableDictionary *> > > > __tree_;
} map<TFENode, TNSRef<NSMutableDictionary *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<NSMutableDictionary *> > > >;

typedef struct __CFData* CFDataRef;

typedef struct TNSRef<NSVisualEffectView *> {
	NSVisualEffectView* fRef;
} TNSRef<NSVisualEffectView *>;

typedef struct TNSRef<TUpdateLayerView *> {
	TUpdateLayerView* fRef;
} TNSRef<TUpdateLayerView *>;

typedef struct TRef<TUndoableAction *, TRefCountedRetainReleasePolicy> {
	TUndoableAction fRef;
} TRef<TUndoableAction *, TRefCountedRetainReleasePolicy>;

typedef struct TKeyValueBinder {
	NSObject* fReceiverObj;
	TString fReceiversBinding;
} TKeyValueBinder;

typedef struct TNSRef<NSObject *> {
	NSObject* fRef;
} TNSRef<NSObject *>;

typedef struct TNotificationCenterObserver {
	TNSRef<NSObject *> fFunctorGlue;
	TString fNotificationName;
	id fObject;
} TNotificationCenterObserver;

typedef struct TNSRef<TAirDropDiscoveryController *> {
	TAirDropDiscoveryController* fRef;
} TNSRef<TAirDropDiscoveryController *>;

typedef struct TNSRef<NSIndexSet *> {
	NSIndexSet* fRef;
} TNSRef<NSIndexSet *>;

typedef struct TKeyValueObserver {
	NSObject* fObserver;
	NSObject* fObjectToObserve;
	NSArray* fArrayOfObjectsToObserve;
	TNSRef<NSIndexSet *> fIndexesOfObjectsToObserve;
	TString fKeyPathToObserve;
	void fContext;
} TKeyValueObserver;

typedef struct TNSRef<id<FIFinderSyncExtensionProtocol> > {
	<FIFinderSyncExtensionProtocol>* fRef;
} TNSRef<id<FIFinderSyncExtensionProtocol> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> > > >;

typedef struct unordered_map<TString, TNSRef<NSDictionary *>, std::__1::hash<TString>, std::__1::equal_to<TString>, std::__1::allocator<std::__1::pair<const TString, TNSRef<NSDictionary *> > > > {
	hash_table<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> >, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TNSRef<NSDictionary *> > > > __table_;
} unordered_map<TString, TNSRef<NSDictionary *>, std::__1::hash<TString>, std::__1::equal_to<TString>, std::__1::allocator<std::__1::pair<const TString, TNSRef<NSDictionary *> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> {
	__hash_node<std::__1::__hash_value_type<TString, TString>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TString, TString>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TString, TString>, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TString> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, TString>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TString, TString>, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TString> > >;

typedef struct unordered_map<TString, TString, std::__1::hash<TString>, std::__1::equal_to<TString>, std::__1::allocator<std::__1::pair<const TString, TString> > > {
	hash_table<std::__1::__hash_value_type<TString, TString>, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, TString>, std::__1::hash<TString>, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, TString>, std::__1::equal_to<TString>, true>, std::__1::allocator<std::__1::__hash_value_type<TString, TString> > > __table_;
} unordered_map<TString, TString, std::__1::hash<TString>, std::__1::equal_to<TString>, std::__1::allocator<std::__1::pair<const TString, TString> > >;

typedef struct TNSRef<NSData *> {
	NSData* fRef;
} TNSRef<NSData *>;

typedef struct _compressed_pair<TNSRef<NSURL *> *, std::__1::allocator<TNSRef<NSURL *> > > {
	TNSRef<NSURL *> __first_;
} compressed_pair<TNSRef<NSURL *> *, std::__1::allocator<TNSRef<NSURL *> > >;

typedef struct vector<TNSRef<NSURL *>, std::__1::allocator<TNSRef<NSURL *> > > {
	TNSRef<NSURL *> __begin_;
	TNSRef<NSURL *> __end_;
	compressed_pair<TNSRef<NSURL *> *, std::__1::allocator<TNSRef<NSURL *> > > __end_cap_;
} vector<TNSRef<NSURL *>, std::__1::allocator<TNSRef<NSURL *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TString>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TString> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TString>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TString>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TString> > >;

typedef struct unordered_map<TFENode, TString, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TString> > > {
	hash_table<std::__1::__hash_value_type<TFENode, TString>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TString>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TString> > > __table_;
} unordered_map<TFENode, TString, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TString> > >;

typedef struct TRef<OpaqueIconRef *, TRetainReleasePolicy<IconRef> > {
	OpaqueIconRef fRef;
} TRef<OpaqueIconRef *, TRetainReleasePolicy<IconRef> >;

typedef struct TIconRef {
	TRef<OpaqueIconRef *, TRetainReleasePolicy<IconRef> > fIconRef;
} TIconRef;

typedef struct TNSRef<NSFormatter *> {
	NSFormatter* fRef;
} TNSRef<NSFormatter *>;

typedef struct TNSRef<CALayer *> {
	CALayer* fRef;
} TNSRef<CALayer *>;

typedef struct TNSRef<TAirDropProgressLayer *> {
	TAirDropProgressLayer* fRef;
} TNSRef<TAirDropProgressLayer *>;

typedef struct TNSRef<TAirDropInfoViewController *> {
	TAirDropInfoViewController* fRef;
} TNSRef<TAirDropInfoViewController *>;

typedef struct TNSRef<TAirDropLayoutController *> {
	TAirDropLayoutController* fRef;
} TNSRef<TAirDropLayoutController *>;

typedef struct TNSRef<TLayer *> {
	TLayer* fRef;
} TNSRef<TLayer *>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> > > > {
	__tree_node<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> > > >;

typedef struct map<TFENode, TNSRef<TAirDropPerson *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<TAirDropPerson *> > > > {
	tree<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<TAirDropPerson *> > > > __tree_;
} map<TFENode, TNSRef<TAirDropPerson *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<TAirDropPerson *> > > >;

typedef struct CGContext* CGContextRef;

typedef struct TNSRef<TDesktopViewController *> {
	TDesktopViewController* fRef;
} TNSRef<TDesktopViewController *>;

typedef struct function<void ()> {
	type __buf_;
	__base<void ()> __f_;
} function<void ()>;

typedef struct function<void (NSNotification *)> {
	type __buf_;
	__base<void (NSNotification *)> __f_;
} function<void (NSNotification *)>;

typedef struct OpaqueLSSharedFileListItemRef* OpaqueLSSharedFileListItemRefRef;

typedef struct TNSRef<NSDictionary *> {
	NSDictionary* fRef;
} TNSRef<NSDictionary *>;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct TNSRef<NSLayoutConstraint *> {
	NSLayoutConstraint* fRef;
} TNSRef<NSLayoutConstraint *>;

typedef struct TNSRef<TTargetActionFunctor *> {
	TTargetActionFunctor* fRef;
} TNSRef<TTargetActionFunctor *>;

typedef struct TNSRef<NSView *> {
	NSView* fRef;
} TNSRef<NSView *>;

typedef struct _compressed_pair<TScreenToGridLayoutPair *, std::__1::allocator<TScreenToGridLayoutPair> > {
	TScreenToGridLayoutPair __first_;
} compressed_pair<TScreenToGridLayoutPair *, std::__1::allocator<TScreenToGridLayoutPair> >;

typedef struct vector<TScreenToGridLayoutPair, std::__1::allocator<TScreenToGridLayoutPair> > {
	TScreenToGridLayoutPair __begin_;
	TScreenToGridLayoutPair __end_;
	compressed_pair<TScreenToGridLayoutPair *, std::__1::allocator<TScreenToGridLayoutPair> > __end_cap_;
} vector<TScreenToGridLayoutPair, std::__1::allocator<TScreenToGridLayoutPair> >;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct TNSRef<NSTrackingArea *> {
	NSTrackingArea* fRef;
} TNSRef<NSTrackingArea *>;

typedef struct TNSRef<NSMutableArray *> {
	NSMutableArray* fRef;
} TNSRef<NSMutableArray *>;

typedef struct TNSRef<NSColor *> {
	NSColor* fRef;
} TNSRef<NSColor *>;

typedef struct TNSRef<TShrinkToFitWindow *> {
	TShrinkToFitWindow* fRef;
} TNSRef<TShrinkToFitWindow *>;

typedef struct TNSRef<NSWindow *> {
	NSWindow* fRef;
} TNSRef<NSWindow *>;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct TNSRef<SFWirelessSettingsController *> {
	SFWirelessSettingsController* fRef;
} TNSRef<SFWirelessSettingsController *>;

typedef struct TNSRef<TShrinkToFitController *> {
	TShrinkToFitController* fRef;
} TNSRef<TShrinkToFitController *>;

typedef struct TNSRef<TDesktopIcon *> {
	TDesktopIcon* fRef;
} TNSRef<TDesktopIcon *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> > > >;

typedef struct unordered_map<TFENode, TNSRef<TDesktopIcon *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<TDesktopIcon *> > > > {
	hash_table<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<TDesktopIcon *> > > > __table_;
} unordered_map<TFENode, TNSRef<TDesktopIcon *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<TDesktopIcon *> > > >;

typedef struct TNSRef<TRenameOperation *> {
	TRenameOperation* fRef;
} TNSRef<TRenameOperation *>;

typedef struct TNSRef<NSMutableDictionary *> {
	NSMutableDictionary* fRef;
} TNSRef<NSMutableDictionary *>;

typedef struct TNSRef<TAirDropDiscoverableModePopoverViewController *> {
	TAirDropDiscoverableModePopoverViewController* fRef;
} TNSRef<TAirDropDiscoverableModePopoverViewController *>;

typedef struct TNSRef<TPopoverController *> {
	TPopoverController* fRef;
} TNSRef<TPopoverController *>;

typedef struct TNSRef<TBaseBrowserWindowController *> {
	TBaseBrowserWindowController* fRef;
} TNSRef<TBaseBrowserWindowController *>;

typedef struct shared_ptr<ISpawnOrigin> {
	ISpawnOrigin __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ISpawnOrigin>;

typedef struct TNSRef<NSArray *> {
	NSArray* fRef;
} TNSRef<NSArray *>;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct TMutex {
	opaque_pthread_mutex_t fMutex;
} TMutex;

typedef struct opaque_pthread_cond_t {
	long long __sig;
	char __opaque[40];
} opaque_pthread_cond_t;

typedef struct TConditionVariable {
	opaque_pthread_cond_t fCondition;
} TConditionVariable;

typedef struct TNSAutoRef<NSURLConnection *> {
	NSURLConnection* fRef;
} TNSAutoRef<NSURLConnection *>;

typedef const struct map<const TFENode, const TFENodeVector *const, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, const TFENodeVector *const> > >* map<const TFENode, const TFENodeVector *const, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, const TFENodeVector *const> > >Ref;

typedef const struct map<const TFENode, const std::__1::vector<std::__1::pair<TFENode, unsigned int>, std::__1::allocator<std::__1::pair<TFENode, unsigned int> > > *const, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, const std::__1::vector<std::__1::pair<TFENode, unsigned int>, std::__1::allocator<std::__1::pair<TFENode, unsigned int> > > *const> > >* map<const TFENode, const std::__1::vector<std::__1::pair<TFENode, unsigned int>, std::__1::allocator<std::__1::pair<TFENode, unsigned int> > > *const, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, const std::__1::vector<std::__1::pair<TFENode, unsigned int>, std::__1::allocator<std::__1::pair<TFENode, unsigned int> > > *const> > >Ref;

typedef struct TNSRef<NSMutableSet *> {
	NSMutableSet* fRef;
} TNSRef<NSMutableSet *>;

typedef struct TNSRef<TMidnightTimer *> {
	TMidnightTimer* fRef;
} TNSRef<TMidnightTimer *>;

typedef struct TNSRef<TICloudAccountManager *> {
	TICloudAccountManager* fRef;
} TNSRef<TICloudAccountManager *>;

typedef struct TRef<CGImage *, TRetainReleasePolicy<CGImageRef> > {
	CGImage fRef;
} TRef<CGImage *, TRetainReleasePolicy<CGImageRef> >;

typedef struct CGImage* CGImageRef;

typedef struct TNSRef<TTabViewController *> {
	TTabViewController* fRef;
} TNSRef<TTabViewController *>;

typedef struct TNSRef<TSingleLineTabViewController *> {
	TSingleLineTabViewController* fRef;
} TNSRef<TSingleLineTabViewController *>;

typedef struct TNSRef<NSButton *> {
	NSButton* fRef;
} TNSRef<NSButton *>;

typedef struct TNSRef<TToolbarController *> {
	TToolbarController* fRef;
} TNSRef<TToolbarController *>;

typedef struct OpaqueCoreDragHandler* OpaqueCoreDragHandlerRef;

typedef struct TNSRef<TTabViewItem *> {
	TTabViewItem* fRef;
} TNSRef<TTabViewItem *>;

typedef struct vector<CGRect, std::__1::allocator<CGRect> >* vector<CGRect, std::__1::allocator<CGRect> >Ref;

typedef struct TNSRef<NSTimer *> {
	NSTimer* fRef;
} TNSRef<NSTimer *>;

typedef struct TNSRef<TTitleField *> {
	TTitleField* fRef;
} TNSRef<TTitleField *>;

typedef struct TRecursiveMutex {
	opaque_pthread_mutex_t fMutex;
} TRecursiveMutex;

typedef struct TNSRef<TQueuedPopoverController *> {
	TQueuedPopoverController* fRef;
} TNSRef<TQueuedPopoverController *>;

typedef struct TNSRef<TAirDropPerson *> {
	TAirDropPerson* fRef;
} TNSRef<TAirDropPerson *>;

typedef struct TNSRef<NSArrayController *> {
	NSArrayController* fRef;
} TNSRef<NSArrayController *>;

typedef struct __SFOperation* SFOperationRef;

typedef struct TNSRef<TOpenWithPopupMenuController *> {
	TOpenWithPopupMenuController* fRef;
} TNSRef<TOpenWithPopupMenuController *>;

typedef struct FSPermissionInfo {
	unsigned userID;
	unsigned groupID;
	unsigned char reserved1;
	unsigned char userAccess;
	unsigned short mode;
	__FSFileSecurity fileSec;
} FSPermissionInfo;

typedef struct TRef<__FSFileSecurity *, TRetainReleasePolicy<FSFileSecurityRef> > {
	__FSFileSecurity fRef;
} TRef<__FSFileSecurity *, TRetainReleasePolicy<FSFileSecurityRef> >;

typedef struct TRef<const __CFArray *, TRetainReleasePolicy<CFArrayRef> > {
	__CFArray fRef;
} TRef<const __CFArray *, TRetainReleasePolicy<CFArrayRef> >;

typedef struct __CFArray* CFArrayRef;

typedef struct __CFUUID* CFUUIDRef;

typedef struct __FSFileSecurity* FSFileSecurityRef;

typedef struct TRef<const __CFUUID *, TRetainReleasePolicy<CFUUIDRef> > {
	__CFUUID fRef;
} TRef<const __CFUUID *, TRetainReleasePolicy<CFUUIDRef> >;

typedef struct TIdentity {
	TRef<const __CFUUID *, TRetainReleasePolicy<CFUUIDRef> > fUUIDRef;
	TString fShortName;
	int fPosixID;
	TriStateBool fIsUser;
} TIdentity;

typedef struct TAccessControlInfo {
	unsigned fCustomAccessControlInfo;
	BOOL fReadWrite;
	BOOL fReadOnly;
	BOOL fWriteOnly;
	BOOL fNoAccess;
	BOOL fCustom;
	BOOL fNoInfo;
	BOOL fIsMixed;
	BOOL fIsAllow;
} TAccessControlInfo;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::less<TFENode> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<TFENode> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TObserverStats>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TObserverStats>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TFENode, TCoalescedEvents *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TFENode, TCoalescedEvents *>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TFENode, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TFENode, void *> > >;

typedef struct _tree<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> > {
	__tree_node<TFENode, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TFENode, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<TFENode> > __pair3_;
} tree<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> >;

typedef struct set<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> > {
	tree<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> > __tree_;
} set<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> >;

typedef struct _tree<std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true>, std::__1::allocator<std::__1::__value_type<const TFENode, TCoalescedEvents *> > > {
	__tree_node<std::__1::__value_type<const TFENode, TCoalescedEvents *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TFENode, TCoalescedEvents *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true>, std::__1::allocator<std::__1::__value_type<const TFENode, TCoalescedEvents *> > >;

typedef struct map<const TFENode, TCoalescedEvents *, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TCoalescedEvents *> > > {
	tree<std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::__map_value_compare<const TFENode, std::__1::__value_type<const TFENode, TCoalescedEvents *>, std::__1::less<const TFENode>, true>, std::__1::allocator<std::__1::__value_type<const TFENode, TCoalescedEvents *> > > __tree_;
} map<const TFENode, TCoalescedEvents *, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TCoalescedEvents *> > >;

typedef struct TNodeChangeNotifier {
	OpaqueEventNotifier fChangeNotifier;
} TNodeChangeNotifier;

typedef struct _tree<std::__1::__value_type<TFENode, TObserverStats>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TObserverStats> > > {
	__tree_node<std::__1::__value_type<TFENode, TObserverStats>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TObserverStats>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TObserverStats>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TObserverStats> > >;

typedef struct map<TFENode, TObserverStats, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TObserverStats> > > {
	tree<std::__1::__value_type<TFENode, TObserverStats>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TObserverStats>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TObserverStats> > > __tree_;
} map<TFENode, TObserverStats, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TObserverStats> > >;

typedef struct TInfoPreviewViewQTEjectHelper {
	/*function pointer*/void* _vptr$TNodeEventHandler;
	map<TFENode, TObserverStats, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TObserverStats> > > fObservedNodes;
	TNodeChangeNotifier fNodeChangeNotifier;
	BOOL fClearObserversOnNodeDeleted;
	TCoalescingNodeObserver fNextObserverToFlush;
	unsigned long long fNextFlushTime;
	unsigned long long fLastBusyTime;
	unsigned long long fMicrosecondsToCoalesce;
	map<const TFENode, TCoalescedEvents *, std::__1::less<const TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TCoalescedEvents *> > > fCoalescedEventsMap;
	set<TFENode, std::__1::less<TFENode>, std::__1::allocator<TFENode> > fChildListChangesPending;
	BOOL fSupportsBulkEventHandling;
	TFENodeVector fPreviouslyPreviewedNodes;
	id fClient;
	BOOL fResettingTarget;
} TInfoPreviewViewQTEjectHelper;

typedef struct TNSRef<TQLPreviewViewZoomController *> {
	TQLPreviewViewZoomController* fRef;
} TNSRef<TQLPreviewViewZoomController *>;

typedef struct TNSRef<TDesktopMultiViewController *> {
	TDesktopMultiViewController* fRef;
} TNSRef<TDesktopMultiViewController *>;

typedef struct vector<DataBrowserItemSpatialData, std::__1::allocator<DataBrowserItemSpatialData> >* vector<DataBrowserItemSpatialData, std::__1::allocator<DataBrowserItemSpatialData> >Ref;

typedef struct TSideLayoutBinding {
	TNSRef<NSView *> masterView;
	int kind;
	CGRect frame;
} TSideLayoutBinding;

typedef struct TLayoutBinding {
	TSideLayoutBinding top;
	TSideLayoutBinding left;
	TSideLayoutBinding bottom;
	TSideLayoutBinding right;
} TLayoutBinding;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, void *> > >;

typedef struct _tree<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true>, std::__1::allocator<std::__1::__value_type<TNSRef<NSView *>, unsigned long> > > {
	__tree_node<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true> > __pair3_;
} tree<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true>, std::__1::allocator<std::__1::__value_type<TNSRef<NSView *>, unsigned long> > >;

typedef struct map<TNSRef<NSView *>, unsigned long, std::__1::less<TNSRef<NSView *> >, std::__1::allocator<std::__1::pair<const TNSRef<NSView *>, unsigned long> > > {
	tree<std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::__map_value_compare<TNSRef<NSView *>, std::__1::__value_type<TNSRef<NSView *>, unsigned long>, std::__1::less<TNSRef<NSView *> >, true>, std::__1::allocator<std::__1::__value_type<TNSRef<NSView *>, unsigned long> > > __tree_;
} map<TNSRef<NSView *>, unsigned long, std::__1::less<TNSRef<NSView *> >, std::__1::allocator<std::__1::pair<const TNSRef<NSView *>, unsigned long> > >;

typedef struct shared_ptr<TSeamlessOpenerSpawnOrigin> {
	TSeamlessOpenerSpawnOrigin __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<TSeamlessOpenerSpawnOrigin>;

typedef struct TNSRef<TTextWithTitleFieldImpl *> {
	TTextWithTitleFieldImpl* fRef;
} TNSRef<TTextWithTitleFieldImpl *>;

typedef struct TNSRef<TFavoriteServersTableViewController *> {
	TFavoriteServersTableViewController* fRef;
} TNSRef<TFavoriteServersTableViewController *>;

typedef struct __CFURL* CFURLRef;

typedef struct TNSRef<TFloatingInputView *> {
	TFloatingInputView* fRef;
} TNSRef<TFloatingInputView *>;

typedef struct TNSRef<TValidatingDateFormatter *> {
	TValidatingDateFormatter* fRef;
} TNSRef<TValidatingDateFormatter *>;

typedef struct TNSRef<TIconViewSettings *> {
	TIconViewSettings* fRef;
} TNSRef<TIconViewSettings *>;

typedef struct TNSRef<TListViewSettings *> {
	TListViewSettings* fRef;
} TNSRef<TListViewSettings *>;

typedef struct TNSRef<NSString *> {
	NSString* fRef;
} TNSRef<NSString *>;

typedef struct TNSRef<TLayoutBinder *> {
	TLayoutBinder* fRef;
} TNSRef<TLayoutBinder *>;

typedef struct TNSRef<TPropertyLogicalSizeExtractor *> {
	TPropertyLogicalSizeExtractor* fRef;
} TNSRef<TPropertyLogicalSizeExtractor *>;

typedef struct TNSRef<TFileSizeFormatter *> {
	TFileSizeFormatter* fRef;
} TNSRef<TFileSizeFormatter *>;

typedef struct TNSRef<TProgressStatusViewController *> {
	TProgressStatusViewController* fRef;
} TNSRef<TProgressStatusViewController *>;

typedef struct TNSRef<id<TAirDropNotAvailableDelegateProtocol> > {
	<TAirDropNotAvailableDelegateProtocol>* fRef;
} TNSRef<id<TAirDropNotAvailableDelegateProtocol> >;

typedef struct TNSRef<TInlineProgressHostLayer *> {
	TInlineProgressHostLayer* fRef;
} TNSRef<TInlineProgressHostLayer *>;

typedef struct TNSRef<TBasicImageView *> {
	TBasicImageView* fRef;
} TNSRef<TBasicImageView *>;

typedef struct TNSRef<TDesktopIconSelectionView *> {
	TDesktopIconSelectionView* fRef;
} TNSRef<TDesktopIconSelectionView *>;

typedef struct TNSRef<TDesktopInlineProgressHostView *> {
	TDesktopInlineProgressHostView* fRef;
} TNSRef<TDesktopInlineProgressHostView *>;

typedef struct TNSRef<TDesktopTitleBubbleView *> {
	TDesktopTitleBubbleView* fRef;
} TNSRef<TDesktopTitleBubbleView *>;

typedef struct TNSRef<TDesktopSubtitleTextField *> {
	TDesktopSubtitleTextField* fRef;
} TNSRef<TDesktopSubtitleTextField *>;

typedef struct TNSRef<QLPreviewPanel *> {
	QLPreviewPanel* fRef;
} TNSRef<QLPreviewPanel *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> > > >;

typedef struct unordered_map<TFENode, TNSRef<TInlineProgressHostLayer *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<TInlineProgressHostLayer *> > > > {
	hash_table<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<TInlineProgressHostLayer *> > > > __table_;
} unordered_map<TFENode, TNSRef<TInlineProgressHostLayer *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<TInlineProgressHostLayer *> > > >;

typedef struct TNSRef<NSDate *> {
	NSDate* fRef;
} TNSRef<NSDate *>;

typedef struct TNSRef<TIconView *> {
	TIconView* fRef;
} TNSRef<TIconView *>;

typedef struct _compressed_pair<DataBrowserItemSpatialData *, std::__1::allocator<DataBrowserItemSpatialData> > {
	DataBrowserItemSpatialData __first_;
} compressed_pair<DataBrowserItemSpatialData *, std::__1::allocator<DataBrowserItemSpatialData> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TFENode>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TFENode> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TFENode>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TFENode>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TFENode> > >;

typedef struct unordered_map<TFENode, TFENode, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TFENode> > > {
	hash_table<std::__1::__hash_value_type<TFENode, TFENode>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TFENode>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TFENode> > > __table_;
} unordered_map<TFENode, TFENode, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TFENode> > >;

typedef struct TNSRef<NSMutableIndexSet *> {
	NSMutableIndexSet* fRef;
} TNSRef<NSMutableIndexSet *>;

typedef struct TNSRef<TIconViewCellOffscreenRenderer *> {
	TIconViewCellOffscreenRenderer* fRef;
} TNSRef<TIconViewCellOffscreenRenderer *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> > > >;

typedef struct unordered_map<TFENode, TNSRef<NSMutableDictionary *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<NSMutableDictionary *> > > > {
	hash_table<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TNSRef<NSMutableDictionary *> > > > __table_;
} unordered_map<TFENode, TNSRef<NSMutableDictionary *>, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<NSMutableDictionary *> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true>, std::__1::allocator<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true>, std::__1::allocator<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > >;

typedef struct unordered_map<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> >, TStringCaseInsensitiveHash, TStringCaseInsensitiveCompare, std::__1::allocator<std::__1::pair<const TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > > {
	hash_table<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, std::__1::__unordered_map_hasher<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveHash, true>, std::__1::__unordered_map_equal<TString, std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > >, TStringCaseInsensitiveCompare, true>, std::__1::allocator<std::__1::__hash_value_type<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > > __table_;
} unordered_map<TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> >, TStringCaseInsensitiveHash, TStringCaseInsensitiveCompare, std::__1::allocator<std::__1::pair<const TString, std::__1::vector<TruncationTableElement, std::__1::allocator<TruncationTableElement> > > > >;

typedef struct TRef<TBaseNodeComparator *, TRetainReleasePolicy<TBaseNodeComparator *> > {
	TBaseNodeComparator fRef;
} TRef<TBaseNodeComparator *, TRetainReleasePolicy<TBaseNodeComparator *> >;

typedef struct shared_ptr<TThumbnailExtractorController> {
	TThumbnailExtractorController __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<TThumbnailExtractorController>;

typedef struct TNSRef<TBrowserViewDataSource *> {
	TBrowserViewDataSource* fRef;
} TNSRef<TBrowserViewDataSource *>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TFENode>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TFENode>, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, TFENode>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TFENode> > > {
	__tree_node<std::__1::__value_type<TFENode, TFENode>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TFENode>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TFENode>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TFENode> > >;

typedef struct map<TFENode, TFENode, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TFENode> > > {
	tree<std::__1::__value_type<TFENode, TFENode>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TFENode>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TFENode> > > __tree_;
} map<TFENode, TFENode, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TFENode> > >;

typedef struct TNSRef<TICloudNoDocumentsViewController *> {
	TICloudNoDocumentsViewController* fRef;
} TNSRef<TICloudNoDocumentsViewController *>;

typedef struct TNSRef<TDelayedPopulationViewController *> {
	TDelayedPopulationViewController* fRef;
} TNSRef<TDelayedPopulationViewController *>;

typedef struct OpaqueNodeRef* OpaqueNodeRefRef;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> > > > {
	__tree_node<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> > > >;

typedef struct map<TFENode, TNSRef<TContainerExtraData *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<TContainerExtraData *> > > > {
	tree<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TNSRef<TContainerExtraData *> > > > __tree_;
} map<TFENode, TNSRef<TContainerExtraData *>, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TNSRef<TContainerExtraData *> > > >;

typedef struct TNSRef<SFAirDropDiscoveryController *> {
	SFAirDropDiscoveryController* fRef;
} TNSRef<SFAirDropDiscoveryController *>;

typedef struct TNSRef<TColumnPreviewController *> {
	TColumnPreviewController* fRef;
} TNSRef<TColumnPreviewController *>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> > > > {
	__tree_node<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> > > >;

typedef struct TAliasesTargets {
	tree<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> >, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, std::__1::pair<short, TFENode> > > > __tree_;
} TAliasesTargets;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<long, TFENode>, short> > > {
	__tree_node<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<long, TFENode>, short> > >;

typedef struct TColumnOptimizerContainers {
	tree<std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::__map_value_compare<std::__1::pair<long, TFENode>, std::__1::__value_type<std::__1::pair<long, TFENode>, short>, std::__1::less<std::__1::pair<long, TFENode> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<long, TFENode>, short> > > __tree_;
} TColumnOptimizerContainers;

typedef struct _compressed_pair<std::__1::pair<TFENode, TFENode> *, std::__1::allocator<std::__1::pair<TFENode, TFENode> > > {
	pair<TFENode, TFENode> __first_;
} compressed_pair<std::__1::pair<TFENode, TFENode> *, std::__1::allocator<std::__1::pair<TFENode, TFENode> > >;

typedef struct vector<std::__1::pair<TFENode, TFENode>, std::__1::allocator<std::__1::pair<TFENode, TFENode> > > {
	pair<TFENode, TFENode> __begin_;
	pair<TFENode, TFENode> __end_;
	compressed_pair<std::__1::pair<TFENode, TFENode> *, std::__1::allocator<std::__1::pair<TFENode, TFENode> > > __end_cap_;
} vector<std::__1::pair<TFENode, TFENode>, std::__1::allocator<std::__1::pair<TFENode, TFENode> > >;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct TNSRef<NSImageView *> {
	NSImageView* fRef;
} TNSRef<NSImageView *>;

typedef struct TNSRef<TSidebarSplitView *> {
	TSidebarSplitView* fRef;
} TNSRef<TSidebarSplitView *>;

typedef struct TSidebarViewContainer* TSidebarViewContainerRef;

typedef struct _compressed_pair<TNSRef<NSWindow *> *, std::__1::allocator<TNSRef<NSWindow *> > > {
	TNSRef<NSWindow *> __first_;
} compressed_pair<TNSRef<NSWindow *> *, std::__1::allocator<TNSRef<NSWindow *> > >;

typedef struct vector<TNSRef<NSWindow *>, std::__1::allocator<TNSRef<NSWindow *> > > {
	TNSRef<NSWindow *> __begin_;
	TNSRef<NSWindow *> __end_;
	compressed_pair<TNSRef<NSWindow *> *, std::__1::allocator<TNSRef<NSWindow *> > > __end_cap_;
} vector<TNSRef<NSWindow *>, std::__1::allocator<TNSRef<NSWindow *> > >;

typedef struct dispatch_queue_s* dispatch_queue_sRef;

typedef struct _compressed_pair<TNSRef<TSidebarViewController *> *, std::__1::allocator<TNSRef<TSidebarViewController *> > > {
	TNSRef<TSidebarViewController *> __first_;
} compressed_pair<TNSRef<TSidebarViewController *> *, std::__1::allocator<TNSRef<TSidebarViewController *> > >;

typedef struct vector<TNSRef<TSidebarViewController *>, std::__1::allocator<TNSRef<TSidebarViewController *> > > {
	TNSRef<TSidebarViewController *> __begin_;
	TNSRef<TSidebarViewController *> __end_;
	compressed_pair<TNSRef<TSidebarViewController *> *, std::__1::allocator<TNSRef<TSidebarViewController *> > > __end_cap_;
} vector<TNSRef<TSidebarViewController *>, std::__1::allocator<TNSRef<TSidebarViewController *> > >;

typedef struct TNSRef<QLInlinePreviewController *> {
	QLInlinePreviewController* fRef;
} TNSRef<QLInlinePreviewController *>;

typedef struct _compressed_pair<unsigned long, std::__1::less<TString> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<TString> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TString, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TString, void *> > >;

typedef struct _tree<TString, std::__1::less<TString>, std::__1::allocator<TString> > {
	__tree_node<TString, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TString, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<TString> > __pair3_;
} tree<TString, std::__1::less<TString>, std::__1::allocator<TString> >;

typedef struct set<TString, std::__1::less<TString>, std::__1::allocator<TString> > {
	tree<TString, std::__1::less<TString>, std::__1::allocator<TString> > __tree_;
} set<TString, std::__1::less<TString>, std::__1::allocator<TString> >;

typedef struct _compressed_pair<unsigned long, std::__1::less<UDefaults::RegistryID> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<UDefaults::RegistryID> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<UDefaults::RegistryID, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<UDefaults::RegistryID, void *> > >;

typedef struct _tree<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> > {
	__tree_node<UDefaults::RegistryID, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<UDefaults::RegistryID, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<UDefaults::RegistryID> > __pair3_;
} tree<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> >;

typedef struct set<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> > {
	tree<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> > __tree_;
} set<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID> >;

typedef struct _compressed_pair<char *, std::__1::allocator<char> > {
	char* __first_;
} compressed_pair<char *, std::__1::allocator<char> >;

typedef struct vector<char, std::__1::allocator<char> > {
	char* __begin_;
	char* __end_;
	compressed_pair<char *, std::__1::allocator<char> > __end_cap_;
} vector<char, std::__1::allocator<char> >;

typedef struct TNSRef<TImageView *> {
	TImageView* fRef;
} TNSRef<TImageView *>;

typedef struct __CFString* CFStringRef;

typedef struct TNSRef<IActionButtonCell *> {
	IActionButtonCell* fRef;
} TNSRef<IActionButtonCell *>;

typedef struct Point32 {
	int h;
	int v;
} Point32;

typedef struct TIconLayoutBitmap {
	/*function pointer*/void* _vptr$TIconLayoutBitmap;
	unsigned fDisplayID;
	int fBitsPerItem;
	int fRowStride;
	char* fBitmap;
	int fWidth;
	int fHeight;
	Point32 fLastItemLocation;
	unsigned fTransformArray;
	int fOrientation;
	int fStyle;
	BOOL fExpands;
} TIconLayoutBitmap;

typedef struct OpaqueOperationRef* OpaqueOperationRefRef;

typedef struct OperationMonitor {
	OpaqueMonitorData fMonitorData;
	unsigned char fCancelRequested;
	OperationStatus fStatus;
	unsigned fAccumulatedStatusMask;
	unsigned fStatusChangeInterval;
	DSSemaphore fRequestSemaphoreID;
	OpaqueEventQueue fQueue;
	/*function pointer*/void* fTickleProc;
	/*function pointer*/void* fUniqueNameProc;
} OperationMonitor;

typedef struct _compressed_pair<TOperationRecord *, std::__1::allocator<TOperationRecord> > {
	TOperationRecord __first_;
} compressed_pair<TOperationRecord *, std::__1::allocator<TOperationRecord> >;

typedef struct vector<TOperationRecord, std::__1::allocator<TOperationRecord> > {
	TOperationRecord __begin_;
	TOperationRecord __end_;
	compressed_pair<TOperationRecord *, std::__1::allocator<TOperationRecord> > __end_cap_;
} vector<TOperationRecord, std::__1::allocator<TOperationRecord> >;

typedef struct OperationIterator {
	OpaqueOperationData fData;
	/*function pointer*/void* fFirstProc;
	/*function pointer*/void* fNextProc;
} OperationIterator;

typedef struct _wrap_iter<TOperationRecord *> {
	TOperationRecord __i;
} wrap_iter<TOperationRecord *>;

typedef struct HFSUniStr255 {
	unsigned short length;
	unsigned short unicode[255];
} HFSUniStr255;

typedef struct OperationStatus {
	unsigned fStage;
	HFSUniStr255 fCurrentName;
	long long fTimeEstimate;
	long long fItemsTotal;
	long long fItemsCompleted;
	long long fBytesTotal;
	long long fBytesCompleted;
	long long fFSItemsTotal;
	long long fFSItemsCompleted;
} OperationStatus;

typedef struct TNSRef<NSDateComponents *> {
	NSDateComponents* fRef;
} TNSRef<NSDateComponents *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TGroupInFolderItem> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TGroupInFolderItem> > >;

typedef struct unordered_map<TFENode, TGroupInFolderItem, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TGroupInFolderItem> > > {
	hash_table<std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TGroupInFolderItem>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TGroupInFolderItem> > > __table_;
} unordered_map<TFENode, TGroupInFolderItem, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TGroupInFolderItem> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > >;

typedef struct unordered_map<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > >, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > > {
	hash_table<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > > __table_;
} unordered_map<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > >, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > > > >;

typedef struct _hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> __node_;
} hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *>;

typedef struct _hash_map_const_iterator<std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> > {
	hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> __i_;
} hash_map_const_iterator<std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, std::__1::vector<std::__1::pair<TFENode, TFENodePropertyList>, std::__1::allocator<std::__1::pair<TFENode, TFENodePropertyList> > > >, void *> *> >;

typedef struct _wrap_iter<const std::__1::pair<TFENode, TFENodePropertyList> *> {
	pair<TFENode, TFENodePropertyList> __i;
} wrap_iter<const std::__1::pair<TFENode, TFENodePropertyList> *>;

typedef struct _compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > {
	unsigned __first_;
} compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >;

typedef struct DisplayList {
	unsigned __begin_;
	unsigned __end_;
	compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > __end_cap_;
} DisplayList;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CGRect>, std::__1::less<unsigned int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CGRect>, std::__1::less<unsigned int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, CGRect>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, CGRect>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned int, CGRect>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CGRect>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, CGRect> > > {
	__tree_node<std::__1::__value_type<unsigned int, CGRect>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, CGRect>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CGRect>, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned int, CGRect>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CGRect>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, CGRect> > >;

typedef struct map<unsigned int, CGRect, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, CGRect> > > {
	tree<std::__1::__value_type<unsigned int, CGRect>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CGRect>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, CGRect> > > __tree_;
} map<unsigned int, CGRect, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, CGRect> > >;

typedef struct TDisplayConfiguration {
	map<unsigned int, CGRect, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, CGRect> > > fDisplayFrames;
} TDisplayConfiguration;

typedef struct _compressed_pair<TSpatialDataCacheElement *, std::__1::allocator<TSpatialDataCacheElement> > {
	TSpatialDataCacheElement __first_;
} compressed_pair<TSpatialDataCacheElement *, std::__1::allocator<TSpatialDataCacheElement> >;

typedef struct vector<TSpatialDataCacheElement, std::__1::allocator<TSpatialDataCacheElement> > {
	TSpatialDataCacheElement __begin_;
	TSpatialDataCacheElement __end_;
	compressed_pair<TSpatialDataCacheElement *, std::__1::allocator<TSpatialDataCacheElement> > __end_cap_;
} vector<TSpatialDataCacheElement, std::__1::allocator<TSpatialDataCacheElement> >;

typedef struct TNSRef<TListHeaderCellView *> {
	TListHeaderCellView* fRef;
} TNSRef<TListHeaderCellView *>;

typedef struct TNSRef<TTagOperationDelegate *> {
	TTagOperationDelegate* fRef;
} TNSRef<TTagOperationDelegate *>;

typedef struct TNSRef<TOpenWithMenuFactory *> {
	TOpenWithMenuFactory* fRef;
} TNSRef<TOpenWithMenuFactory *>;

typedef struct TNSRef<NSMenu *> {
	NSMenu* fRef;
} TNSRef<NSMenu *>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TOpenWithMenuData>, std::__1::less<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TOpenWithMenuData>, std::__1::less<TFENode>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TOpenWithMenuData>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TOpenWithMenuData>, void *> > >;

typedef struct _tree<std::__1::__value_type<TFENode, TOpenWithMenuData>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TOpenWithMenuData>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TOpenWithMenuData> > > {
	__tree_node<std::__1::__value_type<TFENode, TOpenWithMenuData>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TFENode, TOpenWithMenuData>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TOpenWithMenuData>, std::__1::less<TFENode>, true> > __pair3_;
} tree<std::__1::__value_type<TFENode, TOpenWithMenuData>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TOpenWithMenuData>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TOpenWithMenuData> > >;

typedef struct map<TFENode, TOpenWithMenuData, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TOpenWithMenuData> > > {
	tree<std::__1::__value_type<TFENode, TOpenWithMenuData>, std::__1::__map_value_compare<TFENode, std::__1::__value_type<TFENode, TOpenWithMenuData>, std::__1::less<TFENode>, true>, std::__1::allocator<std::__1::__value_type<TFENode, TOpenWithMenuData> > > __tree_;
} map<TFENode, TOpenWithMenuData, std::__1::less<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TOpenWithMenuData> > >;

typedef struct TSpinLock {
	int fSpinLock;
} TSpinLock;

typedef struct TNSRef<NSEvent *> {
	NSEvent* fRef;
} TNSRef<NSEvent *>;

typedef struct _compressed_pair<TFormattedDateEntry *, std::__1::allocator<TFormattedDateEntry> > {
	TFormattedDateEntry __first_;
} compressed_pair<TFormattedDateEntry *, std::__1::allocator<TFormattedDateEntry> >;

typedef struct vector<TFormattedDateEntry, std::__1::allocator<TFormattedDateEntry> > {
	TFormattedDateEntry __begin_;
	TFormattedDateEntry __end_;
	compressed_pair<TFormattedDateEntry *, std::__1::allocator<TFormattedDateEntry> > __end_cap_;
} vector<TFormattedDateEntry, std::__1::allocator<TFormattedDateEntry> >;

typedef struct TNSRef<CAContext *> {
	CAContext* fRef;
} TNSRef<CAContext *>;

typedef struct TNSRef<IPropertyValueExtractor *> {
	IPropertyValueExtractor* fRef;
} TNSRef<IPropertyValueExtractor *>;

typedef struct TNSRef<TView *> {
	TView* fRef;
} TNSRef<TView *>;

typedef struct TNSRef<TGradientSeparator *> {
	TGradientSeparator* fRef;
} TNSRef<TGradientSeparator *>;

typedef struct TNSRef<TViewController *> {
	TViewController* fRef;
} TNSRef<TViewController *>;

typedef struct TNSRef<TPopover *> {
	TPopover* fRef;
} TNSRef<TPopover *>;

typedef struct _compressed_pair<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > *, std::__1::allocator<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > > > {
	pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > __first_;
} compressed_pair<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > *, std::__1::allocator<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > > >;

typedef struct vector<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> >, std::__1::allocator<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > > > {
	pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > __begin_;
	pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > __end_;
	compressed_pair<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > *, std::__1::allocator<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > > > __end_cap_;
} vector<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> >, std::__1::allocator<std::__1::pair<TNSRef<TTextField<TTextWithTitleFieldImplProtocol> *>, TNSRef<TLayoutBinder *> > > >;

typedef struct TNSRef<NSFont *> {
	NSFont* fRef;
} TNSRef<NSFont *>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> {
	__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TProgressState> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TFENode, TProgressState>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TProgressState> > >;

typedef struct unordered_map<TFENode, TProgressState, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TProgressState> > > {
	hash_table<std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::__unordered_map_hasher<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::hash<TFENode>, true>, std::__1::__unordered_map_equal<TFENode, std::__1::__hash_value_type<TFENode, TProgressState>, std::__1::equal_to<TFENode>, true>, std::__1::allocator<std::__1::__hash_value_type<TFENode, TProgressState> > > __table_;
} unordered_map<TFENode, TProgressState, std::__1::hash<TFENode>, std::__1::equal_to<TFENode>, std::__1::allocator<std::__1::pair<const TFENode, TProgressState> > >;

typedef struct TNSRef<TInlineProgressBarLayer *> {
	TInlineProgressBarLayer* fRef;
} TNSRef<TInlineProgressBarLayer *>;

typedef struct TNSRef<TInlineCancelButtonLayer *> {
	TInlineCancelButtonLayer* fRef;
} TNSRef<TInlineCancelButtonLayer *>;

typedef struct __DADisk* DADiskRef;

typedef struct TRef<__DADisk *, TRetainReleasePolicy<DADiskRef> > {
	__DADisk fRef;
} TRef<__DADisk *, TRetainReleasePolicy<DADiskRef> >;

typedef struct TRef<__CFRunLoop *, TRetainReleasePolicy<CFRunLoopRef> > {
	__CFRunLoop fRef;
} TRef<__CFRunLoop *, TRetainReleasePolicy<CFRunLoopRef> >;

typedef struct TNSRef<DMCoreStorage *> {
	DMCoreStorage* fRef;
} TNSRef<DMCoreStorage *>;

typedef struct TRef<dispatch_source_s *, TRetainReleasePolicy<dispatch_source_t> > {
	dispatch_source_s fRef;
} TRef<dispatch_source_s *, TRetainReleasePolicy<dispatch_source_t> >;

typedef struct TNSRef<TAirDropLegacyModePopoverViewController *> {
	TAirDropLegacyModePopoverViewController* fRef;
} TNSRef<TAirDropLegacyModePopoverViewController *>;

typedef struct TNSRef<TInlinePreviewData *> {
	TInlinePreviewData* fRef;
} TNSRef<TInlinePreviewData *>;

typedef struct function<void (const TFENode &)> {
	type __buf_;
	__base<void (const TFENode &)> __f_;
} function<void (const TFENode &)>;

typedef struct function<void (const TFENodeVector &, const TError &)> {
	type __buf_;
	__base<void (const TFENodeVector &, const TError &)> __f_;
} function<void (const TFENodeVector &, const TError &)>;

typedef struct _compressed_pair<TString *, std::__1::allocator<TString> > {
	TString __first_;
} compressed_pair<TString *, std::__1::allocator<TString> >;

typedef struct TStringVector {
	TString __begin_;
	TString __end_;
	compressed_pair<TString *, std::__1::allocator<TString> > __end_cap_;
} TStringVector;

typedef struct TNSRef<NSSharingServicePicker *> {
	NSSharingServicePicker* fRef;
} TNSRef<NSSharingServicePicker *>;

typedef struct {
	CGSize field1;
	CGSize field2;
} SCD_Struct_TA397;

typedef struct TNSRef<NSOperationQueue *> {
	NSOperationQueue* fRef;
} TNSRef<NSOperationQueue *>;

typedef struct TNSRef<NSURL *> {
	NSURL* fRef;
} TNSRef<NSURL *>;

typedef struct function<void (float)> {
	type __buf_;
	__base<void (float)> __f_;
} function<void (float)>;

typedef struct _compressed_pair<TNSRef<TTabViewItem *> *, std::__1::allocator<TNSRef<TTabViewItem *> > > {
	TNSRef<TTabViewItem *> __first_;
} compressed_pair<TNSRef<TTabViewItem *> *, std::__1::allocator<TNSRef<TTabViewItem *> > >;

typedef struct vector<TNSRef<TTabViewItem *>, std::__1::allocator<TNSRef<TTabViewItem *> > > {
	TNSRef<TTabViewItem *> __begin_;
	TNSRef<TTabViewItem *> __end_;
	compressed_pair<TNSRef<TTabViewItem *> *, std::__1::allocator<TNSRef<TTabViewItem *> > > __end_cap_;
} vector<TNSRef<TTabViewItem *>, std::__1::allocator<TNSRef<TTabViewItem *> > >;

typedef struct TNSRef<TTabViewCoverLayer *> {
	TTabViewCoverLayer* fRef;
} TNSRef<TTabViewCoverLayer *>;

typedef struct _compressed_pair<TNodeObserverCocoaBridge *, std::__1::default_delete<TNodeObserverCocoaBridge> > {
	TNodeObserverCocoaBridge __first_;
} compressed_pair<TNodeObserverCocoaBridge *, std::__1::default_delete<TNodeObserverCocoaBridge> >;

typedef struct unique_ptr<TNodeObserverCocoaBridge, std::__1::default_delete<TNodeObserverCocoaBridge> > {
	compressed_pair<TNodeObserverCocoaBridge *, std::__1::default_delete<TNodeObserverCocoaBridge> > __ptr_;
} unique_ptr<TNodeObserverCocoaBridge, std::__1::default_delete<TNodeObserverCocoaBridge> >;

typedef struct TNSRef<TTabViewSingleLineView *> {
	TTabViewSingleLineView* fRef;
} TNSRef<TTabViewSingleLineView *>;

typedef struct TNSRef<TBackupContainerDelegate *> {
	TBackupContainerDelegate* fRef;
} TNSRef<TBackupContainerDelegate *>;

typedef struct TNSRef<TNodeViewSettings *> {
	TNodeViewSettings* fRef;
} TNSRef<TNodeViewSettings *>;

typedef struct TNSRef<TSplitView *> {
	TSplitView* fRef;
} TNSRef<TSplitView *>;

typedef struct TNSRef<TDrawRectView *> {
	TDrawRectView* fRef;
} TNSRef<TDrawRectView *>;

typedef struct TNSRef<TTagColumnTableViewController *> {
	TTagColumnTableViewController* fRef;
} TNSRef<TTagColumnTableViewController *>;

typedef struct TNSRef<TBrowserBackgroundView *> {
	TBrowserBackgroundView* fRef;
} TNSRef<TBrowserBackgroundView *>;

typedef struct TNSRef<TBrowserViewSwitchAnimator *> {
	TBrowserViewSwitchAnimator* fRef;
} TNSRef<TBrowserViewSwitchAnimator *>;

typedef struct TNSRef<TWindowHistory *> {
	TWindowHistory* fRef;
} TNSRef<TWindowHistory *>;

typedef struct function<void (double)> {
	type __buf_;
	__base<void (double)> __f_;
} function<void (double)>;

typedef struct TNSRef<TBulkRenameController *> {
	TBulkRenameController* fRef;
} TNSRef<TBulkRenameController *>;

typedef struct _compressed_pair<TTypedData *, std::__1::allocator<TTypedData> > {
	TTypedData __first_;
} compressed_pair<TTypedData *, std::__1::allocator<TTypedData> >;

typedef struct vector<TTypedData, std::__1::allocator<TTypedData> > {
	TTypedData __begin_;
	TTypedData __end_;
	compressed_pair<TTypedData *, std::__1::allocator<TTypedData> > __end_cap_;
} vector<TTypedData, std::__1::allocator<TTypedData> >;

typedef struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> > {
	TTimeMachineTarget fRef;
} TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *> >;

typedef struct TNSRef<NSTextStorage *> {
	NSTextStorage* fRef;
} TNSRef<NSTextStorage *>;

typedef struct TNSRef<NSLayoutManager *> {
	NSLayoutManager* fRef;
} TNSRef<NSLayoutManager *>;

typedef struct TNSRef<NSTextContainer *> {
	NSTextContainer* fRef;
} TNSRef<NSTextContainer *>;

typedef struct _compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > {
	_NSRange __first_;
} compressed_pair<_NSRange *, std::__1::allocator<_NSRange> >;

typedef struct vector<_NSRange, std::__1::allocator<_NSRange> > {
	_NSRange __begin_;
	_NSRange __end_;
	compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > __end_cap_;
} vector<_NSRange, std::__1::allocator<_NSRange> >;

typedef struct _compressed_pair<CGRect *, std::__1::allocator<CGRect> > {
	CGRect __first_;
} compressed_pair<CGRect *, std::__1::allocator<CGRect> >;

typedef struct TDesktopTitleMetrics {
	TNSRef<NSTextStorage *> fTextStorage;
	TNSRef<NSLayoutManager *> fLayoutManager;
	TNSRef<NSTextContainer *> fTextContainer;
	unsigned long long fMaxLines;
	double fMaxTextWidth;
	CGRect fUsedTextFrame;
	CGRect fAvailableTextFrame;
	CGRect fIdealTextFrame;
	vector<CGRect, std::__1::allocator<CGRect> > fLineFrames;
	vector<_NSRange, std::__1::allocator<_NSRange> > fLineGlyphRanges;
	vector<_NSRange, std::__1::allocator<_NSRange> > fLineCharRanges;
	double fCenteredHorizontalInset;
	double fAlignedHorizontalInset;
	BOOL fIsTruncatingLastLine;
	BOOL fNeedsCalculation;
} TDesktopTitleMetrics;

typedef struct _compressed_pair<int *, std::__1::allocator<int> > {
	int __first_;
} compressed_pair<int *, std::__1::allocator<int> >;

typedef struct vector<int, std::__1::allocator<int> > {
	int __begin_;
	int __end_;
	compressed_pair<int *, std::__1::allocator<int> > __end_cap_;
} vector<int, std::__1::allocator<int> >;

typedef struct TNSRef<TDesktopViewDataSource *> {
	TDesktopViewDataSource* fRef;
} TNSRef<TDesktopViewDataSource *>;

typedef struct TNSRef<TDesktopGridLayoutController *> {
	TDesktopGridLayoutController* fRef;
} TNSRef<TDesktopGridLayoutController *>;

typedef struct TNSRef<TDesktopIconSpatialDataController *> {
	TDesktopIconSpatialDataController* fRef;
} TNSRef<TDesktopIconSpatialDataController *>;

typedef struct TNSRef<TDesktopBandSelectionController *> {
	TDesktopBandSelectionController* fRef;
} TNSRef<TDesktopBandSelectionController *>;

typedef struct TNSRef<TDesktopInlinePreviewController *> {
	TDesktopInlinePreviewController* fRef;
} TNSRef<TDesktopInlinePreviewController *>;

typedef struct TNSRef<TGroupInFolderAnimationController *> {
	TGroupInFolderAnimationController* fRef;
} TNSRef<TGroupInFolderAnimationController *>;

typedef struct TNSRef<TTagEditorController *> {
	TTagEditorController* fRef;
} TNSRef<TTagEditorController *>;

typedef struct TNSRef<TTextField *> {
	TTextField* fRef;
} TNSRef<TTextField *>;

typedef struct TNSRef<TTaggingSuggestionsViewController *> {
	TTaggingSuggestionsViewController* fRef;
} TNSRef<TTaggingSuggestionsViewController *>;

typedef struct TNSRef<TTagSuggestionsWindowController *> {
	TTagSuggestionsWindowController* fRef;
} TNSRef<TTagSuggestionsWindowController *>;

typedef struct TRef<__CFMachPort *, TRetainReleasePolicy<CFMachPortRef> > {
	__CFMachPort fRef;
} TRef<__CFMachPort *, TRetainReleasePolicy<CFMachPortRef> >;

typedef struct TRef<__CFRunLoopSource *, TRetainReleasePolicy<CFRunLoopSourceRef> > {
	__CFRunLoopSource fRef;
} TRef<__CFRunLoopSource *, TRetainReleasePolicy<CFRunLoopSourceRef> >;

typedef struct TNSRef<TTagInfo *> {
	TTagInfo* fRef;
} TNSRef<TTagInfo *>;

