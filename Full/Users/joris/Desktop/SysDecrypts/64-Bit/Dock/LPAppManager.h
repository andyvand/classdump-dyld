/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 7:58:06 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Users/joris/Desktop/SysDecrypts/64-Bit/Dock
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_queue, OS_xpc_object, OS_dispatch_source;
#import <Dock/Dock-Structs.h>
@class LPStorage, LPRoot, NSMutableArray, NSMutableDictionary, NSMutableSet, NSSet, NSObject, NSArray;

@interface LPAppManager : NSObject {

	LPStorage* _storage;
	LPRoot* _lproot;
	LPRoot* _dbroot;
	LPRoot* _lpversroot;
	NSMutableArray* _rootWaitingBlocks;
	NSMutableArray* _sources;
	NSMutableDictionary* _sourcesByUUID;
	NSMutableDictionary* _runnablesByBundleID;
	NSMutableDictionary* _appsByUUID;
	NSMutableDictionary* _widgetsByUUID;
	NSMutableDictionary* _stashedVersionApps;
	NSMutableDictionary* _storeAppsByStoreID;
	NSMutableSet* _appPathsBeingProcessed;
	NSSet* _appVersionExceptions;
	NSObject*<OS_dispatch_queue> _scanningQueue;
	id _uninstallabilityObserver;
	NSObject*<OS_xpc_object> _appstore_connection;
	AuthorizationOpaqueRefRef _authorizationRef;
	unsigned _scanIdentifier;
	NSObject*<OS_dispatch_source> _rescanTimer;
	char _readOnly;
	char _stillScanning;
	char _addingSources;
	char _widgetSourceShouldRescan;
	char _invalidated;

}

@property (nonatomic,readonly) LPStorage * storage;                       //@synthesize storage=_storage - In the implementation block
@property (nonatomic,readonly) char readonly;                             //@synthesize readOnly=_readOnly - In the implementation block
@property (nonatomic,readonly) NSArray * sources; 
@property (nonatomic,readonly) NSArray * applicationSources; 
@property (nonatomic,readonly) NSArray * widgetSources; 
@property (assign,nonatomic) char sourcesStillScanning;                   //@synthesize stillScanning=_stillScanning - In the implementation block
+(id)sharedManager;
-(void)forgetRunnable:(id)arg1 ;
-(char)sourcesStillScanning;
-(void)resumeDownloadingApp:(id)arg1 ;
-(void)pauseDownloadingApp:(id)arg1 ;
-(void)cancelDownloadingApp:(id)arg1 ;
-(void)roots:(/*^block*/id)arg1 ;
-(id)initAtPath:(id)arg1 readOnly:(char)arg2 ;
-(void)_processRootPages;
-(void)_processInitialSources:(id)arg1 ;
-(void)_setupAppStoreXPCService;
-(void)_updateUninstallableStatus;
-(char)isStillScanning;
-(void)setSourcesStillScanning:(char)arg1 ;
-(void)_addSource:(id)arg1 ;
-(char)pathValidForApplications:(id)arg1 ;
-(void)_checkForMissingApplications:(char)arg1 atPath:(id)arg2 withLatestScanIdentifier:(unsigned)arg3 withCompletion:(id)arg4 ;
-(void)_processScannedApplicationURL:(CFURLRef)arg1 unresolvedSymlinkPath:(id)arg2 fromSource:(id)arg3 isLink:(char*)arg4 preventRecursion:(char*)arg5 withContext:(id)arg6 ;
-(void)_scanForApplicationsAtPath:(id)arg1 symlinkUnresolvedPath:(id)arg2 fromSource:(id)arg3 linksFollowed:(id)arg4 recurse:(char)arg5 withContext:(id)arg6 ;
-(void)_processScannedWidgetURL:(CFURLRef)arg1 fromSource:(id)arg2 allowRecursion:(char*)arg3 withContext:(id)arg4 ;
-(void)_scanForWidgetsAtPath:(id)arg1 fromSource:(id)arg2 withContext:(id)arg3 ;
-(void)_checkRunnablePossibleMissingRunnable:(id)arg1 withCompletion:(id)arg2 ;
-(char)_addResumeAuthorizationToMessage:(id)arg1 ;
-(void)_sendStoreXPCMessage:(id)arg1 ;
-(void)_cacheRunnable:(id)arg1 ;
-(void)_cacheStashedApp:(id)arg1 ;
-(void)_pingStoreForUpdates;
-(void)_source:(id)arg1 foundApplication:(char)arg2 atURL:(id)arg3 withContext:(id)arg4 ;
-(NSArray *)widgetSources;
-(void)_removeSource:(id)arg1 ;
-(NSArray *)applicationSources;
-(void)addApplicationSourceURL:(id)arg1 ;
-(void)addWidgetSourceURL:(id)arg1 ;
-(void)_matchRunnable:(id)arg1 withPath:(id)arg2 toRunnables:(id)arg3 checked:(id)arg4 withURLS:(id)arg5 returnBlock:(/*^block*/id)arg6 ;
-(void)_findExistingRunnableMatching:(id)arg1 atPath:(id)arg2 resolveURLs:(char)arg3 withExisting:(/*^block*/id)arg4 ;
-(void)_stashUnusedAppVersion:(id)arg1 ;
-(void)_bundleIDForRunnable:(id)arg1 changedFrom:(id)arg2 to:(id)arg3 ;
-(void)_updateExistingRunnable:(id)arg1 withNewRunnable:(id)arg2 context:(id)arg3 ;
-(void)_newRunnbleFound:(id)arg1 withExistingRunnable:(id)arg2 isApplication:(BOOL)arg3 ;
-(void)_addNewRunnable:(id)arg1 isApplication:(BOOL)arg2 ;
-(id)_downloadingStoreAppMatchingApp:(id)arg1 ;
-(void)_swapRunnable:(id)arg1 withRunnable:(id)arg2 stashExisting:(BOOL)arg3 ;
-(void)_checkForOlderAppsToReplace:(id)arg1 withApp:(id)arg2 version:(unsigned long long)arg3 context:(id)arg4 ;
-(id)appsMatchingBundleID:(id)arg1 ;
-(void)scanForApplicationsAtPath:(id)arg1 fromSource:(id)arg2 options:(unsigned long long)arg3 completion:(/*^block*/id)arg4 ;
-(void)notePathMissing:(id)arg1 fromSource:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)checkMissingAliasesFromSource:(id)arg1 completion:(/*^block*/id)arg2 ;
-(char)readonly;
-(void)_acceptStoreConnection:(id)arg1 ;
-(void)_appStoreXPCSPurchaseInitialMessage:(id)arg1 dictionary:(id)arg2 ;
-(void)_appStoreXPCSPurchaseUpdateMessage:(id)arg1 dictionary:(id)arg2 ;
-(void)_appStoreXPCSPurchaseCompleteMessage:(id)arg1 dictionary:(id)arg2 ;
-(void)_appStoreXPCCredentialsRequestedMessage:(id)arg1 dictionary:(id)arg2 ;
-(void)_appStoreAppCancelledOrError:(id)arg1 ;
-(id)_appStoreUnknownAppThroughXPCInterface:(id)arg1 ;
-(LPStorage *)storage;
-(void)dealloc;
-(void)invalidate;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(NSArray *)sources;
@end

