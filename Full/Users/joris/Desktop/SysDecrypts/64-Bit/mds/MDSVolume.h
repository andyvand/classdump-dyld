/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 7:58:13 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Users/joris/Desktop/SysDecrypts/64-Bit/mds
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <mds/mds-Structs.h>
#import <mds/MDSObject.h>

@class MDSDisk, NSCountedSet, NSMutableDictionary, MDSPathFilter, NSMutableArray, MDSDiskStorePolicy, MDSVolumeConfig, MDSVolumeFMWQueue;

@interface MDSVolume : MDSObject {

	MDSDisk* _mdsDisk;
	char _defaultIsLegacy;
	NSCountedSet* _stateChangingUUIDs;
	NSMutableDictionary* _vsdAllStoresByUUID;
	NSMutableDictionary* _vsdOpenStoresByUUID;
	CFDictionaryRef _vsdAllStoresByQueueToken;
	NSMutableDictionary* _vsdOpenStoresByPartialPath;
	NSMutableDictionary* _vsdAllStoresByPartialPath;
	MDSPathFilter* _volumeFilter;
	NSMutableArray* _volumeConfigPathsIndexedByFilter;
	CFDictionaryRef _vsdAllStoresByQueueTokenShared;
	MDSPathFilter* _volumeFilterShared;
	MDSPathFilter* _volumeOpenFilterShared;
	int _auditFD;
	char _auditPath[1024];
	int _unmounting;
	char _hasRequestedOrphanDelete;
	char _hasEverRequestedOrphanDelete;
	MDSDiskStorePolicy* _policy;
	char _volumeHasExclusions;
	MDSVolumeConfig* _config;
	MDCredential _ownerCredential;
	MDCredential _indexCredential;
	char _isLegacy;
	char _hasNetworkHomes;
	NSMutableDictionary* _volumeConfigsByPartialPath;
	NSMutableDictionary* _accessTokensByPartialPath;
	int _backupIndexKind;
	char _createdBackupIndex;
	char _anyStoreIndexed;
	char _anyIndexReadWrite;
	unsigned long long _lowDiskSpaceRetryDelay;
	unsigned long long _lowDiskSpaceRetrySpace;
	int _lowDiskSpaceCount;
	int _lowDiskSpaceRetryCount;
	MDSVolumeFMWQueue* _fmwVolumeQueue;
	unsigned long long _fmwVolumeQueueToken;
	MDSVolumeFMWQueue* _fmwVolumeIterateQueue;
	unsigned long long _fmwVolumeIterateQueueToken;
	BOOL _isMasterSlaveFileSystem;
	char _supportsFileIDs;

}
-(id)copyFilter;
-(void)addRunLoopSources;
-(void)invalidateRunLoopSources;
-(BOOL)allowIndexUpgrade;
-(id)initWithDisk:(id)arg1 forHomes:(char)arg2 forceFSOnly:(char)arg3 forceDefaultIndex:(char)arg4 ;
-(id)copyVolumeStoreDescriptorForStoreQueueToken:(unsigned long long)arg1 ;
-(id)copyVolumeStoreDescriptorForPath:(const char*)arg1 filterOut:(SCD_Struct_MD31*)arg2 ;
-(id)copyGeneralVolumeStoreDescriptorForPath:(const char*)arg1 ;
-(id)copyVolumeStoreDescriptorForPath:(const char*)arg1 ;
-(void)iterateAllConfigs:(/*^block*/id)arg1 ;
-(char)isAuditLogEnabled;
-(char*)fullPathUsingBuffer:(char*)arg1 ;
-(void)lowDiskEndedNotification:(id)arg1 ;
-(id)volumeConfigLocationFromPartialPath:(id)arg1 ;
-(id)configRelativePathFromPartialPath:(id)arg1 outConfigLocation:(id*)arg2 ;
-(void)attachPathToConfig:(id)arg1 ;
-(void)iterateAllExclusions:(/*^block*/id)arg1 ;
-(id)copyGeneralVolumeStoreDescriptorForStoreQueueToken:(unsigned long long)arg1 ;
-(id)configFindStoreUUIDWithPartialPath:(id)arg1 ;
-(char)configIsExclusion:(id)arg1 ;
-(id)copyStoreChangeTracker:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(void)createFilterRules;
-(void)closeStoresByUUIDArray:(id)arg1 eraseStores:(char)arg2 completionBlock:(/*^block*/id)arg3 ;
-(id)configPartialPathForStoreUUIDKey:(id)arg1 ;
-(int)configPolicySearchForStoreUUIDKey:(id)arg1 ;
-(char)configIsLegacyForStoreUUIDKey:(id)arg1 ;
-(MDCredential)configIndexCredentialForUUID:(id)arg1 ;
-(MDCredential)configOwnerCredentialForUUID:(id)arg1 ;
-(id)copyStore:(id)arg1 isBackup:(char)arg2 searchLevel:(int)arg3 partialPath:(id)arg4 isLegacy:(char)arg5 isHome:(char)arg6 isMultiStore:(char)arg7 volumeCredential:(MDCredential)arg8 ownerCredential:(MDCredential)arg9 context:(id)arg10 ;
-(void)configUpdateStoreUUIDKey:(id)arg1 ;
-(void)configUpdateStoreUUIDKeyForVersion:(id)arg1 ;
-(void)configRemoveStoreUUIDKey:(id)arg1 ;
-(id)configAddStoreWithPartialPath:(id)arg1 policySearch:(int)arg2 forBackupKind:(int)arg3 ;
-(void)openStoresByUUIDArray:(id)arg1 context:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)rebuildConfigs:(char)arg1 ;
-(id)configAllUUIDs;
-(void)openAuditLog;
-(void)recycleStoresByUUIDArray:(id)arg1 eraseStores:(char)arg2 context:(id)arg3 completionBlock:(/*^block*/id)arg4 ;
-(void)volumeMounted;
-(void)closeAllStoresForUnmountWithCompletionBlock:(/*^block*/id)arg1 ;
-(void)networkHomeLogin:(id)arg1 accessToken:(id)arg2 ;
-(void)networkHomeLogout:(id)arg1 accessToken:(id)arg2 ;
-(void)configSetPolicySearch:(int)arg1 forStoreUUIDKey:(id)arg2 processName:(id)arg3 attributes:(id)arg4 ;
-(id)configAttributesForStoreUUIDKey:(id)arg1 ;
-(void)configSetConfigType:(int)arg1 forPartialPath:(id)arg2 ;
-(id)copyFilterRules2:(MDCredential)arg1 ;
-(id)configSetExclusion:(id)arg1 add:(char)arg2 ;
-(id)getBackupVolumeStoreDescriptor:(int)arg1 ;
-(id)getRootVolumeStoreDescriptor;
-(id)copyOpenFilter;
-(id)copyFilterIsAnyIndexRW:(char*)arg1 ;
-(id)configOlderVersionStoreUUIDKeys;
-(char)isBackupRunning;
-(void)dealloc;
-(void)shutdown;
@end

