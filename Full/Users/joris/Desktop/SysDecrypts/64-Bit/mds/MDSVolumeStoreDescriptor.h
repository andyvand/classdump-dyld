/*
* This header is generated by classdump-dyld 0.7
* on Sunday, February 15, 2015 at 7:58:13 AM Central European Standard Time
* Operating System: Version 10.10.2 (Build 14C109)
* Image Source: /Users/joris/Desktop/SysDecrypts/64-Bit/mds
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol MDSPSIDStoreWrapper, MDSSyndication;
#import <mds/mds-Structs.h>
@class MDSVolume, NSDictionary, NSString, NSMutableArray, MDSStoreImporterQueue, MDSBulkQueue, NSObject;

@interface MDSVolumeStoreDescriptor : NSObject {

	MDSVolume* _volume;
	int _vsdId;
	int _openCancel;
	char _isDistantStore;
	NSDictionary* _context;
	char _legacyIndex;
	MDCredential _volumeCredential;
	MDCredential _ownerCredential;
	int _wishedForSearchLevel;
	int _requestedSearchLevel;
	int _actualSearchLevel;
	int _storeAvailability;
	NSString* _storePartialPath;
	NSString* _uuid;
	NSString* _sessionUUID;
	char _isRootIndex;
	char _isHome;
	char _isBackup;
	char _isMobileBackup;
	char _isMultiStore;
	NSMutableArray* _actionCompleteCallbacks;
	double _openBeginTime;
	double _openCompleteTime;
	double _scanCompleteTime;
	double _indexingCompleteTime;
	double _closeBeginTime;
	double _closeCompleteTime;
	unsigned _storeTokenID;
	unsigned _fsonlyTokenID;
	unsigned long long _storeQueueToken;
	char _isDiskStore;
	char _isScanning;
	char _isFullScan;
	char _isIndexing;
	char _isPrescanning;
	MDSStoreImporterQueue* _queueArray[13];
	CFDictionaryRef _mailKnownItemDictionary;
	long long _lastScrubTime;
	MDSBulkQueue* _fileChangeQueue;
	SIUINT64SetRef _deletedOidSet;
	NSObject*<MDSPSIDStoreWrapper> _psidWrapper;
	opaque_pthread_mutex_t _psidWrapperLock;
	id<MDSSyndication> _delegate;
	char _isSlave;
	char _failedBackupV1Open;
	char _lowDiskBackupOpen;
	char _lowDiskBackupSeen;
	char _fmwBusy;

}
-(id)volumeDisk;
-(id)indexDisk;
-(int)requestedSearchLevel;
-(MDCredential)volumeCredential;
-(char*)path:(char*)arg1 fromStoreDirectoryForItem:(const char*)arg2 ;
-(char)isNetworkHome;
-(int)policyLocation;
-(id)copyVolumePathForItem:(id)arg1 ;
-(id)copyStoreRootPathForItem:(id)arg1 ;
-(id)copySpotlightDirectoryPathForItem:(id)arg1 ;
-(id)copyStoreDirectoryPathForItem:(id)arg1 ;
-(char)isBackupStore;
-(char)isMobileBackupStore;
-(char)isMultiStore;
-(int)defaultSearchLevel;
-(int)policyAsk;
-(int)policyControl;
-(int)maximumSearchLevel;
-(void)closeStore:(/*^block*/id)arg1 ;
-(char)isScanning;
-(long long)oidFromPath:(const char*)arg1 withHint:(unsigned long long)arg2 allowCreate:(char)arg3 ;
-(char)isIndexing;
-(char)isFMWBusy;
-(char)isPrescanning;
-(id)copyPsidStore;
-(int)vsdId;
-(id)copySpotlightVersionDirectoryPathForItem:(id)arg1 ;
-(MDCredential)indexCredential;
-(char*)storePath:(char*)arg1 ;
-(void)generateAction:(int)arg1 when:(double)arg2 ;
-(char)isRootStore;
-(void)openStore:(/*^block*/id)arg1 ;
-(id)initOnVolume:(id)arg1 volumeCredential:(MDCredential)arg2 ownerCredential:(MDCredential)arg3 isBackup:(char)arg4 isMultiStore:(char)arg5 searchLevel:(int)arg6 partialPath:(id)arg7 usingUUIDString:(id)arg8 isHome:(char)arg9 isLegacy:(char)arg10 context:(id)arg11 ;
-(id)initOnVolume:(id)arg1 channel:(_MDSChannel*)arg2 usingUUIDString:(id)arg3 context:(id)arg4 ;
-(void)requestActionCallback:(int)arg1 callback:(/*^block*/id)arg2 ;
-(void)scanningComplete;
-(void)prescanningComplete;
-(void)indexingComplete;
-(char)canChangeSearchLevel;
-(int)actualSearchLevel;
-(char)hasBackupRepairFiles;
-(char)moveBackupRepairFiles;
-(char)iterateBackupRepairFiles:(/*^block*/id)arg1 ;
-(void)unlinkBackupRepairFiles;
-(void)psidRename:(const char*)arg1 to:(const char*)arg2 ;
-(char)isSameSpindle:(id)arg1 ;
-(void)setDelegate:(id)arg1 ;
-(void)dealloc;
-(int)signature;
@end

